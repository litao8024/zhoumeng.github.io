{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"1.1 \u8ba4\u8bc6RNN\u6a21\u578b \u5b66\u4e60\u76ee\u6807: \u4e86\u89e3\u4ec0\u4e48\u662fRNN\u6a21\u578b. \u4e86\u89e3RNN\u6a21\u578b\u7684\u4f5c\u7528. \u4e86\u89e3RNN\u6a21\u578b\u7684\u5206\u7c7b. \u4ec0\u4e48\u662fRNN\u6a21\u578b: RNN(Recurrent Neural Network), \u4e2d\u6587\u79f0\u4f5c\u5faa\u73af\u795e\u7ecf\u7f51\u7edc, \u5b83\u4e00\u822c\u4ee5\u5e8f\u5217\u6570\u636e\u4e3a\u8f93\u5165, \u901a\u8fc7\u7f51\u7edc\u5185\u90e8\u7684\u7ed3\u6784\u8bbe\u8ba1\u6709\u6548\u6355\u6349\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb\u7279\u5f81, \u4e00\u822c\u4e5f\u662f\u4ee5\u5e8f\u5217\u5f62\u5f0f\u8fdb\u884c\u8f93\u51fa. \u4e00\u822c\u5355\u5c42\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784: RNN\u5355\u5c42\u7f51\u7edc\u7ed3\u6784: \u4ee5\u65f6\u95f4\u6b65\u5bf9RNN\u8fdb\u884c\u5c55\u5f00\u540e\u7684\u5355\u5c42\u7f51\u7edc\u7ed3\u6784: RNN\u7684\u5faa\u73af\u673a\u5236\u4f7f\u6a21\u578b\u9690\u5c42\u4e0a\u4e00\u65f6\u95f4\u6b65\u4ea7\u751f\u7684\u7ed3\u679c, \u80fd\u591f\u4f5c\u4e3a\u5f53\u4e0b\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206(\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u9664\u4e86\u6b63\u5e38\u7684\u8f93\u5165\u5916\u8fd8\u5305\u62ec\u4e0a\u4e00\u6b65\u7684\u9690\u5c42\u8f93\u51fa)\u5bf9\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u4ea7\u751f\u5f71\u54cd. RNN\u6a21\u578b\u7684\u4f5c\u7528: \u56e0\u4e3aRNN\u7ed3\u6784\u80fd\u591f\u5f88\u597d\u5229\u7528\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb, \u56e0\u6b64\u9488\u5bf9\u81ea\u7136\u754c\u5177\u6709\u8fde\u7eed\u6027\u7684\u8f93\u5165\u5e8f\u5217, \u5982\u4eba\u7c7b\u7684\u8bed\u8a00, \u8bed\u97f3\u7b49\u8fdb\u884c\u5f88\u597d\u7684\u5904\u7406, \u5e7f\u6cdb\u5e94\u7528\u4e8eNLP\u9886\u57df\u7684\u5404\u9879\u4efb\u52a1, \u5982\u6587\u672c\u5206\u7c7b, \u60c5\u611f\u5206\u6790, \u610f\u56fe\u8bc6\u522b, \u673a\u5668\u7ffb\u8bd1\u7b49. \u4e0b\u9762\u6211\u4eec\u5c06\u4ee5\u4e00\u4e2a\u7528\u6237\u610f\u56fe\u8bc6\u522b\u7684\u4f8b\u5b50\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790: \u7b2c\u4e00\u6b65: \u7528\u6237\u8f93\u5165\u4e86\"What time is it ?\", \u6211\u4eec\u9996\u5148\u9700\u8981\u5bf9\u5b83\u8fdb\u884c\u57fa\u672c\u7684\u5206\u8bcd, \u56e0\u4e3aRNN\u662f\u6309\u7167\u987a\u5e8f\u5de5\u4f5c\u7684, \u6bcf\u6b21\u53ea\u63a5\u6536\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5904\u7406. \u7b2c\u4e8c\u6b65: \u9996\u5148\u5c06\u5355\u8bcd\"What\"\u8f93\u9001\u7ed9RNN, \u5b83\u5c06\u4ea7\u751f\u4e00\u4e2a\u8f93\u51faO1. \u7b2c\u4e09\u6b65: \u7ee7\u7eed\u5c06\u5355\u8bcd\"time\"\u8f93\u9001\u7ed9RNN, \u4f46\u6b64\u65f6RNN\u4e0d\u4ec5\u4ec5\u5229\u7528\"time\"\u6765\u4ea7\u751f\u8f93\u51faO2, \u8fd8\u4f1a\u4f7f\u7528\u6765\u81ea\u4e0a\u4e00\u5c42\u9690\u5c42\u8f93\u51faO1\u4f5c\u4e3a\u8f93\u5165\u4fe1\u606f. \u7b2c\u56db\u6b65: \u91cd\u590d\u8fd9\u6837\u7684\u6b65\u9aa4, \u76f4\u5230\u5904\u7406\u5b8c\u6240\u6709\u7684\u5355\u8bcd. \u7b2c\u4e94\u6b65: \u6700\u540e\uff0c\u5c06\u6700\u7ec8\u7684\u9690\u5c42\u8f93\u51faO5\u8fdb\u884c\u5904\u7406\u6765\u89e3\u6790\u7528\u6237\u610f\u56fe. RNN\u6a21\u578b\u7684\u5206\u7c7b: \u8fd9\u91cc\u6211\u4eec\u5c06\u4ece\u4e24\u4e2a\u89d2\u5ea6\u5bf9RNN\u6a21\u578b\u8fdb\u884c\u5206\u7c7b. \u7b2c\u4e00\u4e2a\u89d2\u5ea6\u662f\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784, \u7b2c\u4e8c\u4e2a\u89d2\u5ea6\u662fRNN\u7684\u5185\u90e8\u6784\u9020. \u6309\u7167\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784\u8fdb\u884c\u5206\u7c7b: N vs N - RNN N vs 1 - RNN 1 vs N - RNN N vs M - RNN \u6309\u7167RNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b: \u4f20\u7edfRNN LSTM Bi-LSTM GRU Bi-GRU N vs N - RNN: \u5b83\u662fRNN\u6700\u57fa\u7840\u7684\u7ed3\u6784\u5f62\u5f0f, \u6700\u5927\u7684\u7279\u70b9\u5c31\u662f: \u8f93\u5165\u548c\u8f93\u51fa\u5e8f\u5217\u662f\u7b49\u957f\u7684. \u7531\u4e8e\u8fd9\u4e2a\u9650\u5236\u7684\u5b58\u5728, \u4f7f\u5176\u9002\u7528\u8303\u56f4\u6bd4\u8f83\u5c0f, \u53ef\u7528\u4e8e\u751f\u6210\u7b49\u957f\u5ea6\u7684\u5408\u8f99\u8bd7\u53e5. N vs 1 - RNN: \u6709\u65f6\u5019\u6211\u4eec\u8981\u5904\u7406\u7684\u95ee\u9898\u8f93\u5165\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u800c\u8981\u6c42\u8f93\u51fa\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u800c\u4e0d\u662f\u5e8f\u5217\uff0c\u5e94\u8be5\u600e\u6837\u5efa\u6a21\u5462\uff1f\u6211\u4eec\u53ea\u8981\u5728\u6700\u540e\u4e00\u4e2a\u9690\u5c42\u8f93\u51fah\u4e0a\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\u5c31\u53ef\u4ee5\u4e86\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u66f4\u597d\u7684\u660e\u786e\u7ed3\u679c, \u8fd8\u8981\u4f7f\u7528sigmoid\u6216\u8005softmax\u8fdb\u884c\u5904\u7406. \u8fd9\u79cd\u7ed3\u6784\u7ecf\u5e38\u88ab\u5e94\u7528\u5728\u6587\u672c\u5206\u7c7b\u95ee\u9898\u4e0a. 1 vs N - RNN: \u5982\u679c\u8f93\u5165\u4e0d\u662f\u5e8f\u5217\u800c\u8f93\u51fa\u4e3a\u5e8f\u5217\u7684\u60c5\u51b5\u600e\u4e48\u5904\u7406\u5462\uff1f\u6211\u4eec\u6700\u5e38\u91c7\u7528\u7684\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u4f7f\u8be5\u8f93\u5165\u4f5c\u7528\u4e8e\u6bcf\u6b21\u7684\u8f93\u51fa\u4e4b\u4e0a. \u8fd9\u79cd\u7ed3\u6784\u53ef\u7528\u4e8e\u5c06\u56fe\u7247\u751f\u6210\u6587\u5b57\u4efb\u52a1\u7b49. N vs M - RNN: \u8fd9\u662f\u4e00\u79cd\u4e0d\u9650\u8f93\u5165\u8f93\u51fa\u957f\u5ea6\u7684RNN\u7ed3\u6784, \u5b83\u7531\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u4e24\u90e8\u5206\u7ec4\u6210, \u4e24\u8005\u7684\u5185\u90e8\u7ed3\u6784\u90fd\u662f\u67d0\u7c7bRNN, \u5b83\u4e5f\u88ab\u79f0\u4e3aseq2seq\u67b6\u6784. \u8f93\u5165\u6570\u636e\u9996\u5148\u901a\u8fc7\u7f16\u7801\u5668, \u6700\u7ec8\u8f93\u51fa\u4e00\u4e2a\u9690\u542b\u53d8\u91cfc, \u4e4b\u540e\u6700\u5e38\u7528\u7684\u505a\u6cd5\u662f\u4f7f\u7528\u8fd9\u4e2a\u9690\u542b\u53d8\u91cfc\u4f5c\u7528\u5728\u89e3\u7801\u5668\u8fdb\u884c\u89e3\u7801\u7684\u6bcf\u4e00\u6b65\u4e0a, \u4ee5\u4fdd\u8bc1\u8f93\u5165\u4fe1\u606f\u88ab\u6709\u6548\u5229\u7528. seq2seq\u67b6\u6784\u6700\u65e9\u88ab\u63d0\u51fa\u5e94\u7528\u4e8e\u673a\u5668\u7ffb\u8bd1, \u56e0\u4e3a\u5176\u8f93\u5165\u8f93\u51fa\u4e0d\u53d7\u9650\u5236\uff0c\u5982\u4eca\u4e5f\u662f\u5e94\u7528\u6700\u5e7f\u7684RNN\u6a21\u578b\u7ed3\u6784. \u5728\u673a\u5668\u7ffb\u8bd1, \u9605\u8bfb\u7406\u89e3, \u6587\u672c\u6458\u8981\u7b49\u4f17\u591a\u9886\u57df\u90fd\u8fdb\u884c\u4e86\u975e\u5e38\u591a\u7684\u5e94\u7528\u5b9e\u8df5. \u5173\u4e8eRNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b\u7684\u5185\u5bb9\u6211\u4eec\u5c06\u5728\u540e\u9762\u4f7f\u7528\u5355\u72ec\u7684\u5c0f\u8282\u8be6\u7ec6\u8bb2\u89e3. \u5c0f\u8282\u603b\u7ed3: \u5b66\u4e60\u4e86\u4ec0\u4e48\u662fRNN\u6a21\u578b: RNN(Recurrent Neural Network), \u4e2d\u6587\u79f0\u4f5c\u5faa\u73af\u795e\u7ecf\u7f51\u7edc, \u5b83\u4e00\u822c\u4ee5\u5e8f\u5217\u6570\u636e\u4e3a\u8f93\u5165, \u901a\u8fc7\u7f51\u7edc\u5185\u90e8\u7684\u7ed3\u6784\u8bbe\u8ba1\u6709\u6548\u6355\u6349\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb\u7279\u5f81, \u4e00\u822c\u4e5f\u662f\u4ee5\u5e8f\u5217\u5f62\u5f0f\u8fdb\u884c\u8f93\u51fa. RNN\u7684\u5faa\u73af\u673a\u5236\u4f7f\u6a21\u578b\u9690\u5c42\u4e0a\u4e00\u65f6\u95f4\u6b65\u4ea7\u751f\u7684\u7ed3\u679c, \u80fd\u591f\u4f5c\u4e3a\u5f53\u4e0b\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206(\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u9664\u4e86\u6b63\u5e38\u7684\u8f93\u5165\u5916\u8fd8\u5305\u62ec\u4e0a\u4e00\u6b65\u7684\u9690\u5c42\u8f93\u51fa)\u5bf9\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u4ea7\u751f\u5f71\u54cd. \u5b66\u4e60\u4e86RNN\u6a21\u578b\u7684\u4f5c\u7528: \u56e0\u4e3aRNN\u7ed3\u6784\u80fd\u591f\u5f88\u597d\u5229\u7528\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb, \u56e0\u6b64\u9488\u5bf9\u81ea\u7136\u754c\u5177\u6709\u8fde\u7eed\u6027\u7684\u8f93\u5165\u5e8f\u5217, \u5982\u4eba\u7c7b\u7684\u8bed\u8a00, \u8bed\u97f3\u7b49\u8fdb\u884c\u5f88\u597d\u7684\u5904\u7406, \u5e7f\u6cdb\u5e94\u7528\u4e8eNLP\u9886\u57df\u7684\u5404\u9879\u4efb\u52a1, \u5982\u6587\u672c\u5206\u7c7b, \u60c5\u611f\u5206\u6790, \u610f\u56fe\u8bc6\u522b, \u673a\u5668\u7ffb\u8bd1\u7b49. \u4ee5\u4e00\u4e2a\u7528\u6237\u610f\u56fe\u8bc6\u522b\u7684\u4f8b\u5b50\u5bf9RNN\u7684\u8fd0\u884c\u8fc7\u7a0b\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790: \u7b2c\u4e00\u6b65: \u7528\u6237\u8f93\u5165\u4e86\"What time is it ?\", \u6211\u4eec\u9996\u5148\u9700\u8981\u5bf9\u5b83\u8fdb\u884c\u57fa\u672c\u7684\u5206\u8bcd, \u56e0\u4e3aRNN\u662f\u6309\u7167\u987a\u5e8f\u5de5\u4f5c\u7684, \u6bcf\u6b21\u53ea\u63a5\u6536\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5904\u7406. \u7b2c\u4e8c\u6b65: \u9996\u5148\u5c06\u5355\u8bcd\"What\"\u8f93\u9001\u7ed9RNN, \u5b83\u5c06\u4ea7\u751f\u4e00\u4e2a\u8f93\u51faO1. \u7b2c\u4e09\u6b65: \u7ee7\u7eed\u5c06\u5355\u8bcd\"time\"\u8f93\u9001\u7ed9RNN, \u4f46\u6b64\u65f6RNN\u4e0d\u4ec5\u4ec5\u5229\u7528\"time\"\u6765\u4ea7\u751f\u8f93\u51faO2, \u8fd8\u4f1a\u4f7f\u7528\u6765\u81ea\u4e0a\u4e00\u5c42\u9690\u5c42\u8f93\u51faO1\u4f5c\u4e3a\u8f93\u5165\u4fe1\u606f. \u7b2c\u56db\u6b65: \u91cd\u590d\u8fd9\u6837\u7684\u6b65\u9aa4, \u76f4\u5230\u5904\u7406\u5b8c\u6240\u6709\u7684\u5355\u8bcd. \u7b2c\u4e94\u6b65: \u6700\u540e\uff0c\u5c06\u6700\u7ec8\u7684\u9690\u5c42\u8f93\u51faO5\u8fdb\u884c\u5904\u7406\u6765\u89e3\u6790\u7528\u6237\u610f\u56fe. \u5b66\u4e60\u4e86RNN\u6a21\u578b\u7684\u5206\u7c7b: \u8fd9\u91cc\u6211\u4eec\u5c06\u4ece\u4e24\u4e2a\u89d2\u5ea6\u5bf9RNN\u6a21\u578b\u8fdb\u884c\u5206\u7c7b. \u7b2c\u4e00\u4e2a\u89d2\u5ea6\u662f\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784, \u7b2c\u4e8c\u4e2a\u89d2\u5ea6\u662fRNN\u7684\u5185\u90e8\u6784\u9020. \u6309\u7167\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784\u8fdb\u884c\u5206\u7c7b: N vs N - RNN N vs 1 - RNN 1 vs N - RNN N vs M - RNN N vs N - RNN: \u5b83\u662fRNN\u6700\u57fa\u7840\u7684\u7ed3\u6784\u5f62\u5f0f, \u6700\u5927\u7684\u7279\u70b9\u5c31\u662f: \u8f93\u5165\u548c\u8f93\u51fa\u5e8f\u5217\u662f\u7b49\u957f\u7684. \u7531\u4e8e\u8fd9\u4e2a\u9650\u5236\u7684\u5b58\u5728, \u4f7f\u5176\u9002\u7528\u8303\u56f4\u6bd4\u8f83\u5c0f, \u53ef\u7528\u4e8e\u751f\u6210\u7b49\u957f\u5ea6\u7684\u5408\u8f99\u8bd7\u53e5. N vs 1 - RNN: \u6709\u65f6\u5019\u6211\u4eec\u8981\u5904\u7406\u7684\u95ee\u9898\u8f93\u5165\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u800c\u8981\u6c42\u8f93\u51fa\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u800c\u4e0d\u662f\u5e8f\u5217\uff0c\u5e94\u8be5\u600e\u6837\u5efa\u6a21\u5462\uff1f\u6211\u4eec\u53ea\u8981\u5728\u6700\u540e\u4e00\u4e2a\u9690\u5c42\u8f93\u51fah\u4e0a\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\u5c31\u53ef\u4ee5\u4e86\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u66f4\u597d\u7684\u660e\u786e\u7ed3\u679c, \u8fd8\u8981\u4f7f\u7528sigmoid\u6216\u8005softmax\u8fdb\u884c\u5904\u7406. \u8fd9\u79cd\u7ed3\u6784\u7ecf\u5e38\u88ab\u5e94\u7528\u5728\u6587\u672c\u5206\u7c7b\u95ee\u9898\u4e0a. 1 vs N - RNN: \u5982\u679c\u8f93\u5165\u4e0d\u662f\u5e8f\u5217\u800c\u8f93\u51fa\u4e3a\u5e8f\u5217\u7684\u60c5\u51b5\u600e\u4e48\u5904\u7406\u5462\uff1f\u6211\u4eec\u6700\u5e38\u91c7\u7528\u7684\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u4f7f\u8be5\u8f93\u5165\u4f5c\u7528\u4e8e\u6bcf\u6b21\u7684\u8f93\u51fa\u4e4b\u4e0a. \u8fd9\u79cd\u7ed3\u6784\u53ef\u7528\u4e8e\u5c06\u56fe\u7247\u751f\u6210\u6587\u5b57\u4efb\u52a1\u7b49. N vs M - RNN: \u8fd9\u662f\u4e00\u79cd\u4e0d\u9650\u8f93\u5165\u8f93\u51fa\u957f\u5ea6\u7684RNN\u7ed3\u6784, \u5b83\u7531\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u4e24\u90e8\u5206\u7ec4\u6210, \u4e24\u8005\u7684\u5185\u90e8\u7ed3\u6784\u90fd\u662f\u67d0\u7c7bRNN, \u5b83\u4e5f\u88ab\u79f0\u4e3aseq2seq\u67b6\u6784. \u8f93\u5165\u6570\u636e\u9996\u5148\u901a\u8fc7\u7f16\u7801\u5668, \u6700\u7ec8\u8f93\u51fa\u4e00\u4e2a\u9690\u542b\u53d8\u91cfc, \u4e4b\u540e\u6700\u5e38\u7528\u7684\u505a\u6cd5\u662f\u4f7f\u7528\u8fd9\u4e2a\u9690\u542b\u53d8\u91cfc\u4f5c\u7528\u5728\u89e3\u7801\u5668\u8fdb\u884c\u89e3\u7801\u7684\u6bcf\u4e00\u6b65\u4e0a, \u4ee5\u4fdd\u8bc1\u8f93\u5165\u4fe1\u606f\u88ab\u6709\u6548\u5229\u7528. seq2seq\u67b6\u6784\u6700\u65e9\u88ab\u63d0\u51fa\u5e94\u7528\u4e8e\u673a\u5668\u7ffb\u8bd1, \u56e0\u4e3a\u5176\u8f93\u5165\u8f93\u51fa\u4e0d\u53d7\u9650\u5236\uff0c\u5982\u4eca\u4e5f\u662f\u5e94\u7528\u6700\u5e7f\u7684RNN\u6a21\u578b\u7ed3\u6784. \u5728\u673a\u5668\u7ffb\u8bd1, \u9605\u8bfb\u7406\u89e3, \u6587\u672c\u6458\u8981\u7b49\u4f17\u591a\u9886\u57df\u90fd\u8fdb\u884c\u4e86\u975e\u5e38\u591a\u7684\u5e94\u7528\u5b9e\u8df5. \u6309\u7167RNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b: \u4f20\u7edfRNN LSTM Bi-LSTM GRU Bi-GRU \u5173\u4e8eRNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b\u7684\u5185\u5bb9\u6211\u4eec\u5c06\u5728\u540e\u9762\u4f7f\u7528\u5355\u72ec\u7684\u5c0f\u8282\u8be6\u7ec6\u8bb2\u89e3. 1.2 \u4f20\u7edfRNN\u6a21\u578b \u5b66\u4e60\u76ee\u6807: \u4e86\u89e3\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f. \u638c\u63e1Pytorch\u4e2d\u4f20\u7edfRNN\u5de5\u5177\u7684\u4f7f\u7528. \u4e86\u89e3\u4f20\u7edfRNN\u7684\u4f18\u52bf\u4e0e\u7f3a\u70b9. \u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u56fe: \u7ed3\u6784\u89e3\u91ca\u56fe: \u5185\u90e8\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u628a\u76ee\u5149\u96c6\u4e2d\u5728\u4e2d\u95f4\u7684\u65b9\u5757\u90e8\u5206, \u5b83\u7684\u8f93\u5165\u6709\u4e24\u90e8\u5206, \u5206\u522b\u662fh(t-1)\u4ee5\u53cax(t), \u4ee3\u8868\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684\u9690\u5c42\u8f93\u51fa, \u4ee5\u53ca\u6b64\u65f6\u95f4\u6b65\u7684\u8f93\u5165, \u5b83\u4eec\u8fdb\u5165RNN\u7ed3\u6784\u4f53\u540e, \u4f1a\"\u878d\u5408\"\u5230\u4e00\u8d77, \u8fd9\u79cd\u878d\u5408\u6211\u4eec\u6839\u636e\u7ed3\u6784\u89e3\u91ca\u53ef\u77e5, \u662f\u5c06\u4e8c\u8005\u8fdb\u884c\u62fc\u63a5, \u5f62\u6210\u65b0\u7684\u5f20\u91cf[x(t), h(t-1)], \u4e4b\u540e\u8fd9\u4e2a\u65b0\u7684\u5f20\u91cf\u5c06\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42(\u7ebf\u6027\u5c42), \u8be5\u5c42\u4f7f\u7528tanh\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570, \u6700\u7ec8\u5f97\u5230\u8be5\u65f6\u95f4\u6b65\u7684\u8f93\u51fah(t), \u5b83\u5c06\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u548cx(t+1)\u4e00\u8d77\u8fdb\u5165\u7ed3\u6784\u4f53. \u4ee5\u6b64\u7c7b\u63a8. \u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u6839\u636e\u7ed3\u6784\u5206\u6790\u5f97\u51fa\u5185\u90e8\u8ba1\u7b97\u516c\u5f0f: \u6fc0\u6d3b\u51fd\u6570tanh\u7684\u4f5c\u7528: \u7528\u4e8e\u5e2e\u52a9\u8c03\u8282\u6d41\u7ecf\u7f51\u7edc\u7684\u503c, tanh\u51fd\u6570\u5c06\u503c\u538b\u7f29\u5728-1\u548c1\u4e4b\u95f4. Pytorch\u4e2d\u4f20\u7edfRNN\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.RNN\u53ef\u8c03\u7528. nn.RNN\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. nonlinearity: \u6fc0\u6d3b\u51fd\u6570\u7684\u9009\u62e9, \u9ed8\u8ba4\u662ftanh. nn.RNN\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. nn.RNN\u4f7f\u7528\u793a\u4f8b: >>> import torch >>> import torch.nn as nn >>> rnn = nn . RNN ( 5 , 6 , 1 ) >>> input = torch . randn ( 1 , 3 , 5 ) >>> h0 = torch . randn ( 1 , 3 , 6 ) >>> output , hn = rnn ( input , h0 ) >>> output tensor ([[[ 0.4282 , - 0.8475 , - 0.0685 , - 0.4601 , - 0.8357 , 0.1252 ], [ 0.5758 , - 0.2823 , 0.4822 , - 0.4485 , - 0.7362 , 0.0084 ], [ 0.9224 , - 0.7479 , - 0.3682 , - 0.5662 , - 0.9637 , 0.4938 ]]], grad_fn =< StackBackward > ) >>> hn tensor ([[[ 0.4282 , - 0.8475 , - 0.0685 , - 0.4601 , - 0.8357 , 0.1252 ], [ 0.5758 , - 0.2823 , 0.4822 , - 0.4485 , - 0.7362 , 0.0084 ], [ 0.9224 , - 0.7479 , - 0.3682 , - 0.5662 , - 0.9637 , 0.4938 ]]], grad_fn =< StackBackward > ) \u4f20\u7edfRNN\u7684\u4f18\u52bf: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u7b80\u5355, \u5bf9\u8ba1\u7b97\u8d44\u6e90\u8981\u6c42\u4f4e, \u76f8\u6bd4\u4e4b\u540e\u6211\u4eec\u8981\u5b66\u4e60\u7684RNN\u53d8\u4f53:LSTM\u548cGRU\u6a21\u578b\u53c2\u6570\u603b\u91cf\u5c11\u4e86\u5f88\u591a, \u5728\u77ed\u5e8f\u5217\u4efb\u52a1\u4e0a\u6027\u80fd\u548c\u6548\u679c\u90fd\u8868\u73b0\u4f18\u5f02. \u4f20\u7edfRNN\u7684\u7f3a\u70b9: \u4f20\u7edfRNN\u5728\u89e3\u51b3\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u8054\u65f6, \u901a\u8fc7\u5b9e\u8df5\uff0c\u8bc1\u660e\u7ecf\u5178RNN\u8868\u73b0\u5f88\u5dee, \u539f\u56e0\u662f\u5728\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u7684\u65f6\u5019, \u8fc7\u957f\u7684\u5e8f\u5217\u5bfc\u81f4\u68af\u5ea6\u7684\u8ba1\u7b97\u5f02\u5e38, \u53d1\u751f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8. \u4ec0\u4e48\u662f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u5462\uff1f \u6839\u636e\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u548c\u94fe\u5f0f\u6cd5\u5219, \u68af\u5ea6\u7684\u8ba1\u7b97\u53ef\u4ee5\u7b80\u5316\u4e3a\u4ee5\u4e0b\u516c\u5f0f: \u5176\u4e2dsigmoid\u7684\u5bfc\u6570\u503c\u57df\u662f\u56fa\u5b9a\u7684, \u5728[0, 0.25]\u4e4b\u95f4, \u800c\u4e00\u65e6\u516c\u5f0f\u4e2d\u7684w\u4e5f\u5c0f\u4e8e1, \u90a3\u4e48\u901a\u8fc7\u8fd9\u6837\u7684\u516c\u5f0f\u8fde\u4e58\u540e, \u6700\u7ec8\u7684\u68af\u5ea6\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u975e\u5e38\u5c0f, \u8fd9\u79cd\u73b0\u8c61\u79f0\u4f5c\u68af\u5ea6\u6d88\u5931. \u53cd\u4e4b, \u5982\u679c\u6211\u4eec\u4eba\u4e3a\u7684\u589e\u5927w\u7684\u503c, \u4f7f\u5176\u5927\u4e8e1, \u90a3\u4e48\u8fde\u4e58\u591f\u5c31\u53ef\u80fd\u9020\u6210\u68af\u5ea6\u8fc7\u5927, \u79f0\u4f5c\u68af\u5ea6\u7206\u70b8. \u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u7684\u5371\u5bb3: \u5982\u679c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u68af\u5ea6\u6d88\u5931\uff0c\u6743\u91cd\u65e0\u6cd5\u88ab\u66f4\u65b0\uff0c\u6700\u7ec8\u5bfc\u81f4\u8bad\u7ec3\u5931\u8d25; \u68af\u5ea6\u7206\u70b8\u6240\u5e26\u6765\u7684\u68af\u5ea6\u8fc7\u5927\uff0c\u5927\u5e45\u5ea6\u66f4\u65b0\u7f51\u7edc\u53c2\u6570\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u4f1a\u6ea2\u51fa\uff08NaN\u503c\uff09. \u5c0f\u8282\u603b\u7ed3: \u5b66\u4e60\u4e86\u4f20\u7edfRNN\u7684\u7ed3\u6784\u5e76\u8fdb\u884c\u4e86\u5206\u6790; \u5b83\u7684\u8f93\u5165\u6709\u4e24\u90e8\u5206, \u5206\u522b\u662fh(t-1)\u4ee5\u53cax(t), \u4ee3\u8868\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684\u9690\u5c42\u8f93\u51fa, \u4ee5\u53ca\u6b64\u65f6\u95f4\u6b65\u7684\u8f93\u5165, \u5b83\u4eec\u8fdb\u5165RNN\u7ed3\u6784\u4f53\u540e, \u4f1a\"\u878d\u5408\"\u5230\u4e00\u8d77, \u8fd9\u79cd\u878d\u5408\u6211\u4eec\u6839\u636e\u7ed3\u6784\u89e3\u91ca\u53ef\u77e5, \u662f\u5c06\u4e8c\u8005\u8fdb\u884c\u62fc\u63a5, \u5f62\u6210\u65b0\u7684\u5f20\u91cf[x(t), h(t-1)], \u4e4b\u540e\u8fd9\u4e2a\u65b0\u7684\u5f20\u91cf\u5c06\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42(\u7ebf\u6027\u5c42), \u8be5\u5c42\u4f7f\u7528tanh\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570, \u6700\u7ec8\u5f97\u5230\u8be5\u65f6\u95f4\u6b65\u7684\u8f93\u51fah(t), \u5b83\u5c06\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u548cx(t+1)\u4e00\u8d77\u8fdb\u5165\u7ed3\u6784\u4f53. \u4ee5\u6b64\u7c7b\u63a8. \u6839\u636e\u7ed3\u6784\u5206\u6790\u5f97\u51fa\u4e86\u4f20\u7edfRNN\u7684\u8ba1\u7b97\u516c\u5f0f. \u5b66\u4e60\u4e86\u6fc0\u6d3b\u51fd\u6570tanh\u7684\u4f5c\u7528: \u7528\u4e8e\u5e2e\u52a9\u8c03\u8282\u6d41\u7ecf\u7f51\u7edc\u7684\u503c, tanh\u51fd\u6570\u5c06\u503c\u538b\u7f29\u5728-1\u548c1\u4e4b\u95f4. \u5b66\u4e60\u4e86Pytorch\u4e2d\u4f20\u7edfRNN\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.RNN\u53ef\u8c03\u7528. nn.RNN\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. nonlinearity: \u6fc0\u6d3b\u51fd\u6570\u7684\u9009\u62e9, \u9ed8\u8ba4\u662ftanh. nn.RNN\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. \u5b9e\u73b0\u4e86nn.RNN\u7684\u4f7f\u7528\u793a\u4f8b, \u83b7\u5f97RNN\u7684\u771f\u5b9e\u8fd4\u56de\u7ed3\u679c\u6837\u5f0f. \u5b66\u4e60\u4e86\u4f20\u7edfRNN\u7684\u4f18\u52bf: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u7b80\u5355, \u5bf9\u8ba1\u7b97\u8d44\u6e90\u8981\u6c42\u4f4e, \u76f8\u6bd4\u4e4b\u540e\u6211\u4eec\u8981\u5b66\u4e60\u7684RNN\u53d8\u4f53:LSTM\u548cGRU\u6a21\u578b\u53c2\u6570\u603b\u91cf\u5c11\u4e86\u5f88\u591a, \u5728\u77ed\u5e8f\u5217\u4efb\u52a1\u4e0a\u6027\u80fd\u548c\u6548\u679c\u90fd\u8868\u73b0\u4f18\u5f02. \u5b66\u4e60\u4e86\u4f20\u7edfRNN\u7684\u7f3a\u70b9: \u4f20\u7edfRNN\u5728\u89e3\u51b3\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u8054\u65f6, \u901a\u8fc7\u5b9e\u8df5\uff0c\u8bc1\u660e\u7ecf\u5178RNN\u8868\u73b0\u5f88\u5dee, \u539f\u56e0\u662f\u5728\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u7684\u65f6\u5019, \u8fc7\u957f\u7684\u5e8f\u5217\u5bfc\u81f4\u68af\u5ea6\u7684\u8ba1\u7b97\u5f02\u5e38, \u53d1\u751f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8. \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8: \u6839\u636e\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u548c\u94fe\u5f0f\u6cd5\u5219, \u5f97\u5230\u68af\u5ea6\u7684\u8ba1\u7b97\u7684\u7b80\u5316\u516c\u5f0f:\u5176\u4e2dsigmoid\u7684\u5bfc\u6570\u503c\u57df\u662f\u56fa\u5b9a\u7684, \u5728[0, 0.25]\u4e4b\u95f4, \u800c\u4e00\u65e6\u516c\u5f0f\u4e2d\u7684w\u4e5f\u5c0f\u4e8e1, \u90a3\u4e48\u901a\u8fc7\u8fd9\u6837\u7684\u516c\u5f0f\u8fde\u4e58\u540e, \u6700\u7ec8\u7684\u68af\u5ea6\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u975e\u5e38\u5c0f, \u8fd9\u79cd\u73b0\u8c61\u79f0\u4f5c\u68af\u5ea6\u6d88\u5931. \u53cd\u4e4b, \u5982\u679c\u6211\u4eec\u4eba\u4e3a\u7684\u589e\u5927w\u7684\u503c, \u4f7f\u5176\u5927\u4e8e1, \u90a3\u4e48\u8fde\u4e58\u591f\u5c31\u53ef\u80fd\u9020\u6210\u68af\u5ea6\u8fc7\u5927, \u79f0\u4f5c\u68af\u5ea6\u7206\u70b8. \u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u7684\u5371\u5bb3: \u5982\u679c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u68af\u5ea6\u6d88\u5931\uff0c\u6743\u91cd\u65e0\u6cd5\u88ab\u66f4\u65b0\uff0c\u6700\u7ec8\u5bfc\u81f4\u8bad\u7ec3\u5931\u8d25; \u68af\u5ea6\u7206\u70b8\u6240\u5e26\u6765\u7684\u68af\u5ea6\u8fc7\u5927\uff0c\u5927\u5e45\u5ea6\u66f4\u65b0\u7f51\u7edc\u53c2\u6570\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u4f1a\u6ea2\u51fa\uff08NaN\u503c\uff09. 1.3 LSTM\u6a21\u578b \u5b66\u4e60\u76ee\u6807: \u4e86\u89e3LSTM\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f. \u638c\u63e1Pytorch\u4e2dLSTM\u5de5\u5177\u7684\u4f7f\u7528. \u4e86\u89e3LSTM\u7684\u4f18\u52bf\u4e0e\u7f3a\u70b9. LSTM\uff08Long Short-Term Memory\uff09\u4e5f\u79f0\u957f\u77ed\u65f6\u8bb0\u5fc6\u7ed3\u6784, \u5b83\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u4e0e\u7ecf\u5178RNN\u76f8\u6bd4\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6LSTM\u7684\u7ed3\u6784\u66f4\u590d\u6742, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u9057\u5fd8\u95e8 \u8f93\u5165\u95e8 \u7ec6\u80de\u72b6\u6001 \u8f93\u51fa\u95e8 LSTM\u7684\u5185\u90e8\u7ed3\u6784\u56fe: \u7ed3\u6784\u89e3\u91ca\u56fe: \u9057\u5fd8\u95e8\u90e8\u5206\u7ed3\u6784\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u9057\u5fd8\u95e8\u7ed3\u6784\u5206\u6790: \u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u975e\u5e38\u76f8\u4f3c, \u9996\u5148\u5c06\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165x(t)\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u62fc\u63a5, \u5f97\u5230[x(t), h(t-1)], \u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u505a\u53d8\u6362, \u6700\u540e\u901a\u8fc7sigmoid\u51fd\u6570\u8fdb\u884c\u6fc0\u6d3b\u5f97\u5230f(t), \u6211\u4eec\u53ef\u4ee5\u5c06f(t)\u770b\u4f5c\u662f\u95e8\u503c, \u597d\u6bd4\u4e00\u6247\u95e8\u5f00\u5408\u7684\u5927\u5c0f\u7a0b\u5ea6, \u95e8\u503c\u90fd\u5c06\u4f5c\u7528\u5728\u901a\u8fc7\u8be5\u6247\u95e8\u7684\u5f20\u91cf, \u9057\u5fd8\u95e8\u95e8\u503c\u5c06\u4f5c\u7528\u7684\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u4e0a, \u4ee3\u8868\u9057\u5fd8\u8fc7\u53bb\u7684\u591a\u5c11\u4fe1\u606f, \u53c8\u56e0\u4e3a\u9057\u5fd8\u95e8\u95e8\u503c\u662f\u7531x(t), h(t-1)\u8ba1\u7b97\u5f97\u6765\u7684, \u56e0\u6b64\u6574\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u6839\u636e\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165\u548c\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u6765\u51b3\u5b9a\u9057\u5fd8\u591a\u5c11\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u6240\u643a\u5e26\u7684\u8fc7\u5f80\u4fe1\u606f. \u9057\u5fd8\u95e8\u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u6fc0\u6d3b\u51fd\u6570sigmiod\u7684\u4f5c\u7528: \u7528\u4e8e\u5e2e\u52a9\u8c03\u8282\u6d41\u7ecf\u7f51\u7edc\u7684\u503c, sigmoid\u51fd\u6570\u5c06\u503c\u538b\u7f29\u57280\u548c1\u4e4b\u95f4. \u8f93\u5165\u95e8\u90e8\u5206\u7ed3\u6784\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u8f93\u5165\u95e8\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u770b\u5230\u8f93\u5165\u95e8\u7684\u8ba1\u7b97\u516c\u5f0f\u6709\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5c31\u662f\u4ea7\u751f\u8f93\u5165\u95e8\u95e8\u503c\u7684\u516c\u5f0f, \u5b83\u548c\u9057\u5fd8\u95e8\u516c\u5f0f\u51e0\u4e4e\u76f8\u540c, \u533a\u522b\u53ea\u662f\u5728\u4e8e\u5b83\u4eec\u4e4b\u540e\u8981\u4f5c\u7528\u7684\u76ee\u6807\u4e0a. \u8fd9\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u8f93\u5165\u4fe1\u606f\u6709\u591a\u5c11\u9700\u8981\u8fdb\u884c\u8fc7\u6ee4. \u8f93\u5165\u95e8\u7684\u7b2c\u4e8c\u4e2a\u516c\u5f0f\u662f\u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u76f8\u540c. \u5bf9\u4e8eLSTM\u6765\u8bb2, \u5b83\u5f97\u5230\u7684\u662f\u5f53\u524d\u7684\u7ec6\u80de\u72b6\u6001, \u800c\u4e0d\u662f\u50cf\u7ecf\u5178RNN\u4e00\u6837\u5f97\u5230\u7684\u662f\u9690\u542b\u72b6\u6001. \u8f93\u5165\u95e8\u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u5206\u6790: \u7ec6\u80de\u66f4\u65b0\u7684\u7ed3\u6784\u4e0e\u8ba1\u7b97\u516c\u5f0f\u975e\u5e38\u5bb9\u6613\u7406\u89e3, \u8fd9\u91cc\u6ca1\u6709\u5168\u8fde\u63a5\u5c42, \u53ea\u662f\u5c06\u521a\u521a\u5f97\u5230\u7684\u9057\u5fd8\u95e8\u95e8\u503c\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u5f97\u5230\u7684C(t-1)\u76f8\u4e58, \u518d\u52a0\u4e0a\u8f93\u5165\u95e8\u95e8\u503c\u4e0e\u5f53\u524d\u65f6\u95f4\u6b65\u5f97\u5230\u7684\u672a\u66f4\u65b0C(t)\u76f8\u4e58\u7684\u7ed3\u679c. \u6700\u7ec8\u5f97\u5230\u66f4\u65b0\u540e\u7684C(t)\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u8fc7\u7a0b\u5c31\u662f\u5bf9\u9057\u5fd8\u95e8\u548c\u8f93\u5165\u95e8\u7684\u5e94\u7528. \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u8fc7\u7a0b\u6f14\u793a: \u8f93\u51fa\u95e8\u90e8\u5206\u7ed3\u6784\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u8f93\u51fa\u95e8\u7ed3\u6784\u5206\u6790: \u8f93\u51fa\u95e8\u90e8\u5206\u7684\u516c\u5f0f\u4e5f\u662f\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5373\u662f\u8ba1\u7b97\u8f93\u51fa\u95e8\u7684\u95e8\u503c, \u5b83\u548c\u9057\u5fd8\u95e8\uff0c\u8f93\u5165\u95e8\u8ba1\u7b97\u65b9\u5f0f\u76f8\u540c. \u7b2c\u4e8c\u4e2a\u5373\u662f\u4f7f\u7528\u8fd9\u4e2a\u95e8\u503c\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t), \u4ed6\u5c06\u4f5c\u7528\u5728\u66f4\u65b0\u540e\u7684\u7ec6\u80de\u72b6\u6001C(t)\u4e0a, \u5e76\u505atanh\u6fc0\u6d3b, \u6700\u7ec8\u5f97\u5230h(t)\u4f5c\u4e3a\u4e0b\u4e00\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u8f93\u51fa\u95e8\u7684\u8fc7\u7a0b, \u5c31\u662f\u4e3a\u4e86\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t). \u8f93\u51fa\u95e8\u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u4ec0\u4e48\u662fBi-LSTM ? Bi-LSTM\u5373\u53cc\u5411LSTM, \u5b83\u6ca1\u6709\u6539\u53d8LSTM\u672c\u8eab\u4efb\u4f55\u7684\u5185\u90e8\u7ed3\u6784, \u53ea\u662f\u5c06LSTM\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. Bi-LSTM\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u770b\u5230\u56fe\u4e2d\u5bf9\"\u6211\u7231\u4e2d\u56fd\"\u8fd9\u53e5\u8bdd\u6216\u8005\u53eb\u8fd9\u4e2a\u8f93\u5165\u5e8f\u5217, \u8fdb\u884c\u4e86\u4ece\u5de6\u5230\u53f3\u548c\u4ece\u53f3\u5230\u5de6\u4e24\u6b21LSTM\u5904\u7406, \u5c06\u5f97\u5230\u7684\u7ed3\u679c\u5f20\u91cf\u8fdb\u884c\u4e86\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. \u8fd9\u79cd\u7ed3\u6784\u80fd\u591f\u6355\u6349\u8bed\u8a00\u8bed\u6cd5\u4e2d\u4e00\u4e9b\u7279\u5b9a\u7684\u524d\u7f6e\u6216\u540e\u7f6e\u7279\u5f81, \u589e\u5f3a\u8bed\u4e49\u5173\u8054,\u4f46\u662f\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u590d\u6742\u5ea6\u4e5f\u968f\u4e4b\u589e\u52a0\u4e86\u4e00\u500d, \u4e00\u822c\u9700\u8981\u5bf9\u8bed\u6599\u548c\u8ba1\u7b97\u8d44\u6e90\u8fdb\u884c\u8bc4\u4f30\u540e\u51b3\u5b9a\u662f\u5426\u4f7f\u7528\u8be5\u7ed3\u6784. Pytorch\u4e2dLSTM\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.LSTM\u53ef\u8c03\u7528. nn.LSTM\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. nonlinearity: \u6fc0\u6d3b\u51fd\u6570\u7684\u9009\u62e9, \u9ed8\u8ba4\u662ftanh. bidirectional: \u662f\u5426\u9009\u62e9\u4f7f\u7528\u53cc\u5411LSTM, \u5982\u679c\u4e3aTrue, \u5219\u4f7f\u7528; \u9ed8\u8ba4\u4e0d\u4f7f\u7528. nn.LSTM\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. c0: \u521d\u59cb\u5316\u7684\u7ec6\u80de\u72b6\u6001\u5f20\u91cfc. nn.LSTM\u4f7f\u7528\u793a\u4f8b: >>> import torch.nn as nn >>> import torch >>> rnn = nn . LSTM ( 5 , 6 , 2 ) >>> input = torch . randn ( 1 , 3 , 5 ) >>> h0 = torch . randn ( 2 , 3 , 6 ) >>> c0 = torch . randn ( 2 , 3 , 6 ) >>> output , ( hn , cn ) = rnn ( input , ( h0 , c0 )) >>> output tensor ([[[ 0.0447 , - 0.0335 , 0.1454 , 0.0438 , 0.0865 , 0.0416 ], [ 0.0105 , 0.1923 , 0.5507 , - 0.1742 , 0.1569 , - 0.0548 ], [ - 0.1186 , 0.1835 , - 0.0022 , - 0.1388 , - 0.0877 , - 0.4007 ]]], grad_fn =< StackBackward > ) >>> hn tensor ([[[ 0.4647 , - 0.2364 , 0.0645 , - 0.3996 , - 0.0500 , - 0.0152 ], [ 0.3852 , 0.0704 , 0.2103 , - 0.2524 , 0.0243 , 0.0477 ], [ 0.2571 , 0.0608 , 0.2322 , 0.1815 , - 0.0513 , - 0.0291 ]], [[ 0.0447 , - 0.0335 , 0.1454 , 0.0438 , 0.0865 , 0.0416 ], [ 0.0105 , 0.1923 , 0.5507 , - 0.1742 , 0.1569 , - 0.0548 ], [ - 0.1186 , 0.1835 , - 0.0022 , - 0.1388 , - 0.0877 , - 0.4007 ]]], grad_fn =< StackBackward > ) >>> cn tensor ([[[ 0.8083 , - 0.5500 , 0.1009 , - 0.5806 , - 0.0668 , - 0.1161 ], [ 0.7438 , 0.0957 , 0.5509 , - 0.7725 , 0.0824 , 0.0626 ], [ 0.3131 , 0.0920 , 0.8359 , 0.9187 , - 0.4826 , - 0.0717 ]], [[ 0.1240 , - 0.0526 , 0.3035 , 0.1099 , 0.5915 , 0.0828 ], [ 0.0203 , 0.8367 , 0.9832 , - 0.4454 , 0.3917 , - 0.1983 ], [ - 0.2976 , 0.7764 , - 0.0074 , - 0.1965 , - 0.1343 , - 0.6683 ]]], grad_fn =< StackBackward > ) LSTM\u4f18\u52bf: LSTM\u7684\u95e8\u7ed3\u6784\u80fd\u591f\u6709\u6548\u51cf\u7f13\u957f\u5e8f\u5217\u95ee\u9898\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u867d\u7136\u5e76\u4e0d\u80fd\u675c\u7edd\u8fd9\u79cd\u73b0\u8c61, \u4f46\u5728\u66f4\u957f\u7684\u5e8f\u5217\u95ee\u9898\u4e0a\u8868\u73b0\u4f18\u4e8e\u4f20\u7edfRNN. LSTM\u7f3a\u70b9: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u76f8\u5bf9\u8f83\u590d\u6742, \u56e0\u6b64\u8bad\u7ec3\u6548\u7387\u5728\u540c\u7b49\u7b97\u529b\u4e0b\u8f83\u4f20\u7edfRNN\u4f4e\u5f88\u591a. \u5c0f\u8282\u603b\u7ed3: LSTM\uff08Long Short-Term Memory\uff09\u4e5f\u79f0\u957f\u77ed\u65f6\u8bb0\u5fc6\u7ed3\u6784, \u5b83\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u4e0e\u7ecf\u5178RNN\u76f8\u6bd4\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6LSTM\u7684\u7ed3\u6784\u66f4\u590d\u6742, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u9057\u5fd8\u95e8 \u8f93\u5165\u95e8 \u7ec6\u80de\u72b6\u6001 \u8f93\u51fa\u95e8 \u9057\u5fd8\u95e8\u7ed3\u6784\u5206\u6790: \u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u975e\u5e38\u76f8\u4f3c, \u9996\u5148\u5c06\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165x(t)\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u62fc\u63a5, \u5f97\u5230[x(t), h(t-1)], \u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u505a\u53d8\u6362, \u6700\u540e\u901a\u8fc7sigmoid\u51fd\u6570\u8fdb\u884c\u6fc0\u6d3b\u5f97\u5230f(t), \u6211\u4eec\u53ef\u4ee5\u5c06f(t)\u770b\u4f5c\u662f\u95e8\u503c, \u597d\u6bd4\u4e00\u6247\u95e8\u5f00\u5408\u7684\u5927\u5c0f\u7a0b\u5ea6, \u95e8\u503c\u90fd\u5c06\u4f5c\u7528\u5728\u901a\u8fc7\u8be5\u6247\u95e8\u7684\u5f20\u91cf, \u9057\u5fd8\u95e8\u95e8\u503c\u5c06\u4f5c\u7528\u7684\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u4e0a, \u4ee3\u8868\u9057\u5fd8\u8fc7\u53bb\u7684\u591a\u5c11\u4fe1\u606f, \u53c8\u56e0\u4e3a\u9057\u5fd8\u95e8\u95e8\u503c\u662f\u7531x(t), h(t-1)\u8ba1\u7b97\u5f97\u6765\u7684, \u56e0\u6b64\u6574\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u6839\u636e\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165\u548c\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u6765\u51b3\u5b9a\u9057\u5fd8\u591a\u5c11\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u6240\u643a\u5e26\u7684\u8fc7\u5f80\u4fe1\u606f. \u8f93\u5165\u95e8\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u770b\u5230\u8f93\u5165\u95e8\u7684\u8ba1\u7b97\u516c\u5f0f\u6709\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5c31\u662f\u4ea7\u751f\u8f93\u5165\u95e8\u95e8\u503c\u7684\u516c\u5f0f, \u5b83\u548c\u9057\u5fd8\u95e8\u516c\u5f0f\u51e0\u4e4e\u76f8\u540c, \u533a\u522b\u53ea\u662f\u5728\u4e8e\u5b83\u4eec\u4e4b\u540e\u8981\u4f5c\u7528\u7684\u76ee\u6807\u4e0a. \u8fd9\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u8f93\u5165\u4fe1\u606f\u6709\u591a\u5c11\u9700\u8981\u8fdb\u884c\u8fc7\u6ee4. \u8f93\u5165\u95e8\u7684\u7b2c\u4e8c\u4e2a\u516c\u5f0f\u662f\u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u76f8\u540c. \u5bf9\u4e8eLSTM\u6765\u8bb2, \u5b83\u5f97\u5230\u7684\u662f\u5f53\u524d\u7684\u7ec6\u80de\u72b6\u6001, \u800c\u4e0d\u662f\u50cf\u7ecf\u5178RNN\u4e00\u6837\u5f97\u5230\u7684\u662f\u9690\u542b\u72b6\u6001. \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u5206\u6790: \u7ec6\u80de\u66f4\u65b0\u7684\u7ed3\u6784\u4e0e\u8ba1\u7b97\u516c\u5f0f\u975e\u5e38\u5bb9\u6613\u7406\u89e3, \u8fd9\u91cc\u6ca1\u6709\u5168\u8fde\u63a5\u5c42, \u53ea\u662f\u5c06\u521a\u521a\u5f97\u5230\u7684\u9057\u5fd8\u95e8\u95e8\u503c\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u5f97\u5230\u7684C(t-1)\u76f8\u4e58, \u518d\u52a0\u4e0a\u8f93\u5165\u95e8\u95e8\u503c\u4e0e\u5f53\u524d\u65f6\u95f4\u6b65\u5f97\u5230\u7684\u672a\u66f4\u65b0C(t)\u76f8\u4e58\u7684\u7ed3\u679c. \u6700\u7ec8\u5f97\u5230\u66f4\u65b0\u540e\u7684C(t)\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u8fc7\u7a0b\u5c31\u662f\u5bf9\u9057\u5fd8\u95e8\u548c\u8f93\u5165\u95e8\u7684\u5e94\u7528. \u8f93\u51fa\u95e8\u7ed3\u6784\u5206\u6790: \u8f93\u51fa\u95e8\u90e8\u5206\u7684\u516c\u5f0f\u4e5f\u662f\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5373\u662f\u8ba1\u7b97\u8f93\u51fa\u95e8\u7684\u95e8\u503c, \u5b83\u548c\u9057\u5fd8\u95e8\uff0c\u8f93\u5165\u95e8\u8ba1\u7b97\u65b9\u5f0f\u76f8\u540c. \u7b2c\u4e8c\u4e2a\u5373\u662f\u4f7f\u7528\u8fd9\u4e2a\u95e8\u503c\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t), \u4ed6\u5c06\u4f5c\u7528\u5728\u66f4\u65b0\u540e\u7684\u7ec6\u80de\u72b6\u6001C(t)\u4e0a, \u5e76\u505atanh\u6fc0\u6d3b, \u6700\u7ec8\u5f97\u5230h(t)\u4f5c\u4e3a\u4e0b\u4e00\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u8f93\u51fa\u95e8\u7684\u8fc7\u7a0b, \u5c31\u662f\u4e3a\u4e86\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t). \u4ec0\u4e48\u662fBi-LSTM ? Bi-LSTM\u5373\u53cc\u5411LSTM, \u5b83\u6ca1\u6709\u6539\u53d8LSTM\u672c\u8eab\u4efb\u4f55\u7684\u5185\u90e8\u7ed3\u6784, \u53ea\u662f\u5c06LSTM\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. Pytorch\u4e2dLSTM\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.LSTM\u53ef\u8c03\u7528. LSTM\u4f18\u52bf: LSTM\u7684\u95e8\u7ed3\u6784\u80fd\u591f\u6709\u6548\u51cf\u7f13\u957f\u5e8f\u5217\u95ee\u9898\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u867d\u7136\u5e76\u4e0d\u80fd\u675c\u7edd\u8fd9\u79cd\u73b0\u8c61, \u4f46\u5728\u66f4\u957f\u7684\u5e8f\u5217\u95ee\u9898\u4e0a\u8868\u73b0\u4f18\u4e8e\u4f20\u7edfRNN. LSTM\u7f3a\u70b9: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u76f8\u5bf9\u8f83\u590d\u6742, \u56e0\u6b64\u8bad\u7ec3\u6548\u7387\u5728\u540c\u7b49\u7b97\u529b\u4e0b\u8f83\u4f20\u7edfRNN\u4f4e\u5f88\u591a. 1.4 GRU\u6a21\u578b \u5b66\u4e60\u76ee\u6807: \u4e86\u89e3GRU\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f. \u638c\u63e1Pytorch\u4e2dGRU\u5de5\u5177\u7684\u4f7f\u7528. \u4e86\u89e3GRU\u7684\u4f18\u52bf\u4e0e\u7f3a\u70b9. GRU\uff08Gated Recurrent Unit\uff09\u4e5f\u79f0\u95e8\u63a7\u5faa\u73af\u5355\u5143\u7ed3\u6784, \u5b83\u4e5f\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u540cLSTM\u4e00\u6837\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6\u5b83\u7684\u7ed3\u6784\u548c\u8ba1\u7b97\u8981\u6bd4LSTM\u66f4\u7b80\u5355, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u66f4\u65b0\u95e8 \u91cd\u7f6e\u95e8 GRU\u7684\u5185\u90e8\u7ed3\u6784\u56fe\u548c\u8ba1\u7b97\u516c\u5f0f: \u7ed3\u6784\u89e3\u91ca\u56fe: GRU\u7684\u66f4\u65b0\u95e8\u548c\u91cd\u7f6e\u95e8\u7ed3\u6784\u56fe: \u5185\u90e8\u7ed3\u6784\u5206\u6790: \u548c\u4e4b\u524d\u5206\u6790\u8fc7\u7684LSTM\u4e2d\u7684\u95e8\u63a7\u4e00\u6837, \u9996\u5148\u8ba1\u7b97\u66f4\u65b0\u95e8\u548c\u91cd\u7f6e\u95e8\u7684\u95e8\u503c, \u5206\u522b\u662fz(t)\u548cr(t), \u8ba1\u7b97\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528X(t)\u4e0eh(t-1)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u6362, \u518d\u7ecf\u8fc7sigmoid\u6fc0\u6d3b. \u4e4b\u540e\u66f4\u65b0\u95e8\u95e8\u503c\u4f5c\u7528\u5728\u4e86h(t-1)\u4e0a, \u4ee3\u8868\u63a7\u5236\u4e0a\u4e00\u65f6\u95f4\u6b65\u4f20\u6765\u7684\u4fe1\u606f\u6709\u591a\u5c11\u53ef\u4ee5\u88ab\u5229\u7528. \u63a5\u7740\u5c31\u662f\u4f7f\u7528\u8fd9\u4e2a\u66f4\u65b0\u540e\u7684h(t-1)\u8fdb\u884c\u57fa\u672c\u7684RNN\u8ba1\u7b97, \u5373\u4e0ex(t)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u5316, \u7ecf\u8fc7tanh\u6fc0\u6d3b, \u5f97\u5230\u65b0\u7684h(t). \u6700\u540e\u91cd\u7f6e\u95e8\u7684\u95e8\u503c\u4f1a\u4f5c\u7528\u5728\u65b0\u7684h(t)\uff0c\u800c1-\u95e8\u503c\u4f1a\u4f5c\u7528\u5728h(t-1)\u4e0a, \u968f\u540e\u5c06\u4e24\u8005\u7684\u7ed3\u679c\u76f8\u52a0, \u5f97\u5230\u6700\u7ec8\u7684\u9690\u542b\u72b6\u6001\u8f93\u51fah(t), \u8fd9\u4e2a\u8fc7\u7a0b\u610f\u5473\u7740\u91cd\u7f6e\u95e8\u6709\u80fd\u529b\u91cd\u7f6e\u4e4b\u524d\u6240\u6709\u7684\u8ba1\u7b97, \u5f53\u95e8\u503c\u8d8b\u4e8e1\u65f6, \u8f93\u51fa\u5c31\u662f\u65b0\u7684h(t), \u800c\u5f53\u95e8\u503c\u8d8b\u4e8e0\u65f6, \u8f93\u51fa\u5c31\u662f\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684h(t-1). Bi-GRU\u4e0eBi-LSTM\u7684\u903b\u8f91\u76f8\u540c, \u90fd\u662f\u4e0d\u6539\u53d8\u5176\u5185\u90e8\u7ed3\u6784, \u800c\u662f\u5c06\u6a21\u578b\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. \u5177\u4f53\u53c2\u89c1\u4e0a\u5c0f\u8282\u4e2d\u7684Bi-LSTM. Pytorch\u4e2dGRU\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.GRU\u53ef\u8c03\u7528. nn.GRU\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. nonlinearity: \u6fc0\u6d3b\u51fd\u6570\u7684\u9009\u62e9, \u9ed8\u8ba4\u662ftanh. bidirectional: \u662f\u5426\u9009\u62e9\u4f7f\u7528\u53cc\u5411LSTM, \u5982\u679c\u4e3aTrue, \u5219\u4f7f\u7528; \u9ed8\u8ba4\u4e0d\u4f7f\u7528. nn.GRU\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. nn.GRU\u4f7f\u7528\u793a\u4f8b: >>> import torch >>> import torch.nn as nn >>> rnn = nn . GRU ( 5 , 6 , 2 ) >>> input = torch . randn ( 1 , 3 , 5 ) >>> h0 = torch . randn ( 2 , 3 , 6 ) >>> output , hn = rnn ( input , h0 ) >>> output tensor ([[[ - 0.2097 , - 2.2225 , 0.6204 , - 0.1745 , - 0.1749 , - 0.0460 ], [ - 0.3820 , 0.0465 , - 0.4798 , 0.6837 , - 0.7894 , 0.5173 ], [ - 0.0184 , - 0.2758 , 1.2482 , 0.5514 , - 0.9165 , - 0.6667 ]]], grad_fn =< StackBackward > ) >>> hn tensor ([[[ 0.6578 , - 0.4226 , - 0.2129 , - 0.3785 , 0.5070 , 0.4338 ], [ - 0.5072 , 0.5948 , 0.8083 , 0.4618 , 0.1629 , - 0.1591 ], [ 0.2430 , - 0.4981 , 0.3846 , - 0.4252 , 0.7191 , 0.5420 ]], [[ - 0.2097 , - 2.2225 , 0.6204 , - 0.1745 , - 0.1749 , - 0.0460 ], [ - 0.3820 , 0.0465 , - 0.4798 , 0.6837 , - 0.7894 , 0.5173 ], [ - 0.0184 , - 0.2758 , 1.2482 , 0.5514 , - 0.9165 , - 0.6667 ]]], grad_fn =< StackBackward > ) GRU\u7684\u4f18\u52bf: GRU\u548cLSTM\u4f5c\u7528\u76f8\u540c, \u5728\u6355\u6349\u957f\u5e8f\u5217\u8bed\u4e49\u5173\u8054\u65f6, \u80fd\u6709\u6548\u6291\u5236\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u6548\u679c\u90fd\u4f18\u4e8e\u4f20\u7edfRNN\u4e14\u8ba1\u7b97\u590d\u6742\u5ea6\u76f8\u6bd4LSTM\u8981\u5c0f. GRU\u7684\u7f3a\u70b9: GRU\u4ecd\u7136\u4e0d\u80fd\u5b8c\u5168\u89e3\u51b3\u68af\u5ea6\u6d88\u5931\u95ee\u9898, \u540c\u65f6\u5176\u4f5c\u7528RNN\u7684\u53d8\u4f53, \u6709\u7740RNN\u7ed3\u6784\u672c\u8eab\u7684\u4e00\u5927\u5f0a\u7aef, \u5373\u4e0d\u53ef\u5e76\u884c\u8ba1\u7b97, \u8fd9\u5728\u6570\u636e\u91cf\u548c\u6a21\u578b\u4f53\u91cf\u9010\u6b65\u589e\u5927\u7684\u672a\u6765, \u662fRNN\u53d1\u5c55\u7684\u5173\u952e\u74f6\u9888. \u5c0f\u8282\u603b\u7ed3: GRU\uff08Gated Recurrent Unit\uff09\u4e5f\u79f0\u95e8\u63a7\u5faa\u73af\u5355\u5143\u7ed3\u6784, \u5b83\u4e5f\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u540cLSTM\u4e00\u6837\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6\u5b83\u7684\u7ed3\u6784\u548c\u8ba1\u7b97\u8981\u6bd4LSTM\u66f4\u7b80\u5355, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u66f4\u65b0\u95e8 \u91cd\u7f6e\u95e8 \u5185\u90e8\u7ed3\u6784\u5206\u6790: \u548c\u4e4b\u524d\u5206\u6790\u8fc7\u7684LSTM\u4e2d\u7684\u95e8\u63a7\u4e00\u6837, \u9996\u5148\u8ba1\u7b97\u66f4\u65b0\u95e8\u548c\u91cd\u7f6e\u95e8\u7684\u95e8\u503c, \u5206\u522b\u662fz(t)\u548cr(t), \u8ba1\u7b97\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528X(t)\u4e0eh(t-1)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u6362, \u518d\u7ecf\u8fc7sigmoid\u6fc0\u6d3b. \u4e4b\u540e\u66f4\u65b0\u95e8\u95e8\u503c\u4f5c\u7528\u5728\u4e86h(t-1)\u4e0a, \u4ee3\u8868\u63a7\u5236\u4e0a\u4e00\u65f6\u95f4\u6b65\u4f20\u6765\u7684\u4fe1\u606f\u6709\u591a\u5c11\u53ef\u4ee5\u88ab\u5229\u7528. \u63a5\u7740\u5c31\u662f\u4f7f\u7528\u8fd9\u4e2a\u66f4\u65b0\u540e\u7684h(t-1)\u8fdb\u884c\u57fa\u672c\u7684RNN\u8ba1\u7b97, \u5373\u4e0ex(t)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u5316, \u7ecf\u8fc7tanh\u6fc0\u6d3b, \u5f97\u5230\u65b0\u7684h(t). \u6700\u540e\u91cd\u7f6e\u95e8\u7684\u95e8\u503c\u4f1a\u4f5c\u7528\u5728\u65b0\u7684h(t)\uff0c\u800c1-\u95e8\u503c\u4f1a\u4f5c\u7528\u5728h(t-1)\u4e0a, \u968f\u540e\u5c06\u4e24\u8005\u7684\u7ed3\u679c\u76f8\u52a0, \u5f97\u5230\u6700\u7ec8\u7684\u9690\u542b\u72b6\u6001\u8f93\u51fah(t), \u8fd9\u4e2a\u8fc7\u7a0b\u610f\u5473\u7740\u91cd\u7f6e\u95e8\u6709\u80fd\u529b\u91cd\u7f6e\u4e4b\u524d\u6240\u6709\u7684\u8ba1\u7b97, \u5f53\u95e8\u503c\u8d8b\u4e8e1\u65f6, \u8f93\u51fa\u5c31\u662f\u65b0\u7684h(t), \u800c\u5f53\u95e8\u503c\u8d8b\u4e8e0\u65f6, \u8f93\u51fa\u5c31\u662f\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684h(t-1). Bi-GRU\u4e0eBi-LSTM\u7684\u903b\u8f91\u76f8\u540c, \u90fd\u662f\u4e0d\u6539\u53d8\u5176\u5185\u90e8\u7ed3\u6784, \u800c\u662f\u5c06\u6a21\u578b\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. \u5177\u4f53\u53c2\u89c1\u4e0a\u5c0f\u8282\u4e2d\u7684Bi-LSTM. Pytorch\u4e2dGRU\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.GRU\u53ef\u8c03\u7528. GRU\u7684\u4f18\u52bf: GRU\u548cLSTM\u4f5c\u7528\u76f8\u540c, \u5728\u6355\u6349\u957f\u5e8f\u5217\u8bed\u4e49\u5173\u8054\u65f6, \u80fd\u6709\u6548\u6291\u5236\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u6548\u679c\u90fd\u4f18\u4e8e\u4f20\u7edfRNN\u4e14\u8ba1\u7b97\u590d\u6742\u5ea6\u76f8\u6bd4LSTM\u8981\u5c0f. GRU\u7684\u7f3a\u70b9: GRU\u4ecd\u7136\u4e0d\u80fd\u5b8c\u5168\u89e3\u51b3\u68af\u5ea6\u6d88\u5931\u95ee\u9898, \u540c\u65f6\u5176\u4f5c\u7528RNN\u7684\u53d8\u4f53, \u6709\u7740RNN\u7ed3\u6784\u672c\u8eab\u7684\u4e00\u5927\u5f0a\u7aef, \u5373\u4e0d\u53ef\u5e76\u884c\u8ba1\u7b97, \u8fd9\u5728\u6570\u636e\u91cf\u548c\u6a21\u578b\u4f53\u91cf\u9010\u6b65\u589e\u5927\u7684\u672a\u6765, \u662fRNN\u53d1\u5c55\u7684\u5173\u952e\u74f6\u9888. 1.5 \u6ce8\u610f\u529b\u673a\u5236 \u5b66\u4e60\u76ee\u6807: \u4e86\u89e3\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u4ee5\u53ca\u5e38\u89c1\u7684\u8ba1\u7b97\u89c4\u5219. \u4e86\u89e3\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u673a\u5236\u53ca\u5176\u4f5c\u7528. \u638c\u63e1\u6ce8\u610f\u529b\u673a\u5236\u7684\u5b9e\u73b0\u6b65\u9aa4. \u4ec0\u4e48\u662f\u6ce8\u610f\u529b: \u6211\u4eec\u89c2\u5bdf\u4e8b\u7269\u65f6\uff0c\u4e4b\u6240\u4ee5\u80fd\u591f\u5feb\u901f\u5224\u65ad\u4e00\u79cd\u4e8b\u7269(\u5f53\u7136\u5141\u8bb8\u5224\u65ad\u662f\u9519\u8bef\u7684), \u662f\u56e0\u4e3a\u6211\u4eec\u5927\u8111\u80fd\u591f\u5f88\u5feb\u628a\u6ce8\u610f\u529b\u653e\u5728\u4e8b\u7269\u6700\u5177\u6709\u8fa8\u8bc6\u5ea6\u7684\u90e8\u5206\u4ece\u800c\u4f5c\u51fa\u5224\u65ad\uff0c\u800c\u5e76\u975e\u662f\u4ece\u5934\u5230\u5c3e\u7684\u89c2\u5bdf\u4e00\u904d\u4e8b\u7269\u540e\uff0c\u624d\u80fd\u6709\u5224\u65ad\u7ed3\u679c. \u6b63\u662f\u57fa\u4e8e\u8fd9\u6837\u7684\u7406\u8bba\uff0c\u5c31\u4ea7\u751f\u4e86\u6ce8\u610f\u529b\u673a\u5236. \u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5b83\u9700\u8981\u4e09\u4e2a\u6307\u5b9a\u7684\u8f93\u5165Q(query), K(key), V(value), \u7136\u540e\u901a\u8fc7\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u6ce8\u610f\u529b\u7684\u7ed3\u679c, \u8fd9\u4e2a\u7ed3\u679c\u4ee3\u8868query\u5728key\u548cvalue\u4f5c\u7528\u4e0b\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5f53\u8f93\u5165\u7684Q=K=V\u65f6, \u79f0\u4f5c\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219. \u5e38\u89c1\u7684\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316\u540e\u518d\u4f7f\u7528tanh\u51fd\u6570\u6fc0\u6d3b, \u7136\u540e\u518d\u8fdb\u884c\u5185\u90e8\u6c42\u548c, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u518d\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\u4e0eK\u7684\u8f6c\u7f6e\u505a\u70b9\u79ef\u8fd0\u7b97, \u7136\u540e\u9664\u4ee5\u4e00\u4e2a\u7f29\u653e\u7cfb\u6570, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u8bf4\u660e\uff1a\u5f53\u6ce8\u610f\u529b\u6743\u91cd\u77e9\u9635\u548cV\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\u4e14\u7b2c\u4e00\u7ef4\u4ee3\u8868\u4e3abatch\u6761\u6570\u65f6, \u5219\u505abmm\u8fd0\u7b97.bmm\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5f20\u91cf\u4e58\u6cd5\u8fd0\u7b97. bmm\u8fd0\u7b97\u6f14\u793a: # \u5982\u679c\u53c2\u65701\u5f62\u72b6\u662f(b \u00d7 n \u00d7 m), \u53c2\u65702\u5f62\u72b6\u662f(b \u00d7 m \u00d7 p), \u5219\u8f93\u51fa\u4e3a(b \u00d7 n \u00d7 p) >>> input = torch.randn(10, 3, 4) >>> mat2 = torch.randn(10, 4, 5) >>> res = torch.bmm(input, mat2) >>> res.size() torch.Size([10, 3, 5]) \u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u673a\u5236: \u6ce8\u610f\u529b\u673a\u5236\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u80fd\u591f\u5e94\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u7684\u8f7d\u4f53, \u540c\u65f6\u5305\u62ec\u4e00\u4e9b\u5fc5\u8981\u7684\u5168\u8fde\u63a5\u5c42\u4ee5\u53ca\u76f8\u5173\u5f20\u91cf\u5904\u7406, \u4f7f\u5176\u4e0e\u5e94\u7528\u7f51\u7edc\u878d\u4e3a\u4e00\u4f53. \u4f7f\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u7684\u6ce8\u610f\u529b\u673a\u5236\u79f0\u4e3a\u81ea\u6ce8\u610f\u529b\u673a\u5236. \u8bf4\u660e: NLP\u9886\u57df\u4e2d, \u5f53\u524d\u7684\u6ce8\u610f\u529b\u673a\u5236\u5927\u591a\u6570\u5e94\u7528\u4e0eseq2seq\u67b6\u6784, \u5373\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u6a21\u578b. \u6ce8\u610f\u529b\u673a\u5236\u7684\u4f5c\u7528: \u5728\u89e3\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u80fd\u591f\u6839\u636e\u6a21\u578b\u76ee\u6807\u6709\u6548\u7684\u805a\u7126\u7f16\u7801\u5668\u7684\u8f93\u51fa\u7ed3\u679c, \u5f53\u5176\u4f5c\u4e3a\u89e3\u7801\u5668\u7684\u8f93\u5165\u65f6\u63d0\u5347\u6548\u679c. \u6539\u5584\u4ee5\u5f80\u7f16\u7801\u5668\u8f93\u51fa\u662f\u5355\u4e00\u5b9a\u957f\u5f20\u91cf, \u65e0\u6cd5\u5b58\u50a8\u8fc7\u591a\u4fe1\u606f\u7684\u60c5\u51b5. \u5728\u7f16\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u4e3b\u8981\u89e3\u51b3\u8868\u5f81\u95ee\u9898, \u76f8\u5f53\u4e8e\u7279\u5f81\u63d0\u53d6\u8fc7\u7a0b, \u5f97\u5230\u8f93\u5165\u7684\u6ce8\u610f\u529b\u8868\u793a. \u4e00\u822c\u4f7f\u7528\u81ea\u6ce8\u610f\u529b(self-attention). \u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u6839\u636e\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219, \u5bf9Q\uff0cK\uff0cV\u8fdb\u884c\u76f8\u5e94\u7684\u8ba1\u7b97. \u7b2c\u4e8c\u6b65: \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, \u5982\u679c\u662f\u62fc\u63a5\u65b9\u6cd5\uff0c\u5219\u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e8c\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5, \u5982\u679c\u662f\u8f6c\u7f6e\u70b9\u79ef, \u4e00\u822c\u662f\u81ea\u6ce8\u610f\u529b, Q\u4e0eV\u76f8\u540c, \u5219\u4e0d\u9700\u8981\u8fdb\u884c\u4e0eQ\u7684\u62fc\u63a5. \u7b2c\u4e09\u6b65: \u6700\u540e\u4e3a\u4e86\u4f7f\u6574\u4e2aattention\u673a\u5236\u6309\u7167\u6307\u5b9a\u5c3a\u5bf8\u8f93\u51fa, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e8c\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362, \u5f97\u5230\u6700\u7ec8\u5bf9Q\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5e38\u89c1\u6ce8\u610f\u529b\u673a\u5236\u7684\u4ee3\u7801\u5206\u6790: import torch import torch.nn as nn import torch.nn.functional as F class Attn ( nn . Module ): def __init__ ( self , query_size , key_size , value_size1 , value_size2 , output_size ): \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u67095\u4e2a, query_size\u4ee3\u8868query\u7684\u6700\u540e\u4e00\u7ef4\u5927\u5c0f key_size\u4ee3\u8868key\u7684\u6700\u540e\u4e00\u7ef4\u5927\u5c0f, value_size1\u4ee3\u8868value\u7684\u5bfc\u6570\u7b2c\u4e8c\u7ef4\u5927\u5c0f, value = (1, value_size1, value_size2) value_size2\u4ee3\u8868value\u7684\u5012\u6570\u7b2c\u4e00\u7ef4\u5927\u5c0f, output_size\u8f93\u51fa\u7684\u6700\u540e\u4e00\u7ef4\u5927\u5c0f\"\"\" super ( Attn , self ) . __init__ () # \u5c06\u4ee5\u4e0b\u53c2\u6570\u4f20\u5165\u7c7b\u4e2d self . query_size = query_size self . key_size = key_size self . value_size1 = value_size1 self . value_size2 = value_size2 self . output_size = output_size # \u521d\u59cb\u5316\u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u7b2c\u4e00\u6b65\u4e2d\u9700\u8981\u7684\u7ebf\u6027\u5c42. self . attn = nn . Linear ( self . query_size + self . key_size , value_size1 ) # \u521d\u59cb\u5316\u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u7b2c\u4e09\u6b65\u4e2d\u9700\u8981\u7684\u7ebf\u6027\u5c42. self . attn_combine = nn . Linear ( self . query_size + value_size2 , output_size ) def forward ( self , Q , K , V ): \"\"\"forward\u51fd\u6570\u7684\u8f93\u5165\u53c2\u6570\u6709\u4e09\u4e2a, \u5206\u522b\u662fQ, K, V, \u6839\u636e\u6a21\u578b\u8bad\u7ec3\u5e38\u8bc6, \u8f93\u5165\u7ed9Attion\u673a\u5236\u7684 \u5f20\u91cf\u4e00\u822c\u60c5\u51b5\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf, \u56e0\u6b64\u8fd9\u91cc\u4e5f\u5047\u8bbeQ, K, V\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\"\"\" # \u7b2c\u4e00\u6b65, \u6309\u7167\u8ba1\u7b97\u89c4\u5219\u8fdb\u884c\u8ba1\u7b97, # \u6211\u4eec\u91c7\u7528\u5e38\u89c1\u7684\u7b2c\u4e00\u79cd\u8ba1\u7b97\u89c4\u5219 # \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c attn_weights = F . softmax ( self . attn ( torch . cat (( Q [ 0 ], K [ 0 ]), 1 )), dim = 1 ) # \u7136\u540e\u8fdb\u884c\u7b2c\u4e00\u6b65\u7684\u540e\u534a\u90e8\u5206, \u5c06\u5f97\u5230\u7684\u6743\u91cd\u77e9\u9635\u4e0eV\u505a\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97, # \u5f53\u4e8c\u8005\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\u4e14\u7b2c\u4e00\u7ef4\u4ee3\u8868\u4e3abatch\u6761\u6570\u65f6, \u5219\u505abmm\u8fd0\u7b97 attn_applied = torch . bmm ( attn_weights . unsqueeze ( 0 ), V ) # \u4e4b\u540e\u8fdb\u884c\u7b2c\u4e8c\u6b65, \u901a\u8fc7\u53d6[0]\u662f\u7528\u6765\u964d\u7ef4, \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, # \u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e00\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5 output = torch . cat (( Q [ 0 ], attn_applied [ 0 ]), 1 ) # \u6700\u540e\u662f\u7b2c\u4e09\u6b65, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e09\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\u5e76\u6269\u5c55\u7ef4\u5ea6\uff0c\u5f97\u5230\u8f93\u51fa # \u56e0\u4e3a\u8981\u4fdd\u8bc1\u8f93\u51fa\u4e5f\u662f\u4e09\u7ef4\u5f20\u91cf, \u56e0\u6b64\u4f7f\u7528unsqueeze(0)\u6269\u5c55\u7ef4\u5ea6 output = self . attn_combine ( output ) . unsqueeze ( 0 ) return output , attn_weights \u8c03\u7528: query_size = 32 key_size = 32 value_size1 = 32 value_size2 = 64 output_size = 64 attn = Attn(query_size, key_size, value_size1, value_size2, output_size) Q = torch.randn(1,1,32) K = torch.randn(1,1,32) V = torch.randn(1,32,64) out = attn(Q, K ,V) print(out[0]) print(out[1]) \u8f93\u51fa\u6548\u679c: tensor([[[ 0.4477, -0.0500, -0.2277, -0.3168, -0.4096, -0.5982, 0.1548, -0.0771, -0.0951, 0.1833, 0.3128, 0.1260, 0.4420, 0.0495, -0.7774, -0.0995, 0.2629, 0.4957, 1.0922, 0.1428, 0.3024, -0.2646, -0.0265, 0.0632, 0.3951, 0.1583, 0.1130, 0.5500, -0.1887, -0.2816, -0.3800, -0.5741, 0.1342, 0.0244, -0.2217, 0.1544, 0.1865, -0.2019, 0.4090, -0.4762, 0.3677, -0.2553, -0.5199, 0.2290, -0.4407, 0.0663, -0.0182, -0.2168, 0.0913, -0.2340, 0.1924, -0.3687, 0.1508, 0.3618, -0.0113, 0.2864, -0.1929, -0.6821, 0.0951, 0.1335, 0.3560, -0.3215, 0.6461, 0.1532]]], grad_fn=<UnsqueezeBackward0>) tensor([[0.0395, 0.0342, 0.0200, 0.0471, 0.0177, 0.0209, 0.0244, 0.0465, 0.0346, 0.0378, 0.0282, 0.0214, 0.0135, 0.0419, 0.0926, 0.0123, 0.0177, 0.0187, 0.0166, 0.0225, 0.0234, 0.0284, 0.0151, 0.0239, 0.0132, 0.0439, 0.0507, 0.0419, 0.0352, 0.0392, 0.0546, 0.0224]], grad_fn=<SoftmaxBackward>) \u66f4\u591a\u6709\u5173\u6ce8\u610f\u529b\u673a\u5236\u7684\u5e94\u7528\u6211\u4eec\u5c06\u5728\u6848\u4f8b\u4e2d\u8fdb\u884c\u8be6\u5c3d\u7684\u7406\u89e3\u5206\u6790. \u5c0f\u8282\u603b\u7ed3: \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5b83\u9700\u8981\u4e09\u4e2a\u6307\u5b9a\u7684\u8f93\u5165Q(query), K(key), V(value), \u7136\u540e\u901a\u8fc7\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u6ce8\u610f\u529b\u7684\u7ed3\u679c, \u8fd9\u4e2a\u7ed3\u679c\u4ee3\u8868query\u5728key\u548cvalue\u4f5c\u7528\u4e0b\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5f53\u8f93\u5165\u7684Q=K=V\u65f6, \u79f0\u4f5c\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219. \u5e38\u89c1\u7684\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316\u540e\u518d\u4f7f\u7528tanh\u51fd\u6570\u6fc0\u6d3b, \u7136\u540e\u518d\u8fdb\u884c\u5185\u90e8\u6c42\u548c, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u518d\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\u4e0eK\u7684\u8f6c\u7f6e\u505a\u70b9\u79ef\u8fd0\u7b97, \u7136\u540e\u9664\u4ee5\u4e00\u4e2a\u7f29\u653e\u7cfb\u6570, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u673a\u5236: \u6ce8\u610f\u529b\u673a\u5236\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u80fd\u591f\u5e94\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u7684\u8f7d\u4f53, \u540c\u65f6\u5305\u62ec\u4e00\u4e9b\u5fc5\u8981\u7684\u5168\u8fde\u63a5\u5c42\u4ee5\u53ca\u76f8\u5173\u5f20\u91cf\u5904\u7406, \u4f7f\u5176\u4e0e\u5e94\u7528\u7f51\u7edc\u878d\u4e3a\u4e00\u4f53. \u4f7f\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u7684\u6ce8\u610f\u529b\u673a\u5236\u79f0\u4e3a\u81ea\u6ce8\u610f\u529b\u673a\u5236. \u6ce8\u610f\u529b\u673a\u5236\u7684\u4f5c\u7528: \u5728\u89e3\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u80fd\u591f\u6839\u636e\u6a21\u578b\u76ee\u6807\u6709\u6548\u7684\u805a\u7126\u7f16\u7801\u5668\u7684\u8f93\u51fa\u7ed3\u679c, \u5f53\u5176\u4f5c\u4e3a\u89e3\u7801\u5668\u7684\u8f93\u5165\u65f6\u63d0\u5347\u6548\u679c. \u6539\u5584\u4ee5\u5f80\u7f16\u7801\u5668\u8f93\u51fa\u662f\u5355\u4e00\u5b9a\u957f\u5f20\u91cf, \u65e0\u6cd5\u5b58\u50a8\u8fc7\u591a\u4fe1\u606f\u7684\u60c5\u51b5. \u5728\u7f16\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u4e3b\u8981\u89e3\u51b3\u8868\u5f81\u95ee\u9898, \u76f8\u5f53\u4e8e\u7279\u5f81\u63d0\u53d6\u8fc7\u7a0b, \u5f97\u5230\u8f93\u5165\u7684\u6ce8\u610f\u529b\u8868\u793a. \u4e00\u822c\u4f7f\u7528\u81ea\u6ce8\u610f\u529b(self-attention). \u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u6839\u636e\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219, \u5bf9Q\uff0cK\uff0cV\u8fdb\u884c\u76f8\u5e94\u7684\u8ba1\u7b97. \u7b2c\u4e8c\u6b65: \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, \u5982\u679c\u662f\u62fc\u63a5\u65b9\u6cd5\uff0c\u5219\u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e8c\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5, \u5982\u679c\u662f\u8f6c\u7f6e\u70b9\u79ef, \u4e00\u822c\u662f\u81ea\u6ce8\u610f\u529b, Q\u4e0eV\u76f8\u540c, \u5219\u4e0d\u9700\u8981\u8fdb\u884c\u4e0eQ\u7684\u62fc\u63a5. \u7b2c\u4e09\u6b65: \u6700\u540e\u4e3a\u4e86\u4f7f\u6574\u4e2aattention\u673a\u5236\u6309\u7167\u6307\u5b9a\u5c3a\u5bf8\u8f93\u51fa, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e8c\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362, \u5f97\u5230\u6700\u7ec8\u5bf9Q\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5b66\u4e60\u5e76\u5b9e\u73b0\u4e86\u4e00\u79cd\u5e38\u89c1\u7684\u6ce8\u610f\u529b\u673a\u5236\u7684\u7c7bAttn.","title":"Home"},{"location":"index.html#11-rnn","text":"\u5b66\u4e60\u76ee\u6807: \u4e86\u89e3\u4ec0\u4e48\u662fRNN\u6a21\u578b. \u4e86\u89e3RNN\u6a21\u578b\u7684\u4f5c\u7528. \u4e86\u89e3RNN\u6a21\u578b\u7684\u5206\u7c7b. \u4ec0\u4e48\u662fRNN\u6a21\u578b: RNN(Recurrent Neural Network), \u4e2d\u6587\u79f0\u4f5c\u5faa\u73af\u795e\u7ecf\u7f51\u7edc, \u5b83\u4e00\u822c\u4ee5\u5e8f\u5217\u6570\u636e\u4e3a\u8f93\u5165, \u901a\u8fc7\u7f51\u7edc\u5185\u90e8\u7684\u7ed3\u6784\u8bbe\u8ba1\u6709\u6548\u6355\u6349\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb\u7279\u5f81, \u4e00\u822c\u4e5f\u662f\u4ee5\u5e8f\u5217\u5f62\u5f0f\u8fdb\u884c\u8f93\u51fa. \u4e00\u822c\u5355\u5c42\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784: RNN\u5355\u5c42\u7f51\u7edc\u7ed3\u6784: \u4ee5\u65f6\u95f4\u6b65\u5bf9RNN\u8fdb\u884c\u5c55\u5f00\u540e\u7684\u5355\u5c42\u7f51\u7edc\u7ed3\u6784: RNN\u7684\u5faa\u73af\u673a\u5236\u4f7f\u6a21\u578b\u9690\u5c42\u4e0a\u4e00\u65f6\u95f4\u6b65\u4ea7\u751f\u7684\u7ed3\u679c, \u80fd\u591f\u4f5c\u4e3a\u5f53\u4e0b\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206(\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u9664\u4e86\u6b63\u5e38\u7684\u8f93\u5165\u5916\u8fd8\u5305\u62ec\u4e0a\u4e00\u6b65\u7684\u9690\u5c42\u8f93\u51fa)\u5bf9\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u4ea7\u751f\u5f71\u54cd. RNN\u6a21\u578b\u7684\u4f5c\u7528: \u56e0\u4e3aRNN\u7ed3\u6784\u80fd\u591f\u5f88\u597d\u5229\u7528\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb, \u56e0\u6b64\u9488\u5bf9\u81ea\u7136\u754c\u5177\u6709\u8fde\u7eed\u6027\u7684\u8f93\u5165\u5e8f\u5217, \u5982\u4eba\u7c7b\u7684\u8bed\u8a00, \u8bed\u97f3\u7b49\u8fdb\u884c\u5f88\u597d\u7684\u5904\u7406, \u5e7f\u6cdb\u5e94\u7528\u4e8eNLP\u9886\u57df\u7684\u5404\u9879\u4efb\u52a1, \u5982\u6587\u672c\u5206\u7c7b, \u60c5\u611f\u5206\u6790, \u610f\u56fe\u8bc6\u522b, \u673a\u5668\u7ffb\u8bd1\u7b49. \u4e0b\u9762\u6211\u4eec\u5c06\u4ee5\u4e00\u4e2a\u7528\u6237\u610f\u56fe\u8bc6\u522b\u7684\u4f8b\u5b50\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790: \u7b2c\u4e00\u6b65: \u7528\u6237\u8f93\u5165\u4e86\"What time is it ?\", \u6211\u4eec\u9996\u5148\u9700\u8981\u5bf9\u5b83\u8fdb\u884c\u57fa\u672c\u7684\u5206\u8bcd, \u56e0\u4e3aRNN\u662f\u6309\u7167\u987a\u5e8f\u5de5\u4f5c\u7684, \u6bcf\u6b21\u53ea\u63a5\u6536\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5904\u7406. \u7b2c\u4e8c\u6b65: \u9996\u5148\u5c06\u5355\u8bcd\"What\"\u8f93\u9001\u7ed9RNN, \u5b83\u5c06\u4ea7\u751f\u4e00\u4e2a\u8f93\u51faO1. \u7b2c\u4e09\u6b65: \u7ee7\u7eed\u5c06\u5355\u8bcd\"time\"\u8f93\u9001\u7ed9RNN, \u4f46\u6b64\u65f6RNN\u4e0d\u4ec5\u4ec5\u5229\u7528\"time\"\u6765\u4ea7\u751f\u8f93\u51faO2, \u8fd8\u4f1a\u4f7f\u7528\u6765\u81ea\u4e0a\u4e00\u5c42\u9690\u5c42\u8f93\u51faO1\u4f5c\u4e3a\u8f93\u5165\u4fe1\u606f. \u7b2c\u56db\u6b65: \u91cd\u590d\u8fd9\u6837\u7684\u6b65\u9aa4, \u76f4\u5230\u5904\u7406\u5b8c\u6240\u6709\u7684\u5355\u8bcd. \u7b2c\u4e94\u6b65: \u6700\u540e\uff0c\u5c06\u6700\u7ec8\u7684\u9690\u5c42\u8f93\u51faO5\u8fdb\u884c\u5904\u7406\u6765\u89e3\u6790\u7528\u6237\u610f\u56fe. RNN\u6a21\u578b\u7684\u5206\u7c7b: \u8fd9\u91cc\u6211\u4eec\u5c06\u4ece\u4e24\u4e2a\u89d2\u5ea6\u5bf9RNN\u6a21\u578b\u8fdb\u884c\u5206\u7c7b. \u7b2c\u4e00\u4e2a\u89d2\u5ea6\u662f\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784, \u7b2c\u4e8c\u4e2a\u89d2\u5ea6\u662fRNN\u7684\u5185\u90e8\u6784\u9020. \u6309\u7167\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784\u8fdb\u884c\u5206\u7c7b: N vs N - RNN N vs 1 - RNN 1 vs N - RNN N vs M - RNN \u6309\u7167RNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b: \u4f20\u7edfRNN LSTM Bi-LSTM GRU Bi-GRU N vs N - RNN: \u5b83\u662fRNN\u6700\u57fa\u7840\u7684\u7ed3\u6784\u5f62\u5f0f, \u6700\u5927\u7684\u7279\u70b9\u5c31\u662f: \u8f93\u5165\u548c\u8f93\u51fa\u5e8f\u5217\u662f\u7b49\u957f\u7684. \u7531\u4e8e\u8fd9\u4e2a\u9650\u5236\u7684\u5b58\u5728, \u4f7f\u5176\u9002\u7528\u8303\u56f4\u6bd4\u8f83\u5c0f, \u53ef\u7528\u4e8e\u751f\u6210\u7b49\u957f\u5ea6\u7684\u5408\u8f99\u8bd7\u53e5. N vs 1 - RNN: \u6709\u65f6\u5019\u6211\u4eec\u8981\u5904\u7406\u7684\u95ee\u9898\u8f93\u5165\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u800c\u8981\u6c42\u8f93\u51fa\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u800c\u4e0d\u662f\u5e8f\u5217\uff0c\u5e94\u8be5\u600e\u6837\u5efa\u6a21\u5462\uff1f\u6211\u4eec\u53ea\u8981\u5728\u6700\u540e\u4e00\u4e2a\u9690\u5c42\u8f93\u51fah\u4e0a\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\u5c31\u53ef\u4ee5\u4e86\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u66f4\u597d\u7684\u660e\u786e\u7ed3\u679c, \u8fd8\u8981\u4f7f\u7528sigmoid\u6216\u8005softmax\u8fdb\u884c\u5904\u7406. \u8fd9\u79cd\u7ed3\u6784\u7ecf\u5e38\u88ab\u5e94\u7528\u5728\u6587\u672c\u5206\u7c7b\u95ee\u9898\u4e0a. 1 vs N - RNN: \u5982\u679c\u8f93\u5165\u4e0d\u662f\u5e8f\u5217\u800c\u8f93\u51fa\u4e3a\u5e8f\u5217\u7684\u60c5\u51b5\u600e\u4e48\u5904\u7406\u5462\uff1f\u6211\u4eec\u6700\u5e38\u91c7\u7528\u7684\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u4f7f\u8be5\u8f93\u5165\u4f5c\u7528\u4e8e\u6bcf\u6b21\u7684\u8f93\u51fa\u4e4b\u4e0a. \u8fd9\u79cd\u7ed3\u6784\u53ef\u7528\u4e8e\u5c06\u56fe\u7247\u751f\u6210\u6587\u5b57\u4efb\u52a1\u7b49. N vs M - RNN: \u8fd9\u662f\u4e00\u79cd\u4e0d\u9650\u8f93\u5165\u8f93\u51fa\u957f\u5ea6\u7684RNN\u7ed3\u6784, \u5b83\u7531\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u4e24\u90e8\u5206\u7ec4\u6210, \u4e24\u8005\u7684\u5185\u90e8\u7ed3\u6784\u90fd\u662f\u67d0\u7c7bRNN, \u5b83\u4e5f\u88ab\u79f0\u4e3aseq2seq\u67b6\u6784. \u8f93\u5165\u6570\u636e\u9996\u5148\u901a\u8fc7\u7f16\u7801\u5668, \u6700\u7ec8\u8f93\u51fa\u4e00\u4e2a\u9690\u542b\u53d8\u91cfc, \u4e4b\u540e\u6700\u5e38\u7528\u7684\u505a\u6cd5\u662f\u4f7f\u7528\u8fd9\u4e2a\u9690\u542b\u53d8\u91cfc\u4f5c\u7528\u5728\u89e3\u7801\u5668\u8fdb\u884c\u89e3\u7801\u7684\u6bcf\u4e00\u6b65\u4e0a, \u4ee5\u4fdd\u8bc1\u8f93\u5165\u4fe1\u606f\u88ab\u6709\u6548\u5229\u7528. seq2seq\u67b6\u6784\u6700\u65e9\u88ab\u63d0\u51fa\u5e94\u7528\u4e8e\u673a\u5668\u7ffb\u8bd1, \u56e0\u4e3a\u5176\u8f93\u5165\u8f93\u51fa\u4e0d\u53d7\u9650\u5236\uff0c\u5982\u4eca\u4e5f\u662f\u5e94\u7528\u6700\u5e7f\u7684RNN\u6a21\u578b\u7ed3\u6784. \u5728\u673a\u5668\u7ffb\u8bd1, \u9605\u8bfb\u7406\u89e3, \u6587\u672c\u6458\u8981\u7b49\u4f17\u591a\u9886\u57df\u90fd\u8fdb\u884c\u4e86\u975e\u5e38\u591a\u7684\u5e94\u7528\u5b9e\u8df5. \u5173\u4e8eRNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b\u7684\u5185\u5bb9\u6211\u4eec\u5c06\u5728\u540e\u9762\u4f7f\u7528\u5355\u72ec\u7684\u5c0f\u8282\u8be6\u7ec6\u8bb2\u89e3. \u5c0f\u8282\u603b\u7ed3: \u5b66\u4e60\u4e86\u4ec0\u4e48\u662fRNN\u6a21\u578b: RNN(Recurrent Neural Network), \u4e2d\u6587\u79f0\u4f5c\u5faa\u73af\u795e\u7ecf\u7f51\u7edc, \u5b83\u4e00\u822c\u4ee5\u5e8f\u5217\u6570\u636e\u4e3a\u8f93\u5165, \u901a\u8fc7\u7f51\u7edc\u5185\u90e8\u7684\u7ed3\u6784\u8bbe\u8ba1\u6709\u6548\u6355\u6349\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb\u7279\u5f81, \u4e00\u822c\u4e5f\u662f\u4ee5\u5e8f\u5217\u5f62\u5f0f\u8fdb\u884c\u8f93\u51fa. RNN\u7684\u5faa\u73af\u673a\u5236\u4f7f\u6a21\u578b\u9690\u5c42\u4e0a\u4e00\u65f6\u95f4\u6b65\u4ea7\u751f\u7684\u7ed3\u679c, \u80fd\u591f\u4f5c\u4e3a\u5f53\u4e0b\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206(\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u9664\u4e86\u6b63\u5e38\u7684\u8f93\u5165\u5916\u8fd8\u5305\u62ec\u4e0a\u4e00\u6b65\u7684\u9690\u5c42\u8f93\u51fa)\u5bf9\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u4ea7\u751f\u5f71\u54cd. \u5b66\u4e60\u4e86RNN\u6a21\u578b\u7684\u4f5c\u7528: \u56e0\u4e3aRNN\u7ed3\u6784\u80fd\u591f\u5f88\u597d\u5229\u7528\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb, \u56e0\u6b64\u9488\u5bf9\u81ea\u7136\u754c\u5177\u6709\u8fde\u7eed\u6027\u7684\u8f93\u5165\u5e8f\u5217, \u5982\u4eba\u7c7b\u7684\u8bed\u8a00, \u8bed\u97f3\u7b49\u8fdb\u884c\u5f88\u597d\u7684\u5904\u7406, \u5e7f\u6cdb\u5e94\u7528\u4e8eNLP\u9886\u57df\u7684\u5404\u9879\u4efb\u52a1, \u5982\u6587\u672c\u5206\u7c7b, \u60c5\u611f\u5206\u6790, \u610f\u56fe\u8bc6\u522b, \u673a\u5668\u7ffb\u8bd1\u7b49. \u4ee5\u4e00\u4e2a\u7528\u6237\u610f\u56fe\u8bc6\u522b\u7684\u4f8b\u5b50\u5bf9RNN\u7684\u8fd0\u884c\u8fc7\u7a0b\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790: \u7b2c\u4e00\u6b65: \u7528\u6237\u8f93\u5165\u4e86\"What time is it ?\", \u6211\u4eec\u9996\u5148\u9700\u8981\u5bf9\u5b83\u8fdb\u884c\u57fa\u672c\u7684\u5206\u8bcd, \u56e0\u4e3aRNN\u662f\u6309\u7167\u987a\u5e8f\u5de5\u4f5c\u7684, \u6bcf\u6b21\u53ea\u63a5\u6536\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5904\u7406. \u7b2c\u4e8c\u6b65: \u9996\u5148\u5c06\u5355\u8bcd\"What\"\u8f93\u9001\u7ed9RNN, \u5b83\u5c06\u4ea7\u751f\u4e00\u4e2a\u8f93\u51faO1. \u7b2c\u4e09\u6b65: \u7ee7\u7eed\u5c06\u5355\u8bcd\"time\"\u8f93\u9001\u7ed9RNN, \u4f46\u6b64\u65f6RNN\u4e0d\u4ec5\u4ec5\u5229\u7528\"time\"\u6765\u4ea7\u751f\u8f93\u51faO2, \u8fd8\u4f1a\u4f7f\u7528\u6765\u81ea\u4e0a\u4e00\u5c42\u9690\u5c42\u8f93\u51faO1\u4f5c\u4e3a\u8f93\u5165\u4fe1\u606f. \u7b2c\u56db\u6b65: \u91cd\u590d\u8fd9\u6837\u7684\u6b65\u9aa4, \u76f4\u5230\u5904\u7406\u5b8c\u6240\u6709\u7684\u5355\u8bcd. \u7b2c\u4e94\u6b65: \u6700\u540e\uff0c\u5c06\u6700\u7ec8\u7684\u9690\u5c42\u8f93\u51faO5\u8fdb\u884c\u5904\u7406\u6765\u89e3\u6790\u7528\u6237\u610f\u56fe. \u5b66\u4e60\u4e86RNN\u6a21\u578b\u7684\u5206\u7c7b: \u8fd9\u91cc\u6211\u4eec\u5c06\u4ece\u4e24\u4e2a\u89d2\u5ea6\u5bf9RNN\u6a21\u578b\u8fdb\u884c\u5206\u7c7b. \u7b2c\u4e00\u4e2a\u89d2\u5ea6\u662f\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784, \u7b2c\u4e8c\u4e2a\u89d2\u5ea6\u662fRNN\u7684\u5185\u90e8\u6784\u9020. \u6309\u7167\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784\u8fdb\u884c\u5206\u7c7b: N vs N - RNN N vs 1 - RNN 1 vs N - RNN N vs M - RNN N vs N - RNN: \u5b83\u662fRNN\u6700\u57fa\u7840\u7684\u7ed3\u6784\u5f62\u5f0f, \u6700\u5927\u7684\u7279\u70b9\u5c31\u662f: \u8f93\u5165\u548c\u8f93\u51fa\u5e8f\u5217\u662f\u7b49\u957f\u7684. \u7531\u4e8e\u8fd9\u4e2a\u9650\u5236\u7684\u5b58\u5728, \u4f7f\u5176\u9002\u7528\u8303\u56f4\u6bd4\u8f83\u5c0f, \u53ef\u7528\u4e8e\u751f\u6210\u7b49\u957f\u5ea6\u7684\u5408\u8f99\u8bd7\u53e5. N vs 1 - RNN: \u6709\u65f6\u5019\u6211\u4eec\u8981\u5904\u7406\u7684\u95ee\u9898\u8f93\u5165\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u800c\u8981\u6c42\u8f93\u51fa\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u800c\u4e0d\u662f\u5e8f\u5217\uff0c\u5e94\u8be5\u600e\u6837\u5efa\u6a21\u5462\uff1f\u6211\u4eec\u53ea\u8981\u5728\u6700\u540e\u4e00\u4e2a\u9690\u5c42\u8f93\u51fah\u4e0a\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\u5c31\u53ef\u4ee5\u4e86\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u66f4\u597d\u7684\u660e\u786e\u7ed3\u679c, \u8fd8\u8981\u4f7f\u7528sigmoid\u6216\u8005softmax\u8fdb\u884c\u5904\u7406. \u8fd9\u79cd\u7ed3\u6784\u7ecf\u5e38\u88ab\u5e94\u7528\u5728\u6587\u672c\u5206\u7c7b\u95ee\u9898\u4e0a. 1 vs N - RNN: \u5982\u679c\u8f93\u5165\u4e0d\u662f\u5e8f\u5217\u800c\u8f93\u51fa\u4e3a\u5e8f\u5217\u7684\u60c5\u51b5\u600e\u4e48\u5904\u7406\u5462\uff1f\u6211\u4eec\u6700\u5e38\u91c7\u7528\u7684\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u4f7f\u8be5\u8f93\u5165\u4f5c\u7528\u4e8e\u6bcf\u6b21\u7684\u8f93\u51fa\u4e4b\u4e0a. \u8fd9\u79cd\u7ed3\u6784\u53ef\u7528\u4e8e\u5c06\u56fe\u7247\u751f\u6210\u6587\u5b57\u4efb\u52a1\u7b49. N vs M - RNN: \u8fd9\u662f\u4e00\u79cd\u4e0d\u9650\u8f93\u5165\u8f93\u51fa\u957f\u5ea6\u7684RNN\u7ed3\u6784, \u5b83\u7531\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u4e24\u90e8\u5206\u7ec4\u6210, \u4e24\u8005\u7684\u5185\u90e8\u7ed3\u6784\u90fd\u662f\u67d0\u7c7bRNN, \u5b83\u4e5f\u88ab\u79f0\u4e3aseq2seq\u67b6\u6784. \u8f93\u5165\u6570\u636e\u9996\u5148\u901a\u8fc7\u7f16\u7801\u5668, \u6700\u7ec8\u8f93\u51fa\u4e00\u4e2a\u9690\u542b\u53d8\u91cfc, \u4e4b\u540e\u6700\u5e38\u7528\u7684\u505a\u6cd5\u662f\u4f7f\u7528\u8fd9\u4e2a\u9690\u542b\u53d8\u91cfc\u4f5c\u7528\u5728\u89e3\u7801\u5668\u8fdb\u884c\u89e3\u7801\u7684\u6bcf\u4e00\u6b65\u4e0a, \u4ee5\u4fdd\u8bc1\u8f93\u5165\u4fe1\u606f\u88ab\u6709\u6548\u5229\u7528. seq2seq\u67b6\u6784\u6700\u65e9\u88ab\u63d0\u51fa\u5e94\u7528\u4e8e\u673a\u5668\u7ffb\u8bd1, \u56e0\u4e3a\u5176\u8f93\u5165\u8f93\u51fa\u4e0d\u53d7\u9650\u5236\uff0c\u5982\u4eca\u4e5f\u662f\u5e94\u7528\u6700\u5e7f\u7684RNN\u6a21\u578b\u7ed3\u6784. \u5728\u673a\u5668\u7ffb\u8bd1, \u9605\u8bfb\u7406\u89e3, \u6587\u672c\u6458\u8981\u7b49\u4f17\u591a\u9886\u57df\u90fd\u8fdb\u884c\u4e86\u975e\u5e38\u591a\u7684\u5e94\u7528\u5b9e\u8df5. \u6309\u7167RNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b: \u4f20\u7edfRNN LSTM Bi-LSTM GRU Bi-GRU \u5173\u4e8eRNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b\u7684\u5185\u5bb9\u6211\u4eec\u5c06\u5728\u540e\u9762\u4f7f\u7528\u5355\u72ec\u7684\u5c0f\u8282\u8be6\u7ec6\u8bb2\u89e3.","title":"1.1 \u8ba4\u8bc6RNN\u6a21\u578b"},{"location":"index.html#12-rnn","text":"\u5b66\u4e60\u76ee\u6807: \u4e86\u89e3\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f. \u638c\u63e1Pytorch\u4e2d\u4f20\u7edfRNN\u5de5\u5177\u7684\u4f7f\u7528. \u4e86\u89e3\u4f20\u7edfRNN\u7684\u4f18\u52bf\u4e0e\u7f3a\u70b9. \u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u56fe: \u7ed3\u6784\u89e3\u91ca\u56fe: \u5185\u90e8\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u628a\u76ee\u5149\u96c6\u4e2d\u5728\u4e2d\u95f4\u7684\u65b9\u5757\u90e8\u5206, \u5b83\u7684\u8f93\u5165\u6709\u4e24\u90e8\u5206, \u5206\u522b\u662fh(t-1)\u4ee5\u53cax(t), \u4ee3\u8868\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684\u9690\u5c42\u8f93\u51fa, \u4ee5\u53ca\u6b64\u65f6\u95f4\u6b65\u7684\u8f93\u5165, \u5b83\u4eec\u8fdb\u5165RNN\u7ed3\u6784\u4f53\u540e, \u4f1a\"\u878d\u5408\"\u5230\u4e00\u8d77, \u8fd9\u79cd\u878d\u5408\u6211\u4eec\u6839\u636e\u7ed3\u6784\u89e3\u91ca\u53ef\u77e5, \u662f\u5c06\u4e8c\u8005\u8fdb\u884c\u62fc\u63a5, \u5f62\u6210\u65b0\u7684\u5f20\u91cf[x(t), h(t-1)], \u4e4b\u540e\u8fd9\u4e2a\u65b0\u7684\u5f20\u91cf\u5c06\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42(\u7ebf\u6027\u5c42), \u8be5\u5c42\u4f7f\u7528tanh\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570, \u6700\u7ec8\u5f97\u5230\u8be5\u65f6\u95f4\u6b65\u7684\u8f93\u51fah(t), \u5b83\u5c06\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u548cx(t+1)\u4e00\u8d77\u8fdb\u5165\u7ed3\u6784\u4f53. \u4ee5\u6b64\u7c7b\u63a8. \u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u6839\u636e\u7ed3\u6784\u5206\u6790\u5f97\u51fa\u5185\u90e8\u8ba1\u7b97\u516c\u5f0f: \u6fc0\u6d3b\u51fd\u6570tanh\u7684\u4f5c\u7528: \u7528\u4e8e\u5e2e\u52a9\u8c03\u8282\u6d41\u7ecf\u7f51\u7edc\u7684\u503c, tanh\u51fd\u6570\u5c06\u503c\u538b\u7f29\u5728-1\u548c1\u4e4b\u95f4. Pytorch\u4e2d\u4f20\u7edfRNN\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.RNN\u53ef\u8c03\u7528. nn.RNN\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. nonlinearity: \u6fc0\u6d3b\u51fd\u6570\u7684\u9009\u62e9, \u9ed8\u8ba4\u662ftanh. nn.RNN\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. nn.RNN\u4f7f\u7528\u793a\u4f8b: >>> import torch >>> import torch.nn as nn >>> rnn = nn . RNN ( 5 , 6 , 1 ) >>> input = torch . randn ( 1 , 3 , 5 ) >>> h0 = torch . randn ( 1 , 3 , 6 ) >>> output , hn = rnn ( input , h0 ) >>> output tensor ([[[ 0.4282 , - 0.8475 , - 0.0685 , - 0.4601 , - 0.8357 , 0.1252 ], [ 0.5758 , - 0.2823 , 0.4822 , - 0.4485 , - 0.7362 , 0.0084 ], [ 0.9224 , - 0.7479 , - 0.3682 , - 0.5662 , - 0.9637 , 0.4938 ]]], grad_fn =< StackBackward > ) >>> hn tensor ([[[ 0.4282 , - 0.8475 , - 0.0685 , - 0.4601 , - 0.8357 , 0.1252 ], [ 0.5758 , - 0.2823 , 0.4822 , - 0.4485 , - 0.7362 , 0.0084 ], [ 0.9224 , - 0.7479 , - 0.3682 , - 0.5662 , - 0.9637 , 0.4938 ]]], grad_fn =< StackBackward > ) \u4f20\u7edfRNN\u7684\u4f18\u52bf: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u7b80\u5355, \u5bf9\u8ba1\u7b97\u8d44\u6e90\u8981\u6c42\u4f4e, \u76f8\u6bd4\u4e4b\u540e\u6211\u4eec\u8981\u5b66\u4e60\u7684RNN\u53d8\u4f53:LSTM\u548cGRU\u6a21\u578b\u53c2\u6570\u603b\u91cf\u5c11\u4e86\u5f88\u591a, \u5728\u77ed\u5e8f\u5217\u4efb\u52a1\u4e0a\u6027\u80fd\u548c\u6548\u679c\u90fd\u8868\u73b0\u4f18\u5f02. \u4f20\u7edfRNN\u7684\u7f3a\u70b9: \u4f20\u7edfRNN\u5728\u89e3\u51b3\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u8054\u65f6, \u901a\u8fc7\u5b9e\u8df5\uff0c\u8bc1\u660e\u7ecf\u5178RNN\u8868\u73b0\u5f88\u5dee, \u539f\u56e0\u662f\u5728\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u7684\u65f6\u5019, \u8fc7\u957f\u7684\u5e8f\u5217\u5bfc\u81f4\u68af\u5ea6\u7684\u8ba1\u7b97\u5f02\u5e38, \u53d1\u751f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8. \u4ec0\u4e48\u662f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u5462\uff1f \u6839\u636e\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u548c\u94fe\u5f0f\u6cd5\u5219, \u68af\u5ea6\u7684\u8ba1\u7b97\u53ef\u4ee5\u7b80\u5316\u4e3a\u4ee5\u4e0b\u516c\u5f0f: \u5176\u4e2dsigmoid\u7684\u5bfc\u6570\u503c\u57df\u662f\u56fa\u5b9a\u7684, \u5728[0, 0.25]\u4e4b\u95f4, \u800c\u4e00\u65e6\u516c\u5f0f\u4e2d\u7684w\u4e5f\u5c0f\u4e8e1, \u90a3\u4e48\u901a\u8fc7\u8fd9\u6837\u7684\u516c\u5f0f\u8fde\u4e58\u540e, \u6700\u7ec8\u7684\u68af\u5ea6\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u975e\u5e38\u5c0f, \u8fd9\u79cd\u73b0\u8c61\u79f0\u4f5c\u68af\u5ea6\u6d88\u5931. \u53cd\u4e4b, \u5982\u679c\u6211\u4eec\u4eba\u4e3a\u7684\u589e\u5927w\u7684\u503c, \u4f7f\u5176\u5927\u4e8e1, \u90a3\u4e48\u8fde\u4e58\u591f\u5c31\u53ef\u80fd\u9020\u6210\u68af\u5ea6\u8fc7\u5927, \u79f0\u4f5c\u68af\u5ea6\u7206\u70b8. \u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u7684\u5371\u5bb3: \u5982\u679c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u68af\u5ea6\u6d88\u5931\uff0c\u6743\u91cd\u65e0\u6cd5\u88ab\u66f4\u65b0\uff0c\u6700\u7ec8\u5bfc\u81f4\u8bad\u7ec3\u5931\u8d25; \u68af\u5ea6\u7206\u70b8\u6240\u5e26\u6765\u7684\u68af\u5ea6\u8fc7\u5927\uff0c\u5927\u5e45\u5ea6\u66f4\u65b0\u7f51\u7edc\u53c2\u6570\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u4f1a\u6ea2\u51fa\uff08NaN\u503c\uff09. \u5c0f\u8282\u603b\u7ed3: \u5b66\u4e60\u4e86\u4f20\u7edfRNN\u7684\u7ed3\u6784\u5e76\u8fdb\u884c\u4e86\u5206\u6790; \u5b83\u7684\u8f93\u5165\u6709\u4e24\u90e8\u5206, \u5206\u522b\u662fh(t-1)\u4ee5\u53cax(t), \u4ee3\u8868\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684\u9690\u5c42\u8f93\u51fa, \u4ee5\u53ca\u6b64\u65f6\u95f4\u6b65\u7684\u8f93\u5165, \u5b83\u4eec\u8fdb\u5165RNN\u7ed3\u6784\u4f53\u540e, \u4f1a\"\u878d\u5408\"\u5230\u4e00\u8d77, \u8fd9\u79cd\u878d\u5408\u6211\u4eec\u6839\u636e\u7ed3\u6784\u89e3\u91ca\u53ef\u77e5, \u662f\u5c06\u4e8c\u8005\u8fdb\u884c\u62fc\u63a5, \u5f62\u6210\u65b0\u7684\u5f20\u91cf[x(t), h(t-1)], \u4e4b\u540e\u8fd9\u4e2a\u65b0\u7684\u5f20\u91cf\u5c06\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42(\u7ebf\u6027\u5c42), \u8be5\u5c42\u4f7f\u7528tanh\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570, \u6700\u7ec8\u5f97\u5230\u8be5\u65f6\u95f4\u6b65\u7684\u8f93\u51fah(t), \u5b83\u5c06\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u548cx(t+1)\u4e00\u8d77\u8fdb\u5165\u7ed3\u6784\u4f53. \u4ee5\u6b64\u7c7b\u63a8. \u6839\u636e\u7ed3\u6784\u5206\u6790\u5f97\u51fa\u4e86\u4f20\u7edfRNN\u7684\u8ba1\u7b97\u516c\u5f0f. \u5b66\u4e60\u4e86\u6fc0\u6d3b\u51fd\u6570tanh\u7684\u4f5c\u7528: \u7528\u4e8e\u5e2e\u52a9\u8c03\u8282\u6d41\u7ecf\u7f51\u7edc\u7684\u503c, tanh\u51fd\u6570\u5c06\u503c\u538b\u7f29\u5728-1\u548c1\u4e4b\u95f4. \u5b66\u4e60\u4e86Pytorch\u4e2d\u4f20\u7edfRNN\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.RNN\u53ef\u8c03\u7528. nn.RNN\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. nonlinearity: \u6fc0\u6d3b\u51fd\u6570\u7684\u9009\u62e9, \u9ed8\u8ba4\u662ftanh. nn.RNN\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. \u5b9e\u73b0\u4e86nn.RNN\u7684\u4f7f\u7528\u793a\u4f8b, \u83b7\u5f97RNN\u7684\u771f\u5b9e\u8fd4\u56de\u7ed3\u679c\u6837\u5f0f. \u5b66\u4e60\u4e86\u4f20\u7edfRNN\u7684\u4f18\u52bf: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u7b80\u5355, \u5bf9\u8ba1\u7b97\u8d44\u6e90\u8981\u6c42\u4f4e, \u76f8\u6bd4\u4e4b\u540e\u6211\u4eec\u8981\u5b66\u4e60\u7684RNN\u53d8\u4f53:LSTM\u548cGRU\u6a21\u578b\u53c2\u6570\u603b\u91cf\u5c11\u4e86\u5f88\u591a, \u5728\u77ed\u5e8f\u5217\u4efb\u52a1\u4e0a\u6027\u80fd\u548c\u6548\u679c\u90fd\u8868\u73b0\u4f18\u5f02. \u5b66\u4e60\u4e86\u4f20\u7edfRNN\u7684\u7f3a\u70b9: \u4f20\u7edfRNN\u5728\u89e3\u51b3\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u8054\u65f6, \u901a\u8fc7\u5b9e\u8df5\uff0c\u8bc1\u660e\u7ecf\u5178RNN\u8868\u73b0\u5f88\u5dee, \u539f\u56e0\u662f\u5728\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u7684\u65f6\u5019, \u8fc7\u957f\u7684\u5e8f\u5217\u5bfc\u81f4\u68af\u5ea6\u7684\u8ba1\u7b97\u5f02\u5e38, \u53d1\u751f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8. \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8: \u6839\u636e\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u548c\u94fe\u5f0f\u6cd5\u5219, \u5f97\u5230\u68af\u5ea6\u7684\u8ba1\u7b97\u7684\u7b80\u5316\u516c\u5f0f:\u5176\u4e2dsigmoid\u7684\u5bfc\u6570\u503c\u57df\u662f\u56fa\u5b9a\u7684, \u5728[0, 0.25]\u4e4b\u95f4, \u800c\u4e00\u65e6\u516c\u5f0f\u4e2d\u7684w\u4e5f\u5c0f\u4e8e1, \u90a3\u4e48\u901a\u8fc7\u8fd9\u6837\u7684\u516c\u5f0f\u8fde\u4e58\u540e, \u6700\u7ec8\u7684\u68af\u5ea6\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u975e\u5e38\u5c0f, \u8fd9\u79cd\u73b0\u8c61\u79f0\u4f5c\u68af\u5ea6\u6d88\u5931. \u53cd\u4e4b, \u5982\u679c\u6211\u4eec\u4eba\u4e3a\u7684\u589e\u5927w\u7684\u503c, \u4f7f\u5176\u5927\u4e8e1, \u90a3\u4e48\u8fde\u4e58\u591f\u5c31\u53ef\u80fd\u9020\u6210\u68af\u5ea6\u8fc7\u5927, \u79f0\u4f5c\u68af\u5ea6\u7206\u70b8. \u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u7684\u5371\u5bb3: \u5982\u679c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u68af\u5ea6\u6d88\u5931\uff0c\u6743\u91cd\u65e0\u6cd5\u88ab\u66f4\u65b0\uff0c\u6700\u7ec8\u5bfc\u81f4\u8bad\u7ec3\u5931\u8d25; \u68af\u5ea6\u7206\u70b8\u6240\u5e26\u6765\u7684\u68af\u5ea6\u8fc7\u5927\uff0c\u5927\u5e45\u5ea6\u66f4\u65b0\u7f51\u7edc\u53c2\u6570\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u4f1a\u6ea2\u51fa\uff08NaN\u503c\uff09.","title":"1.2 \u4f20\u7edfRNN\u6a21\u578b"},{"location":"index.html#13-lstm","text":"\u5b66\u4e60\u76ee\u6807: \u4e86\u89e3LSTM\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f. \u638c\u63e1Pytorch\u4e2dLSTM\u5de5\u5177\u7684\u4f7f\u7528. \u4e86\u89e3LSTM\u7684\u4f18\u52bf\u4e0e\u7f3a\u70b9. LSTM\uff08Long Short-Term Memory\uff09\u4e5f\u79f0\u957f\u77ed\u65f6\u8bb0\u5fc6\u7ed3\u6784, \u5b83\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u4e0e\u7ecf\u5178RNN\u76f8\u6bd4\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6LSTM\u7684\u7ed3\u6784\u66f4\u590d\u6742, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u9057\u5fd8\u95e8 \u8f93\u5165\u95e8 \u7ec6\u80de\u72b6\u6001 \u8f93\u51fa\u95e8 LSTM\u7684\u5185\u90e8\u7ed3\u6784\u56fe: \u7ed3\u6784\u89e3\u91ca\u56fe: \u9057\u5fd8\u95e8\u90e8\u5206\u7ed3\u6784\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u9057\u5fd8\u95e8\u7ed3\u6784\u5206\u6790: \u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u975e\u5e38\u76f8\u4f3c, \u9996\u5148\u5c06\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165x(t)\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u62fc\u63a5, \u5f97\u5230[x(t), h(t-1)], \u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u505a\u53d8\u6362, \u6700\u540e\u901a\u8fc7sigmoid\u51fd\u6570\u8fdb\u884c\u6fc0\u6d3b\u5f97\u5230f(t), \u6211\u4eec\u53ef\u4ee5\u5c06f(t)\u770b\u4f5c\u662f\u95e8\u503c, \u597d\u6bd4\u4e00\u6247\u95e8\u5f00\u5408\u7684\u5927\u5c0f\u7a0b\u5ea6, \u95e8\u503c\u90fd\u5c06\u4f5c\u7528\u5728\u901a\u8fc7\u8be5\u6247\u95e8\u7684\u5f20\u91cf, \u9057\u5fd8\u95e8\u95e8\u503c\u5c06\u4f5c\u7528\u7684\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u4e0a, \u4ee3\u8868\u9057\u5fd8\u8fc7\u53bb\u7684\u591a\u5c11\u4fe1\u606f, \u53c8\u56e0\u4e3a\u9057\u5fd8\u95e8\u95e8\u503c\u662f\u7531x(t), h(t-1)\u8ba1\u7b97\u5f97\u6765\u7684, \u56e0\u6b64\u6574\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u6839\u636e\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165\u548c\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u6765\u51b3\u5b9a\u9057\u5fd8\u591a\u5c11\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u6240\u643a\u5e26\u7684\u8fc7\u5f80\u4fe1\u606f. \u9057\u5fd8\u95e8\u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u6fc0\u6d3b\u51fd\u6570sigmiod\u7684\u4f5c\u7528: \u7528\u4e8e\u5e2e\u52a9\u8c03\u8282\u6d41\u7ecf\u7f51\u7edc\u7684\u503c, sigmoid\u51fd\u6570\u5c06\u503c\u538b\u7f29\u57280\u548c1\u4e4b\u95f4. \u8f93\u5165\u95e8\u90e8\u5206\u7ed3\u6784\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u8f93\u5165\u95e8\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u770b\u5230\u8f93\u5165\u95e8\u7684\u8ba1\u7b97\u516c\u5f0f\u6709\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5c31\u662f\u4ea7\u751f\u8f93\u5165\u95e8\u95e8\u503c\u7684\u516c\u5f0f, \u5b83\u548c\u9057\u5fd8\u95e8\u516c\u5f0f\u51e0\u4e4e\u76f8\u540c, \u533a\u522b\u53ea\u662f\u5728\u4e8e\u5b83\u4eec\u4e4b\u540e\u8981\u4f5c\u7528\u7684\u76ee\u6807\u4e0a. \u8fd9\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u8f93\u5165\u4fe1\u606f\u6709\u591a\u5c11\u9700\u8981\u8fdb\u884c\u8fc7\u6ee4. \u8f93\u5165\u95e8\u7684\u7b2c\u4e8c\u4e2a\u516c\u5f0f\u662f\u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u76f8\u540c. \u5bf9\u4e8eLSTM\u6765\u8bb2, \u5b83\u5f97\u5230\u7684\u662f\u5f53\u524d\u7684\u7ec6\u80de\u72b6\u6001, \u800c\u4e0d\u662f\u50cf\u7ecf\u5178RNN\u4e00\u6837\u5f97\u5230\u7684\u662f\u9690\u542b\u72b6\u6001. \u8f93\u5165\u95e8\u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u5206\u6790: \u7ec6\u80de\u66f4\u65b0\u7684\u7ed3\u6784\u4e0e\u8ba1\u7b97\u516c\u5f0f\u975e\u5e38\u5bb9\u6613\u7406\u89e3, \u8fd9\u91cc\u6ca1\u6709\u5168\u8fde\u63a5\u5c42, \u53ea\u662f\u5c06\u521a\u521a\u5f97\u5230\u7684\u9057\u5fd8\u95e8\u95e8\u503c\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u5f97\u5230\u7684C(t-1)\u76f8\u4e58, \u518d\u52a0\u4e0a\u8f93\u5165\u95e8\u95e8\u503c\u4e0e\u5f53\u524d\u65f6\u95f4\u6b65\u5f97\u5230\u7684\u672a\u66f4\u65b0C(t)\u76f8\u4e58\u7684\u7ed3\u679c. \u6700\u7ec8\u5f97\u5230\u66f4\u65b0\u540e\u7684C(t)\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u8fc7\u7a0b\u5c31\u662f\u5bf9\u9057\u5fd8\u95e8\u548c\u8f93\u5165\u95e8\u7684\u5e94\u7528. \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u8fc7\u7a0b\u6f14\u793a: \u8f93\u51fa\u95e8\u90e8\u5206\u7ed3\u6784\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u8f93\u51fa\u95e8\u7ed3\u6784\u5206\u6790: \u8f93\u51fa\u95e8\u90e8\u5206\u7684\u516c\u5f0f\u4e5f\u662f\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5373\u662f\u8ba1\u7b97\u8f93\u51fa\u95e8\u7684\u95e8\u503c, \u5b83\u548c\u9057\u5fd8\u95e8\uff0c\u8f93\u5165\u95e8\u8ba1\u7b97\u65b9\u5f0f\u76f8\u540c. \u7b2c\u4e8c\u4e2a\u5373\u662f\u4f7f\u7528\u8fd9\u4e2a\u95e8\u503c\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t), \u4ed6\u5c06\u4f5c\u7528\u5728\u66f4\u65b0\u540e\u7684\u7ec6\u80de\u72b6\u6001C(t)\u4e0a, \u5e76\u505atanh\u6fc0\u6d3b, \u6700\u7ec8\u5f97\u5230h(t)\u4f5c\u4e3a\u4e0b\u4e00\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u8f93\u51fa\u95e8\u7684\u8fc7\u7a0b, \u5c31\u662f\u4e3a\u4e86\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t). \u8f93\u51fa\u95e8\u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u4ec0\u4e48\u662fBi-LSTM ? Bi-LSTM\u5373\u53cc\u5411LSTM, \u5b83\u6ca1\u6709\u6539\u53d8LSTM\u672c\u8eab\u4efb\u4f55\u7684\u5185\u90e8\u7ed3\u6784, \u53ea\u662f\u5c06LSTM\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. Bi-LSTM\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u770b\u5230\u56fe\u4e2d\u5bf9\"\u6211\u7231\u4e2d\u56fd\"\u8fd9\u53e5\u8bdd\u6216\u8005\u53eb\u8fd9\u4e2a\u8f93\u5165\u5e8f\u5217, \u8fdb\u884c\u4e86\u4ece\u5de6\u5230\u53f3\u548c\u4ece\u53f3\u5230\u5de6\u4e24\u6b21LSTM\u5904\u7406, \u5c06\u5f97\u5230\u7684\u7ed3\u679c\u5f20\u91cf\u8fdb\u884c\u4e86\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. \u8fd9\u79cd\u7ed3\u6784\u80fd\u591f\u6355\u6349\u8bed\u8a00\u8bed\u6cd5\u4e2d\u4e00\u4e9b\u7279\u5b9a\u7684\u524d\u7f6e\u6216\u540e\u7f6e\u7279\u5f81, \u589e\u5f3a\u8bed\u4e49\u5173\u8054,\u4f46\u662f\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u590d\u6742\u5ea6\u4e5f\u968f\u4e4b\u589e\u52a0\u4e86\u4e00\u500d, \u4e00\u822c\u9700\u8981\u5bf9\u8bed\u6599\u548c\u8ba1\u7b97\u8d44\u6e90\u8fdb\u884c\u8bc4\u4f30\u540e\u51b3\u5b9a\u662f\u5426\u4f7f\u7528\u8be5\u7ed3\u6784. Pytorch\u4e2dLSTM\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.LSTM\u53ef\u8c03\u7528. nn.LSTM\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. nonlinearity: \u6fc0\u6d3b\u51fd\u6570\u7684\u9009\u62e9, \u9ed8\u8ba4\u662ftanh. bidirectional: \u662f\u5426\u9009\u62e9\u4f7f\u7528\u53cc\u5411LSTM, \u5982\u679c\u4e3aTrue, \u5219\u4f7f\u7528; \u9ed8\u8ba4\u4e0d\u4f7f\u7528. nn.LSTM\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. c0: \u521d\u59cb\u5316\u7684\u7ec6\u80de\u72b6\u6001\u5f20\u91cfc. nn.LSTM\u4f7f\u7528\u793a\u4f8b: >>> import torch.nn as nn >>> import torch >>> rnn = nn . LSTM ( 5 , 6 , 2 ) >>> input = torch . randn ( 1 , 3 , 5 ) >>> h0 = torch . randn ( 2 , 3 , 6 ) >>> c0 = torch . randn ( 2 , 3 , 6 ) >>> output , ( hn , cn ) = rnn ( input , ( h0 , c0 )) >>> output tensor ([[[ 0.0447 , - 0.0335 , 0.1454 , 0.0438 , 0.0865 , 0.0416 ], [ 0.0105 , 0.1923 , 0.5507 , - 0.1742 , 0.1569 , - 0.0548 ], [ - 0.1186 , 0.1835 , - 0.0022 , - 0.1388 , - 0.0877 , - 0.4007 ]]], grad_fn =< StackBackward > ) >>> hn tensor ([[[ 0.4647 , - 0.2364 , 0.0645 , - 0.3996 , - 0.0500 , - 0.0152 ], [ 0.3852 , 0.0704 , 0.2103 , - 0.2524 , 0.0243 , 0.0477 ], [ 0.2571 , 0.0608 , 0.2322 , 0.1815 , - 0.0513 , - 0.0291 ]], [[ 0.0447 , - 0.0335 , 0.1454 , 0.0438 , 0.0865 , 0.0416 ], [ 0.0105 , 0.1923 , 0.5507 , - 0.1742 , 0.1569 , - 0.0548 ], [ - 0.1186 , 0.1835 , - 0.0022 , - 0.1388 , - 0.0877 , - 0.4007 ]]], grad_fn =< StackBackward > ) >>> cn tensor ([[[ 0.8083 , - 0.5500 , 0.1009 , - 0.5806 , - 0.0668 , - 0.1161 ], [ 0.7438 , 0.0957 , 0.5509 , - 0.7725 , 0.0824 , 0.0626 ], [ 0.3131 , 0.0920 , 0.8359 , 0.9187 , - 0.4826 , - 0.0717 ]], [[ 0.1240 , - 0.0526 , 0.3035 , 0.1099 , 0.5915 , 0.0828 ], [ 0.0203 , 0.8367 , 0.9832 , - 0.4454 , 0.3917 , - 0.1983 ], [ - 0.2976 , 0.7764 , - 0.0074 , - 0.1965 , - 0.1343 , - 0.6683 ]]], grad_fn =< StackBackward > ) LSTM\u4f18\u52bf: LSTM\u7684\u95e8\u7ed3\u6784\u80fd\u591f\u6709\u6548\u51cf\u7f13\u957f\u5e8f\u5217\u95ee\u9898\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u867d\u7136\u5e76\u4e0d\u80fd\u675c\u7edd\u8fd9\u79cd\u73b0\u8c61, \u4f46\u5728\u66f4\u957f\u7684\u5e8f\u5217\u95ee\u9898\u4e0a\u8868\u73b0\u4f18\u4e8e\u4f20\u7edfRNN. LSTM\u7f3a\u70b9: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u76f8\u5bf9\u8f83\u590d\u6742, \u56e0\u6b64\u8bad\u7ec3\u6548\u7387\u5728\u540c\u7b49\u7b97\u529b\u4e0b\u8f83\u4f20\u7edfRNN\u4f4e\u5f88\u591a. \u5c0f\u8282\u603b\u7ed3: LSTM\uff08Long Short-Term Memory\uff09\u4e5f\u79f0\u957f\u77ed\u65f6\u8bb0\u5fc6\u7ed3\u6784, \u5b83\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u4e0e\u7ecf\u5178RNN\u76f8\u6bd4\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6LSTM\u7684\u7ed3\u6784\u66f4\u590d\u6742, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u9057\u5fd8\u95e8 \u8f93\u5165\u95e8 \u7ec6\u80de\u72b6\u6001 \u8f93\u51fa\u95e8 \u9057\u5fd8\u95e8\u7ed3\u6784\u5206\u6790: \u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u975e\u5e38\u76f8\u4f3c, \u9996\u5148\u5c06\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165x(t)\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u62fc\u63a5, \u5f97\u5230[x(t), h(t-1)], \u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u505a\u53d8\u6362, \u6700\u540e\u901a\u8fc7sigmoid\u51fd\u6570\u8fdb\u884c\u6fc0\u6d3b\u5f97\u5230f(t), \u6211\u4eec\u53ef\u4ee5\u5c06f(t)\u770b\u4f5c\u662f\u95e8\u503c, \u597d\u6bd4\u4e00\u6247\u95e8\u5f00\u5408\u7684\u5927\u5c0f\u7a0b\u5ea6, \u95e8\u503c\u90fd\u5c06\u4f5c\u7528\u5728\u901a\u8fc7\u8be5\u6247\u95e8\u7684\u5f20\u91cf, \u9057\u5fd8\u95e8\u95e8\u503c\u5c06\u4f5c\u7528\u7684\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u4e0a, \u4ee3\u8868\u9057\u5fd8\u8fc7\u53bb\u7684\u591a\u5c11\u4fe1\u606f, \u53c8\u56e0\u4e3a\u9057\u5fd8\u95e8\u95e8\u503c\u662f\u7531x(t), h(t-1)\u8ba1\u7b97\u5f97\u6765\u7684, \u56e0\u6b64\u6574\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u6839\u636e\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165\u548c\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u6765\u51b3\u5b9a\u9057\u5fd8\u591a\u5c11\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u6240\u643a\u5e26\u7684\u8fc7\u5f80\u4fe1\u606f. \u8f93\u5165\u95e8\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u770b\u5230\u8f93\u5165\u95e8\u7684\u8ba1\u7b97\u516c\u5f0f\u6709\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5c31\u662f\u4ea7\u751f\u8f93\u5165\u95e8\u95e8\u503c\u7684\u516c\u5f0f, \u5b83\u548c\u9057\u5fd8\u95e8\u516c\u5f0f\u51e0\u4e4e\u76f8\u540c, \u533a\u522b\u53ea\u662f\u5728\u4e8e\u5b83\u4eec\u4e4b\u540e\u8981\u4f5c\u7528\u7684\u76ee\u6807\u4e0a. \u8fd9\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u8f93\u5165\u4fe1\u606f\u6709\u591a\u5c11\u9700\u8981\u8fdb\u884c\u8fc7\u6ee4. \u8f93\u5165\u95e8\u7684\u7b2c\u4e8c\u4e2a\u516c\u5f0f\u662f\u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u76f8\u540c. \u5bf9\u4e8eLSTM\u6765\u8bb2, \u5b83\u5f97\u5230\u7684\u662f\u5f53\u524d\u7684\u7ec6\u80de\u72b6\u6001, \u800c\u4e0d\u662f\u50cf\u7ecf\u5178RNN\u4e00\u6837\u5f97\u5230\u7684\u662f\u9690\u542b\u72b6\u6001. \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u5206\u6790: \u7ec6\u80de\u66f4\u65b0\u7684\u7ed3\u6784\u4e0e\u8ba1\u7b97\u516c\u5f0f\u975e\u5e38\u5bb9\u6613\u7406\u89e3, \u8fd9\u91cc\u6ca1\u6709\u5168\u8fde\u63a5\u5c42, \u53ea\u662f\u5c06\u521a\u521a\u5f97\u5230\u7684\u9057\u5fd8\u95e8\u95e8\u503c\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u5f97\u5230\u7684C(t-1)\u76f8\u4e58, \u518d\u52a0\u4e0a\u8f93\u5165\u95e8\u95e8\u503c\u4e0e\u5f53\u524d\u65f6\u95f4\u6b65\u5f97\u5230\u7684\u672a\u66f4\u65b0C(t)\u76f8\u4e58\u7684\u7ed3\u679c. \u6700\u7ec8\u5f97\u5230\u66f4\u65b0\u540e\u7684C(t)\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u8fc7\u7a0b\u5c31\u662f\u5bf9\u9057\u5fd8\u95e8\u548c\u8f93\u5165\u95e8\u7684\u5e94\u7528. \u8f93\u51fa\u95e8\u7ed3\u6784\u5206\u6790: \u8f93\u51fa\u95e8\u90e8\u5206\u7684\u516c\u5f0f\u4e5f\u662f\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5373\u662f\u8ba1\u7b97\u8f93\u51fa\u95e8\u7684\u95e8\u503c, \u5b83\u548c\u9057\u5fd8\u95e8\uff0c\u8f93\u5165\u95e8\u8ba1\u7b97\u65b9\u5f0f\u76f8\u540c. \u7b2c\u4e8c\u4e2a\u5373\u662f\u4f7f\u7528\u8fd9\u4e2a\u95e8\u503c\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t), \u4ed6\u5c06\u4f5c\u7528\u5728\u66f4\u65b0\u540e\u7684\u7ec6\u80de\u72b6\u6001C(t)\u4e0a, \u5e76\u505atanh\u6fc0\u6d3b, \u6700\u7ec8\u5f97\u5230h(t)\u4f5c\u4e3a\u4e0b\u4e00\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u8f93\u51fa\u95e8\u7684\u8fc7\u7a0b, \u5c31\u662f\u4e3a\u4e86\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t). \u4ec0\u4e48\u662fBi-LSTM ? Bi-LSTM\u5373\u53cc\u5411LSTM, \u5b83\u6ca1\u6709\u6539\u53d8LSTM\u672c\u8eab\u4efb\u4f55\u7684\u5185\u90e8\u7ed3\u6784, \u53ea\u662f\u5c06LSTM\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. Pytorch\u4e2dLSTM\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.LSTM\u53ef\u8c03\u7528. LSTM\u4f18\u52bf: LSTM\u7684\u95e8\u7ed3\u6784\u80fd\u591f\u6709\u6548\u51cf\u7f13\u957f\u5e8f\u5217\u95ee\u9898\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u867d\u7136\u5e76\u4e0d\u80fd\u675c\u7edd\u8fd9\u79cd\u73b0\u8c61, \u4f46\u5728\u66f4\u957f\u7684\u5e8f\u5217\u95ee\u9898\u4e0a\u8868\u73b0\u4f18\u4e8e\u4f20\u7edfRNN. LSTM\u7f3a\u70b9: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u76f8\u5bf9\u8f83\u590d\u6742, \u56e0\u6b64\u8bad\u7ec3\u6548\u7387\u5728\u540c\u7b49\u7b97\u529b\u4e0b\u8f83\u4f20\u7edfRNN\u4f4e\u5f88\u591a.","title":"1.3 LSTM\u6a21\u578b"},{"location":"index.html#14-gru","text":"\u5b66\u4e60\u76ee\u6807: \u4e86\u89e3GRU\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f. \u638c\u63e1Pytorch\u4e2dGRU\u5de5\u5177\u7684\u4f7f\u7528. \u4e86\u89e3GRU\u7684\u4f18\u52bf\u4e0e\u7f3a\u70b9. GRU\uff08Gated Recurrent Unit\uff09\u4e5f\u79f0\u95e8\u63a7\u5faa\u73af\u5355\u5143\u7ed3\u6784, \u5b83\u4e5f\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u540cLSTM\u4e00\u6837\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6\u5b83\u7684\u7ed3\u6784\u548c\u8ba1\u7b97\u8981\u6bd4LSTM\u66f4\u7b80\u5355, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u66f4\u65b0\u95e8 \u91cd\u7f6e\u95e8 GRU\u7684\u5185\u90e8\u7ed3\u6784\u56fe\u548c\u8ba1\u7b97\u516c\u5f0f: \u7ed3\u6784\u89e3\u91ca\u56fe: GRU\u7684\u66f4\u65b0\u95e8\u548c\u91cd\u7f6e\u95e8\u7ed3\u6784\u56fe: \u5185\u90e8\u7ed3\u6784\u5206\u6790: \u548c\u4e4b\u524d\u5206\u6790\u8fc7\u7684LSTM\u4e2d\u7684\u95e8\u63a7\u4e00\u6837, \u9996\u5148\u8ba1\u7b97\u66f4\u65b0\u95e8\u548c\u91cd\u7f6e\u95e8\u7684\u95e8\u503c, \u5206\u522b\u662fz(t)\u548cr(t), \u8ba1\u7b97\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528X(t)\u4e0eh(t-1)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u6362, \u518d\u7ecf\u8fc7sigmoid\u6fc0\u6d3b. \u4e4b\u540e\u66f4\u65b0\u95e8\u95e8\u503c\u4f5c\u7528\u5728\u4e86h(t-1)\u4e0a, \u4ee3\u8868\u63a7\u5236\u4e0a\u4e00\u65f6\u95f4\u6b65\u4f20\u6765\u7684\u4fe1\u606f\u6709\u591a\u5c11\u53ef\u4ee5\u88ab\u5229\u7528. \u63a5\u7740\u5c31\u662f\u4f7f\u7528\u8fd9\u4e2a\u66f4\u65b0\u540e\u7684h(t-1)\u8fdb\u884c\u57fa\u672c\u7684RNN\u8ba1\u7b97, \u5373\u4e0ex(t)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u5316, \u7ecf\u8fc7tanh\u6fc0\u6d3b, \u5f97\u5230\u65b0\u7684h(t). \u6700\u540e\u91cd\u7f6e\u95e8\u7684\u95e8\u503c\u4f1a\u4f5c\u7528\u5728\u65b0\u7684h(t)\uff0c\u800c1-\u95e8\u503c\u4f1a\u4f5c\u7528\u5728h(t-1)\u4e0a, \u968f\u540e\u5c06\u4e24\u8005\u7684\u7ed3\u679c\u76f8\u52a0, \u5f97\u5230\u6700\u7ec8\u7684\u9690\u542b\u72b6\u6001\u8f93\u51fah(t), \u8fd9\u4e2a\u8fc7\u7a0b\u610f\u5473\u7740\u91cd\u7f6e\u95e8\u6709\u80fd\u529b\u91cd\u7f6e\u4e4b\u524d\u6240\u6709\u7684\u8ba1\u7b97, \u5f53\u95e8\u503c\u8d8b\u4e8e1\u65f6, \u8f93\u51fa\u5c31\u662f\u65b0\u7684h(t), \u800c\u5f53\u95e8\u503c\u8d8b\u4e8e0\u65f6, \u8f93\u51fa\u5c31\u662f\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684h(t-1). Bi-GRU\u4e0eBi-LSTM\u7684\u903b\u8f91\u76f8\u540c, \u90fd\u662f\u4e0d\u6539\u53d8\u5176\u5185\u90e8\u7ed3\u6784, \u800c\u662f\u5c06\u6a21\u578b\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. \u5177\u4f53\u53c2\u89c1\u4e0a\u5c0f\u8282\u4e2d\u7684Bi-LSTM. Pytorch\u4e2dGRU\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.GRU\u53ef\u8c03\u7528. nn.GRU\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. nonlinearity: \u6fc0\u6d3b\u51fd\u6570\u7684\u9009\u62e9, \u9ed8\u8ba4\u662ftanh. bidirectional: \u662f\u5426\u9009\u62e9\u4f7f\u7528\u53cc\u5411LSTM, \u5982\u679c\u4e3aTrue, \u5219\u4f7f\u7528; \u9ed8\u8ba4\u4e0d\u4f7f\u7528. nn.GRU\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. nn.GRU\u4f7f\u7528\u793a\u4f8b: >>> import torch >>> import torch.nn as nn >>> rnn = nn . GRU ( 5 , 6 , 2 ) >>> input = torch . randn ( 1 , 3 , 5 ) >>> h0 = torch . randn ( 2 , 3 , 6 ) >>> output , hn = rnn ( input , h0 ) >>> output tensor ([[[ - 0.2097 , - 2.2225 , 0.6204 , - 0.1745 , - 0.1749 , - 0.0460 ], [ - 0.3820 , 0.0465 , - 0.4798 , 0.6837 , - 0.7894 , 0.5173 ], [ - 0.0184 , - 0.2758 , 1.2482 , 0.5514 , - 0.9165 , - 0.6667 ]]], grad_fn =< StackBackward > ) >>> hn tensor ([[[ 0.6578 , - 0.4226 , - 0.2129 , - 0.3785 , 0.5070 , 0.4338 ], [ - 0.5072 , 0.5948 , 0.8083 , 0.4618 , 0.1629 , - 0.1591 ], [ 0.2430 , - 0.4981 , 0.3846 , - 0.4252 , 0.7191 , 0.5420 ]], [[ - 0.2097 , - 2.2225 , 0.6204 , - 0.1745 , - 0.1749 , - 0.0460 ], [ - 0.3820 , 0.0465 , - 0.4798 , 0.6837 , - 0.7894 , 0.5173 ], [ - 0.0184 , - 0.2758 , 1.2482 , 0.5514 , - 0.9165 , - 0.6667 ]]], grad_fn =< StackBackward > ) GRU\u7684\u4f18\u52bf: GRU\u548cLSTM\u4f5c\u7528\u76f8\u540c, \u5728\u6355\u6349\u957f\u5e8f\u5217\u8bed\u4e49\u5173\u8054\u65f6, \u80fd\u6709\u6548\u6291\u5236\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u6548\u679c\u90fd\u4f18\u4e8e\u4f20\u7edfRNN\u4e14\u8ba1\u7b97\u590d\u6742\u5ea6\u76f8\u6bd4LSTM\u8981\u5c0f. GRU\u7684\u7f3a\u70b9: GRU\u4ecd\u7136\u4e0d\u80fd\u5b8c\u5168\u89e3\u51b3\u68af\u5ea6\u6d88\u5931\u95ee\u9898, \u540c\u65f6\u5176\u4f5c\u7528RNN\u7684\u53d8\u4f53, \u6709\u7740RNN\u7ed3\u6784\u672c\u8eab\u7684\u4e00\u5927\u5f0a\u7aef, \u5373\u4e0d\u53ef\u5e76\u884c\u8ba1\u7b97, \u8fd9\u5728\u6570\u636e\u91cf\u548c\u6a21\u578b\u4f53\u91cf\u9010\u6b65\u589e\u5927\u7684\u672a\u6765, \u662fRNN\u53d1\u5c55\u7684\u5173\u952e\u74f6\u9888. \u5c0f\u8282\u603b\u7ed3: GRU\uff08Gated Recurrent Unit\uff09\u4e5f\u79f0\u95e8\u63a7\u5faa\u73af\u5355\u5143\u7ed3\u6784, \u5b83\u4e5f\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u540cLSTM\u4e00\u6837\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6\u5b83\u7684\u7ed3\u6784\u548c\u8ba1\u7b97\u8981\u6bd4LSTM\u66f4\u7b80\u5355, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u66f4\u65b0\u95e8 \u91cd\u7f6e\u95e8 \u5185\u90e8\u7ed3\u6784\u5206\u6790: \u548c\u4e4b\u524d\u5206\u6790\u8fc7\u7684LSTM\u4e2d\u7684\u95e8\u63a7\u4e00\u6837, \u9996\u5148\u8ba1\u7b97\u66f4\u65b0\u95e8\u548c\u91cd\u7f6e\u95e8\u7684\u95e8\u503c, \u5206\u522b\u662fz(t)\u548cr(t), \u8ba1\u7b97\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528X(t)\u4e0eh(t-1)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u6362, \u518d\u7ecf\u8fc7sigmoid\u6fc0\u6d3b. \u4e4b\u540e\u66f4\u65b0\u95e8\u95e8\u503c\u4f5c\u7528\u5728\u4e86h(t-1)\u4e0a, \u4ee3\u8868\u63a7\u5236\u4e0a\u4e00\u65f6\u95f4\u6b65\u4f20\u6765\u7684\u4fe1\u606f\u6709\u591a\u5c11\u53ef\u4ee5\u88ab\u5229\u7528. \u63a5\u7740\u5c31\u662f\u4f7f\u7528\u8fd9\u4e2a\u66f4\u65b0\u540e\u7684h(t-1)\u8fdb\u884c\u57fa\u672c\u7684RNN\u8ba1\u7b97, \u5373\u4e0ex(t)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u5316, \u7ecf\u8fc7tanh\u6fc0\u6d3b, \u5f97\u5230\u65b0\u7684h(t). \u6700\u540e\u91cd\u7f6e\u95e8\u7684\u95e8\u503c\u4f1a\u4f5c\u7528\u5728\u65b0\u7684h(t)\uff0c\u800c1-\u95e8\u503c\u4f1a\u4f5c\u7528\u5728h(t-1)\u4e0a, \u968f\u540e\u5c06\u4e24\u8005\u7684\u7ed3\u679c\u76f8\u52a0, \u5f97\u5230\u6700\u7ec8\u7684\u9690\u542b\u72b6\u6001\u8f93\u51fah(t), \u8fd9\u4e2a\u8fc7\u7a0b\u610f\u5473\u7740\u91cd\u7f6e\u95e8\u6709\u80fd\u529b\u91cd\u7f6e\u4e4b\u524d\u6240\u6709\u7684\u8ba1\u7b97, \u5f53\u95e8\u503c\u8d8b\u4e8e1\u65f6, \u8f93\u51fa\u5c31\u662f\u65b0\u7684h(t), \u800c\u5f53\u95e8\u503c\u8d8b\u4e8e0\u65f6, \u8f93\u51fa\u5c31\u662f\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684h(t-1). Bi-GRU\u4e0eBi-LSTM\u7684\u903b\u8f91\u76f8\u540c, \u90fd\u662f\u4e0d\u6539\u53d8\u5176\u5185\u90e8\u7ed3\u6784, \u800c\u662f\u5c06\u6a21\u578b\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. \u5177\u4f53\u53c2\u89c1\u4e0a\u5c0f\u8282\u4e2d\u7684Bi-LSTM. Pytorch\u4e2dGRU\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.GRU\u53ef\u8c03\u7528. GRU\u7684\u4f18\u52bf: GRU\u548cLSTM\u4f5c\u7528\u76f8\u540c, \u5728\u6355\u6349\u957f\u5e8f\u5217\u8bed\u4e49\u5173\u8054\u65f6, \u80fd\u6709\u6548\u6291\u5236\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u6548\u679c\u90fd\u4f18\u4e8e\u4f20\u7edfRNN\u4e14\u8ba1\u7b97\u590d\u6742\u5ea6\u76f8\u6bd4LSTM\u8981\u5c0f. GRU\u7684\u7f3a\u70b9: GRU\u4ecd\u7136\u4e0d\u80fd\u5b8c\u5168\u89e3\u51b3\u68af\u5ea6\u6d88\u5931\u95ee\u9898, \u540c\u65f6\u5176\u4f5c\u7528RNN\u7684\u53d8\u4f53, \u6709\u7740RNN\u7ed3\u6784\u672c\u8eab\u7684\u4e00\u5927\u5f0a\u7aef, \u5373\u4e0d\u53ef\u5e76\u884c\u8ba1\u7b97, \u8fd9\u5728\u6570\u636e\u91cf\u548c\u6a21\u578b\u4f53\u91cf\u9010\u6b65\u589e\u5927\u7684\u672a\u6765, \u662fRNN\u53d1\u5c55\u7684\u5173\u952e\u74f6\u9888.","title":"1.4 GRU\u6a21\u578b"},{"location":"index.html#15","text":"\u5b66\u4e60\u76ee\u6807: \u4e86\u89e3\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u4ee5\u53ca\u5e38\u89c1\u7684\u8ba1\u7b97\u89c4\u5219. \u4e86\u89e3\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u673a\u5236\u53ca\u5176\u4f5c\u7528. \u638c\u63e1\u6ce8\u610f\u529b\u673a\u5236\u7684\u5b9e\u73b0\u6b65\u9aa4. \u4ec0\u4e48\u662f\u6ce8\u610f\u529b: \u6211\u4eec\u89c2\u5bdf\u4e8b\u7269\u65f6\uff0c\u4e4b\u6240\u4ee5\u80fd\u591f\u5feb\u901f\u5224\u65ad\u4e00\u79cd\u4e8b\u7269(\u5f53\u7136\u5141\u8bb8\u5224\u65ad\u662f\u9519\u8bef\u7684), \u662f\u56e0\u4e3a\u6211\u4eec\u5927\u8111\u80fd\u591f\u5f88\u5feb\u628a\u6ce8\u610f\u529b\u653e\u5728\u4e8b\u7269\u6700\u5177\u6709\u8fa8\u8bc6\u5ea6\u7684\u90e8\u5206\u4ece\u800c\u4f5c\u51fa\u5224\u65ad\uff0c\u800c\u5e76\u975e\u662f\u4ece\u5934\u5230\u5c3e\u7684\u89c2\u5bdf\u4e00\u904d\u4e8b\u7269\u540e\uff0c\u624d\u80fd\u6709\u5224\u65ad\u7ed3\u679c. \u6b63\u662f\u57fa\u4e8e\u8fd9\u6837\u7684\u7406\u8bba\uff0c\u5c31\u4ea7\u751f\u4e86\u6ce8\u610f\u529b\u673a\u5236. \u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5b83\u9700\u8981\u4e09\u4e2a\u6307\u5b9a\u7684\u8f93\u5165Q(query), K(key), V(value), \u7136\u540e\u901a\u8fc7\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u6ce8\u610f\u529b\u7684\u7ed3\u679c, \u8fd9\u4e2a\u7ed3\u679c\u4ee3\u8868query\u5728key\u548cvalue\u4f5c\u7528\u4e0b\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5f53\u8f93\u5165\u7684Q=K=V\u65f6, \u79f0\u4f5c\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219. \u5e38\u89c1\u7684\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316\u540e\u518d\u4f7f\u7528tanh\u51fd\u6570\u6fc0\u6d3b, \u7136\u540e\u518d\u8fdb\u884c\u5185\u90e8\u6c42\u548c, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u518d\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\u4e0eK\u7684\u8f6c\u7f6e\u505a\u70b9\u79ef\u8fd0\u7b97, \u7136\u540e\u9664\u4ee5\u4e00\u4e2a\u7f29\u653e\u7cfb\u6570, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u8bf4\u660e\uff1a\u5f53\u6ce8\u610f\u529b\u6743\u91cd\u77e9\u9635\u548cV\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\u4e14\u7b2c\u4e00\u7ef4\u4ee3\u8868\u4e3abatch\u6761\u6570\u65f6, \u5219\u505abmm\u8fd0\u7b97.bmm\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5f20\u91cf\u4e58\u6cd5\u8fd0\u7b97. bmm\u8fd0\u7b97\u6f14\u793a: # \u5982\u679c\u53c2\u65701\u5f62\u72b6\u662f(b \u00d7 n \u00d7 m), \u53c2\u65702\u5f62\u72b6\u662f(b \u00d7 m \u00d7 p), \u5219\u8f93\u51fa\u4e3a(b \u00d7 n \u00d7 p) >>> input = torch.randn(10, 3, 4) >>> mat2 = torch.randn(10, 4, 5) >>> res = torch.bmm(input, mat2) >>> res.size() torch.Size([10, 3, 5]) \u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u673a\u5236: \u6ce8\u610f\u529b\u673a\u5236\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u80fd\u591f\u5e94\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u7684\u8f7d\u4f53, \u540c\u65f6\u5305\u62ec\u4e00\u4e9b\u5fc5\u8981\u7684\u5168\u8fde\u63a5\u5c42\u4ee5\u53ca\u76f8\u5173\u5f20\u91cf\u5904\u7406, \u4f7f\u5176\u4e0e\u5e94\u7528\u7f51\u7edc\u878d\u4e3a\u4e00\u4f53. \u4f7f\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u7684\u6ce8\u610f\u529b\u673a\u5236\u79f0\u4e3a\u81ea\u6ce8\u610f\u529b\u673a\u5236. \u8bf4\u660e: NLP\u9886\u57df\u4e2d, \u5f53\u524d\u7684\u6ce8\u610f\u529b\u673a\u5236\u5927\u591a\u6570\u5e94\u7528\u4e0eseq2seq\u67b6\u6784, \u5373\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u6a21\u578b. \u6ce8\u610f\u529b\u673a\u5236\u7684\u4f5c\u7528: \u5728\u89e3\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u80fd\u591f\u6839\u636e\u6a21\u578b\u76ee\u6807\u6709\u6548\u7684\u805a\u7126\u7f16\u7801\u5668\u7684\u8f93\u51fa\u7ed3\u679c, \u5f53\u5176\u4f5c\u4e3a\u89e3\u7801\u5668\u7684\u8f93\u5165\u65f6\u63d0\u5347\u6548\u679c. \u6539\u5584\u4ee5\u5f80\u7f16\u7801\u5668\u8f93\u51fa\u662f\u5355\u4e00\u5b9a\u957f\u5f20\u91cf, \u65e0\u6cd5\u5b58\u50a8\u8fc7\u591a\u4fe1\u606f\u7684\u60c5\u51b5. \u5728\u7f16\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u4e3b\u8981\u89e3\u51b3\u8868\u5f81\u95ee\u9898, \u76f8\u5f53\u4e8e\u7279\u5f81\u63d0\u53d6\u8fc7\u7a0b, \u5f97\u5230\u8f93\u5165\u7684\u6ce8\u610f\u529b\u8868\u793a. \u4e00\u822c\u4f7f\u7528\u81ea\u6ce8\u610f\u529b(self-attention). \u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u6839\u636e\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219, \u5bf9Q\uff0cK\uff0cV\u8fdb\u884c\u76f8\u5e94\u7684\u8ba1\u7b97. \u7b2c\u4e8c\u6b65: \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, \u5982\u679c\u662f\u62fc\u63a5\u65b9\u6cd5\uff0c\u5219\u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e8c\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5, \u5982\u679c\u662f\u8f6c\u7f6e\u70b9\u79ef, \u4e00\u822c\u662f\u81ea\u6ce8\u610f\u529b, Q\u4e0eV\u76f8\u540c, \u5219\u4e0d\u9700\u8981\u8fdb\u884c\u4e0eQ\u7684\u62fc\u63a5. \u7b2c\u4e09\u6b65: \u6700\u540e\u4e3a\u4e86\u4f7f\u6574\u4e2aattention\u673a\u5236\u6309\u7167\u6307\u5b9a\u5c3a\u5bf8\u8f93\u51fa, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e8c\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362, \u5f97\u5230\u6700\u7ec8\u5bf9Q\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5e38\u89c1\u6ce8\u610f\u529b\u673a\u5236\u7684\u4ee3\u7801\u5206\u6790: import torch import torch.nn as nn import torch.nn.functional as F class Attn ( nn . Module ): def __init__ ( self , query_size , key_size , value_size1 , value_size2 , output_size ): \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u67095\u4e2a, query_size\u4ee3\u8868query\u7684\u6700\u540e\u4e00\u7ef4\u5927\u5c0f key_size\u4ee3\u8868key\u7684\u6700\u540e\u4e00\u7ef4\u5927\u5c0f, value_size1\u4ee3\u8868value\u7684\u5bfc\u6570\u7b2c\u4e8c\u7ef4\u5927\u5c0f, value = (1, value_size1, value_size2) value_size2\u4ee3\u8868value\u7684\u5012\u6570\u7b2c\u4e00\u7ef4\u5927\u5c0f, output_size\u8f93\u51fa\u7684\u6700\u540e\u4e00\u7ef4\u5927\u5c0f\"\"\" super ( Attn , self ) . __init__ () # \u5c06\u4ee5\u4e0b\u53c2\u6570\u4f20\u5165\u7c7b\u4e2d self . query_size = query_size self . key_size = key_size self . value_size1 = value_size1 self . value_size2 = value_size2 self . output_size = output_size # \u521d\u59cb\u5316\u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u7b2c\u4e00\u6b65\u4e2d\u9700\u8981\u7684\u7ebf\u6027\u5c42. self . attn = nn . Linear ( self . query_size + self . key_size , value_size1 ) # \u521d\u59cb\u5316\u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u7b2c\u4e09\u6b65\u4e2d\u9700\u8981\u7684\u7ebf\u6027\u5c42. self . attn_combine = nn . Linear ( self . query_size + value_size2 , output_size ) def forward ( self , Q , K , V ): \"\"\"forward\u51fd\u6570\u7684\u8f93\u5165\u53c2\u6570\u6709\u4e09\u4e2a, \u5206\u522b\u662fQ, K, V, \u6839\u636e\u6a21\u578b\u8bad\u7ec3\u5e38\u8bc6, \u8f93\u5165\u7ed9Attion\u673a\u5236\u7684 \u5f20\u91cf\u4e00\u822c\u60c5\u51b5\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf, \u56e0\u6b64\u8fd9\u91cc\u4e5f\u5047\u8bbeQ, K, V\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\"\"\" # \u7b2c\u4e00\u6b65, \u6309\u7167\u8ba1\u7b97\u89c4\u5219\u8fdb\u884c\u8ba1\u7b97, # \u6211\u4eec\u91c7\u7528\u5e38\u89c1\u7684\u7b2c\u4e00\u79cd\u8ba1\u7b97\u89c4\u5219 # \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c attn_weights = F . softmax ( self . attn ( torch . cat (( Q [ 0 ], K [ 0 ]), 1 )), dim = 1 ) # \u7136\u540e\u8fdb\u884c\u7b2c\u4e00\u6b65\u7684\u540e\u534a\u90e8\u5206, \u5c06\u5f97\u5230\u7684\u6743\u91cd\u77e9\u9635\u4e0eV\u505a\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97, # \u5f53\u4e8c\u8005\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\u4e14\u7b2c\u4e00\u7ef4\u4ee3\u8868\u4e3abatch\u6761\u6570\u65f6, \u5219\u505abmm\u8fd0\u7b97 attn_applied = torch . bmm ( attn_weights . unsqueeze ( 0 ), V ) # \u4e4b\u540e\u8fdb\u884c\u7b2c\u4e8c\u6b65, \u901a\u8fc7\u53d6[0]\u662f\u7528\u6765\u964d\u7ef4, \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, # \u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e00\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5 output = torch . cat (( Q [ 0 ], attn_applied [ 0 ]), 1 ) # \u6700\u540e\u662f\u7b2c\u4e09\u6b65, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e09\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\u5e76\u6269\u5c55\u7ef4\u5ea6\uff0c\u5f97\u5230\u8f93\u51fa # \u56e0\u4e3a\u8981\u4fdd\u8bc1\u8f93\u51fa\u4e5f\u662f\u4e09\u7ef4\u5f20\u91cf, \u56e0\u6b64\u4f7f\u7528unsqueeze(0)\u6269\u5c55\u7ef4\u5ea6 output = self . attn_combine ( output ) . unsqueeze ( 0 ) return output , attn_weights \u8c03\u7528: query_size = 32 key_size = 32 value_size1 = 32 value_size2 = 64 output_size = 64 attn = Attn(query_size, key_size, value_size1, value_size2, output_size) Q = torch.randn(1,1,32) K = torch.randn(1,1,32) V = torch.randn(1,32,64) out = attn(Q, K ,V) print(out[0]) print(out[1]) \u8f93\u51fa\u6548\u679c: tensor([[[ 0.4477, -0.0500, -0.2277, -0.3168, -0.4096, -0.5982, 0.1548, -0.0771, -0.0951, 0.1833, 0.3128, 0.1260, 0.4420, 0.0495, -0.7774, -0.0995, 0.2629, 0.4957, 1.0922, 0.1428, 0.3024, -0.2646, -0.0265, 0.0632, 0.3951, 0.1583, 0.1130, 0.5500, -0.1887, -0.2816, -0.3800, -0.5741, 0.1342, 0.0244, -0.2217, 0.1544, 0.1865, -0.2019, 0.4090, -0.4762, 0.3677, -0.2553, -0.5199, 0.2290, -0.4407, 0.0663, -0.0182, -0.2168, 0.0913, -0.2340, 0.1924, -0.3687, 0.1508, 0.3618, -0.0113, 0.2864, -0.1929, -0.6821, 0.0951, 0.1335, 0.3560, -0.3215, 0.6461, 0.1532]]], grad_fn=<UnsqueezeBackward0>) tensor([[0.0395, 0.0342, 0.0200, 0.0471, 0.0177, 0.0209, 0.0244, 0.0465, 0.0346, 0.0378, 0.0282, 0.0214, 0.0135, 0.0419, 0.0926, 0.0123, 0.0177, 0.0187, 0.0166, 0.0225, 0.0234, 0.0284, 0.0151, 0.0239, 0.0132, 0.0439, 0.0507, 0.0419, 0.0352, 0.0392, 0.0546, 0.0224]], grad_fn=<SoftmaxBackward>) \u66f4\u591a\u6709\u5173\u6ce8\u610f\u529b\u673a\u5236\u7684\u5e94\u7528\u6211\u4eec\u5c06\u5728\u6848\u4f8b\u4e2d\u8fdb\u884c\u8be6\u5c3d\u7684\u7406\u89e3\u5206\u6790. \u5c0f\u8282\u603b\u7ed3: \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5b83\u9700\u8981\u4e09\u4e2a\u6307\u5b9a\u7684\u8f93\u5165Q(query), K(key), V(value), \u7136\u540e\u901a\u8fc7\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u6ce8\u610f\u529b\u7684\u7ed3\u679c, \u8fd9\u4e2a\u7ed3\u679c\u4ee3\u8868query\u5728key\u548cvalue\u4f5c\u7528\u4e0b\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5f53\u8f93\u5165\u7684Q=K=V\u65f6, \u79f0\u4f5c\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219. \u5e38\u89c1\u7684\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316\u540e\u518d\u4f7f\u7528tanh\u51fd\u6570\u6fc0\u6d3b, \u7136\u540e\u518d\u8fdb\u884c\u5185\u90e8\u6c42\u548c, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u518d\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\u4e0eK\u7684\u8f6c\u7f6e\u505a\u70b9\u79ef\u8fd0\u7b97, \u7136\u540e\u9664\u4ee5\u4e00\u4e2a\u7f29\u653e\u7cfb\u6570, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u673a\u5236: \u6ce8\u610f\u529b\u673a\u5236\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u80fd\u591f\u5e94\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u7684\u8f7d\u4f53, \u540c\u65f6\u5305\u62ec\u4e00\u4e9b\u5fc5\u8981\u7684\u5168\u8fde\u63a5\u5c42\u4ee5\u53ca\u76f8\u5173\u5f20\u91cf\u5904\u7406, \u4f7f\u5176\u4e0e\u5e94\u7528\u7f51\u7edc\u878d\u4e3a\u4e00\u4f53. \u4f7f\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u7684\u6ce8\u610f\u529b\u673a\u5236\u79f0\u4e3a\u81ea\u6ce8\u610f\u529b\u673a\u5236. \u6ce8\u610f\u529b\u673a\u5236\u7684\u4f5c\u7528: \u5728\u89e3\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u80fd\u591f\u6839\u636e\u6a21\u578b\u76ee\u6807\u6709\u6548\u7684\u805a\u7126\u7f16\u7801\u5668\u7684\u8f93\u51fa\u7ed3\u679c, \u5f53\u5176\u4f5c\u4e3a\u89e3\u7801\u5668\u7684\u8f93\u5165\u65f6\u63d0\u5347\u6548\u679c. \u6539\u5584\u4ee5\u5f80\u7f16\u7801\u5668\u8f93\u51fa\u662f\u5355\u4e00\u5b9a\u957f\u5f20\u91cf, \u65e0\u6cd5\u5b58\u50a8\u8fc7\u591a\u4fe1\u606f\u7684\u60c5\u51b5. \u5728\u7f16\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u4e3b\u8981\u89e3\u51b3\u8868\u5f81\u95ee\u9898, \u76f8\u5f53\u4e8e\u7279\u5f81\u63d0\u53d6\u8fc7\u7a0b, \u5f97\u5230\u8f93\u5165\u7684\u6ce8\u610f\u529b\u8868\u793a. \u4e00\u822c\u4f7f\u7528\u81ea\u6ce8\u610f\u529b(self-attention). \u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u6839\u636e\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219, \u5bf9Q\uff0cK\uff0cV\u8fdb\u884c\u76f8\u5e94\u7684\u8ba1\u7b97. \u7b2c\u4e8c\u6b65: \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, \u5982\u679c\u662f\u62fc\u63a5\u65b9\u6cd5\uff0c\u5219\u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e8c\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5, \u5982\u679c\u662f\u8f6c\u7f6e\u70b9\u79ef, \u4e00\u822c\u662f\u81ea\u6ce8\u610f\u529b, Q\u4e0eV\u76f8\u540c, \u5219\u4e0d\u9700\u8981\u8fdb\u884c\u4e0eQ\u7684\u62fc\u63a5. \u7b2c\u4e09\u6b65: \u6700\u540e\u4e3a\u4e86\u4f7f\u6574\u4e2aattention\u673a\u5236\u6309\u7167\u6307\u5b9a\u5c3a\u5bf8\u8f93\u51fa, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e8c\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362, \u5f97\u5230\u6700\u7ec8\u5bf9Q\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5b66\u4e60\u5e76\u5b9e\u73b0\u4e86\u4e00\u79cd\u5e38\u89c1\u7684\u6ce8\u610f\u529b\u673a\u5236\u7684\u7c7bAttn.","title":"1.5 \u6ce8\u610f\u529b\u673a\u5236"},{"location":"1.html","text":"1.1 \u8ba4\u8bc6RNN\u6a21\u578b \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u4ec0\u4e48\u662fRNN\u6a21\u578b. \u4e86\u89e3RNN\u6a21\u578b\u7684\u4f5c\u7528. \u4e86\u89e3RNN\u6a21\u578b\u7684\u5206\u7c7b. \u4ec0\u4e48\u662fRNN\u6a21\u578b RNN(Recurrent Neural Network), \u4e2d\u6587\u79f0\u4f5c\u5faa\u73af\u795e\u7ecf\u7f51\u7edc, \u5b83\u4e00\u822c\u4ee5\u5e8f\u5217\u6570\u636e\u4e3a\u8f93\u5165, \u901a\u8fc7\u7f51\u7edc\u5185\u90e8\u7684\u7ed3\u6784\u8bbe\u8ba1\u6709\u6548\u6355\u6349\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb\u7279\u5f81, \u4e00\u822c\u4e5f\u662f\u4ee5\u5e8f\u5217\u5f62\u5f0f\u8fdb\u884c\u8f93\u51fa. \u4e00\u822c\u5355\u5c42\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784: RNN\u5355\u5c42\u7f51\u7edc\u7ed3\u6784: \u4ee5\u65f6\u95f4\u6b65\u5bf9RNN\u8fdb\u884c\u5c55\u5f00\u540e\u7684\u5355\u5c42\u7f51\u7edc\u7ed3\u6784: RNN\u7684\u5faa\u73af\u673a\u5236\u4f7f\u6a21\u578b\u9690\u5c42\u4e0a\u4e00\u65f6\u95f4\u6b65\u4ea7\u751f\u7684\u7ed3\u679c, \u80fd\u591f\u4f5c\u4e3a\u5f53\u4e0b\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206(\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u9664\u4e86\u6b63\u5e38\u7684\u8f93\u5165\u5916\u8fd8\u5305\u62ec\u4e0a\u4e00\u6b65\u7684\u9690\u5c42\u8f93\u51fa)\u5bf9\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u4ea7\u751f\u5f71\u54cd. RNN\u6a21\u578b\u7684\u4f5c\u7528 \u56e0\u4e3aRNN\u7ed3\u6784\u80fd\u591f\u5f88\u597d\u5229\u7528\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb, \u56e0\u6b64\u9488\u5bf9\u81ea\u7136\u754c\u5177\u6709\u8fde\u7eed\u6027\u7684\u8f93\u5165\u5e8f\u5217, \u5982\u4eba\u7c7b\u7684\u8bed\u8a00, \u8bed\u97f3\u7b49\u8fdb\u884c\u5f88\u597d\u7684\u5904\u7406, \u5e7f\u6cdb\u5e94\u7528\u4e8eNLP\u9886\u57df\u7684\u5404\u9879\u4efb\u52a1, \u5982\u6587\u672c\u5206\u7c7b, \u60c5\u611f\u5206\u6790, \u610f\u56fe\u8bc6\u522b, \u673a\u5668\u7ffb\u8bd1\u7b49. \u4e0b\u9762\u6211\u4eec\u5c06\u4ee5\u4e00\u4e2a\u7528\u6237\u610f\u56fe\u8bc6\u522b\u7684\u4f8b\u5b50\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790: \u7b2c\u4e00\u6b65: \u7528\u6237\u8f93\u5165\u4e86\"What time is it ?\", \u6211\u4eec\u9996\u5148\u9700\u8981\u5bf9\u5b83\u8fdb\u884c\u57fa\u672c\u7684\u5206\u8bcd, \u56e0\u4e3aRNN\u662f\u6309\u7167\u987a\u5e8f\u5de5\u4f5c\u7684, \u6bcf\u6b21\u53ea\u63a5\u6536\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5904\u7406. \u7b2c\u4e8c\u6b65: \u9996\u5148\u5c06\u5355\u8bcd\"What\"\u8f93\u9001\u7ed9RNN, \u5b83\u5c06\u4ea7\u751f\u4e00\u4e2a\u8f93\u51faO1. \u7b2c\u4e09\u6b65: \u7ee7\u7eed\u5c06\u5355\u8bcd\"time\"\u8f93\u9001\u7ed9RNN, \u4f46\u6b64\u65f6RNN\u4e0d\u4ec5\u4ec5\u5229\u7528\"time\"\u6765\u4ea7\u751f\u8f93\u51faO2, \u8fd8\u4f1a\u4f7f\u7528\u6765\u81ea\u4e0a\u4e00\u5c42\u9690\u5c42\u8f93\u51faO1\u4f5c\u4e3a\u8f93\u5165\u4fe1\u606f. \u7b2c\u56db\u6b65: \u91cd\u590d\u8fd9\u6837\u7684\u6b65\u9aa4, \u76f4\u5230\u5904\u7406\u5b8c\u6240\u6709\u7684\u5355\u8bcd. \u7b2c\u4e94\u6b65: \u6700\u540e\uff0c\u5c06\u6700\u7ec8\u7684\u9690\u5c42\u8f93\u51faO5\u8fdb\u884c\u5904\u7406\u6765\u89e3\u6790\u7528\u6237\u610f\u56fe. RNN\u6a21\u578b\u7684\u5206\u7c7b \u8fd9\u91cc\u6211\u4eec\u5c06\u4ece\u4e24\u4e2a\u89d2\u5ea6\u5bf9RNN\u6a21\u578b\u8fdb\u884c\u5206\u7c7b. \u7b2c\u4e00\u4e2a\u89d2\u5ea6\u662f\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784, \u7b2c\u4e8c\u4e2a\u89d2\u5ea6\u662fRNN\u7684\u5185\u90e8\u6784\u9020. \u6309\u7167\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784\u8fdb\u884c\u5206\u7c7b: N vs N - RNN N vs 1 - RNN 1 vs N - RNN N vs M - RNN \u6309\u7167RNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b: \u4f20\u7edfRNN LSTM Bi-LSTM GRU Bi-GRU N vs N - RNN: \u5b83\u662fRNN\u6700\u57fa\u7840\u7684\u7ed3\u6784\u5f62\u5f0f, \u6700\u5927\u7684\u7279\u70b9\u5c31\u662f: \u8f93\u5165\u548c\u8f93\u51fa\u5e8f\u5217\u662f\u7b49\u957f\u7684. \u7531\u4e8e\u8fd9\u4e2a\u9650\u5236\u7684\u5b58\u5728, \u4f7f\u5176\u9002\u7528\u8303\u56f4\u6bd4\u8f83\u5c0f, \u53ef\u7528\u4e8e\u751f\u6210\u7b49\u957f\u5ea6\u7684\u5408\u8f99\u8bd7\u53e5. N vs 1 - RNN: \u6709\u65f6\u5019\u6211\u4eec\u8981\u5904\u7406\u7684\u95ee\u9898\u8f93\u5165\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u800c\u8981\u6c42\u8f93\u51fa\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u800c\u4e0d\u662f\u5e8f\u5217\uff0c\u5e94\u8be5\u600e\u6837\u5efa\u6a21\u5462\uff1f\u6211\u4eec\u53ea\u8981\u5728\u6700\u540e\u4e00\u4e2a\u9690\u5c42\u8f93\u51fah\u4e0a\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\u5c31\u53ef\u4ee5\u4e86\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u66f4\u597d\u7684\u660e\u786e\u7ed3\u679c, \u8fd8\u8981\u4f7f\u7528sigmoid\u6216\u8005softmax\u8fdb\u884c\u5904\u7406. \u8fd9\u79cd\u7ed3\u6784\u7ecf\u5e38\u88ab\u5e94\u7528\u5728\u6587\u672c\u5206\u7c7b\u95ee\u9898\u4e0a. 1 vs N - RNN: \u5982\u679c\u8f93\u5165\u4e0d\u662f\u5e8f\u5217\u800c\u8f93\u51fa\u4e3a\u5e8f\u5217\u7684\u60c5\u51b5\u600e\u4e48\u5904\u7406\u5462\uff1f\u6211\u4eec\u6700\u5e38\u91c7\u7528\u7684\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u4f7f\u8be5\u8f93\u5165\u4f5c\u7528\u4e8e\u6bcf\u6b21\u7684\u8f93\u51fa\u4e4b\u4e0a. \u8fd9\u79cd\u7ed3\u6784\u53ef\u7528\u4e8e\u5c06\u56fe\u7247\u751f\u6210\u6587\u5b57\u4efb\u52a1\u7b49. N vs M - RNN: \u8fd9\u662f\u4e00\u79cd\u4e0d\u9650\u8f93\u5165\u8f93\u51fa\u957f\u5ea6\u7684RNN\u7ed3\u6784, \u5b83\u7531\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u4e24\u90e8\u5206\u7ec4\u6210, \u4e24\u8005\u7684\u5185\u90e8\u7ed3\u6784\u90fd\u662f\u67d0\u7c7bRNN, \u5b83\u4e5f\u88ab\u79f0\u4e3aseq2seq\u67b6\u6784. \u8f93\u5165\u6570\u636e\u9996\u5148\u901a\u8fc7\u7f16\u7801\u5668, \u6700\u7ec8\u8f93\u51fa\u4e00\u4e2a\u9690\u542b\u53d8\u91cfc, \u4e4b\u540e\u6700\u5e38\u7528\u7684\u505a\u6cd5\u662f\u4f7f\u7528\u8fd9\u4e2a\u9690\u542b\u53d8\u91cfc\u4f5c\u7528\u5728\u89e3\u7801\u5668\u8fdb\u884c\u89e3\u7801\u7684\u6bcf\u4e00\u6b65\u4e0a, \u4ee5\u4fdd\u8bc1\u8f93\u5165\u4fe1\u606f\u88ab\u6709\u6548\u5229\u7528. seq2seq\u67b6\u6784\u6700\u65e9\u88ab\u63d0\u51fa\u5e94\u7528\u4e8e\u673a\u5668\u7ffb\u8bd1, \u56e0\u4e3a\u5176\u8f93\u5165\u8f93\u51fa\u4e0d\u53d7\u9650\u5236\uff0c\u5982\u4eca\u4e5f\u662f\u5e94\u7528\u6700\u5e7f\u7684RNN\u6a21\u578b\u7ed3\u6784. \u5728\u673a\u5668\u7ffb\u8bd1, \u9605\u8bfb\u7406\u89e3, \u6587\u672c\u6458\u8981\u7b49\u4f17\u591a\u9886\u57df\u90fd\u8fdb\u884c\u4e86\u975e\u5e38\u591a\u7684\u5e94\u7528\u5b9e\u8df5. \u5173\u4e8eRNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b\u7684\u5185\u5bb9\u6211\u4eec\u5c06\u5728\u540e\u9762\u4f7f\u7528\u5355\u72ec\u7684\u5c0f\u8282\u8be6\u7ec6\u8bb2\u89e3. \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u4ec0\u4e48\u662fRNN\u6a21\u578b: RNN(Recurrent Neural Network), \u4e2d\u6587\u79f0\u4f5c\u5faa\u73af\u795e\u7ecf\u7f51\u7edc, \u5b83\u4e00\u822c\u4ee5\u5e8f\u5217\u6570\u636e\u4e3a\u8f93\u5165, \u901a\u8fc7\u7f51\u7edc\u5185\u90e8\u7684\u7ed3\u6784\u8bbe\u8ba1\u6709\u6548\u6355\u6349\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb\u7279\u5f81, \u4e00\u822c\u4e5f\u662f\u4ee5\u5e8f\u5217\u5f62\u5f0f\u8fdb\u884c\u8f93\u51fa. RNN\u7684\u5faa\u73af\u673a\u5236\u4f7f\u6a21\u578b\u9690\u5c42\u4e0a\u4e00\u65f6\u95f4\u6b65\u4ea7\u751f\u7684\u7ed3\u679c, \u80fd\u591f\u4f5c\u4e3a\u5f53\u4e0b\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206(\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u9664\u4e86\u6b63\u5e38\u7684\u8f93\u5165\u5916\u8fd8\u5305\u62ec\u4e0a\u4e00\u6b65\u7684\u9690\u5c42\u8f93\u51fa)\u5bf9\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u4ea7\u751f\u5f71\u54cd. \u5b66\u4e60\u4e86RNN\u6a21\u578b\u7684\u4f5c\u7528: \u56e0\u4e3aRNN\u7ed3\u6784\u80fd\u591f\u5f88\u597d\u5229\u7528\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb, \u56e0\u6b64\u9488\u5bf9\u81ea\u7136\u754c\u5177\u6709\u8fde\u7eed\u6027\u7684\u8f93\u5165\u5e8f\u5217, \u5982\u4eba\u7c7b\u7684\u8bed\u8a00, \u8bed\u97f3\u7b49\u8fdb\u884c\u5f88\u597d\u7684\u5904\u7406, \u5e7f\u6cdb\u5e94\u7528\u4e8eNLP\u9886\u57df\u7684\u5404\u9879\u4efb\u52a1, \u5982\u6587\u672c\u5206\u7c7b, \u60c5\u611f\u5206\u6790, \u610f\u56fe\u8bc6\u522b, \u673a\u5668\u7ffb\u8bd1\u7b49. \u4ee5\u4e00\u4e2a\u7528\u6237\u610f\u56fe\u8bc6\u522b\u7684\u4f8b\u5b50\u5bf9RNN\u7684\u8fd0\u884c\u8fc7\u7a0b\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790: \u7b2c\u4e00\u6b65: \u7528\u6237\u8f93\u5165\u4e86\"What time is it ?\", \u6211\u4eec\u9996\u5148\u9700\u8981\u5bf9\u5b83\u8fdb\u884c\u57fa\u672c\u7684\u5206\u8bcd, \u56e0\u4e3aRNN\u662f\u6309\u7167\u987a\u5e8f\u5de5\u4f5c\u7684, \u6bcf\u6b21\u53ea\u63a5\u6536\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5904\u7406. \u7b2c\u4e8c\u6b65: \u9996\u5148\u5c06\u5355\u8bcd\"What\"\u8f93\u9001\u7ed9RNN, \u5b83\u5c06\u4ea7\u751f\u4e00\u4e2a\u8f93\u51faO1. \u7b2c\u4e09\u6b65: \u7ee7\u7eed\u5c06\u5355\u8bcd\"time\"\u8f93\u9001\u7ed9RNN, \u4f46\u6b64\u65f6RNN\u4e0d\u4ec5\u4ec5\u5229\u7528\"time\"\u6765\u4ea7\u751f\u8f93\u51faO2, \u8fd8\u4f1a\u4f7f\u7528\u6765\u81ea\u4e0a\u4e00\u5c42\u9690\u5c42\u8f93\u51faO1\u4f5c\u4e3a\u8f93\u5165\u4fe1\u606f. \u7b2c\u56db\u6b65: \u91cd\u590d\u8fd9\u6837\u7684\u6b65\u9aa4, \u76f4\u5230\u5904\u7406\u5b8c\u6240\u6709\u7684\u5355\u8bcd. \u7b2c\u4e94\u6b65: \u6700\u540e\uff0c\u5c06\u6700\u7ec8\u7684\u9690\u5c42\u8f93\u51faO5\u8fdb\u884c\u5904\u7406\u6765\u89e3\u6790\u7528\u6237\u610f\u56fe. \u5b66\u4e60\u4e86RNN\u6a21\u578b\u7684\u5206\u7c7b: \u8fd9\u91cc\u6211\u4eec\u5c06\u4ece\u4e24\u4e2a\u89d2\u5ea6\u5bf9RNN\u6a21\u578b\u8fdb\u884c\u5206\u7c7b. \u7b2c\u4e00\u4e2a\u89d2\u5ea6\u662f\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784, \u7b2c\u4e8c\u4e2a\u89d2\u5ea6\u662fRNN\u7684\u5185\u90e8\u6784\u9020. \u6309\u7167\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784\u8fdb\u884c\u5206\u7c7b: N vs N - RNN N vs 1 - RNN 1 vs N - RNN N vs M - RNN N vs N - RNN: \u5b83\u662fRNN\u6700\u57fa\u7840\u7684\u7ed3\u6784\u5f62\u5f0f, \u6700\u5927\u7684\u7279\u70b9\u5c31\u662f: \u8f93\u5165\u548c\u8f93\u51fa\u5e8f\u5217\u662f\u7b49\u957f\u7684. \u7531\u4e8e\u8fd9\u4e2a\u9650\u5236\u7684\u5b58\u5728, \u4f7f\u5176\u9002\u7528\u8303\u56f4\u6bd4\u8f83\u5c0f, \u53ef\u7528\u4e8e\u751f\u6210\u7b49\u957f\u5ea6\u7684\u5408\u8f99\u8bd7\u53e5. N vs 1 - RNN: \u6709\u65f6\u5019\u6211\u4eec\u8981\u5904\u7406\u7684\u95ee\u9898\u8f93\u5165\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u800c\u8981\u6c42\u8f93\u51fa\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u800c\u4e0d\u662f\u5e8f\u5217\uff0c\u5e94\u8be5\u600e\u6837\u5efa\u6a21\u5462\uff1f\u6211\u4eec\u53ea\u8981\u5728\u6700\u540e\u4e00\u4e2a\u9690\u5c42\u8f93\u51fah\u4e0a\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\u5c31\u53ef\u4ee5\u4e86\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u66f4\u597d\u7684\u660e\u786e\u7ed3\u679c, \u8fd8\u8981\u4f7f\u7528sigmoid\u6216\u8005softmax\u8fdb\u884c\u5904\u7406. \u8fd9\u79cd\u7ed3\u6784\u7ecf\u5e38\u88ab\u5e94\u7528\u5728\u6587\u672c\u5206\u7c7b\u95ee\u9898\u4e0a. 1 vs N - RNN: \u5982\u679c\u8f93\u5165\u4e0d\u662f\u5e8f\u5217\u800c\u8f93\u51fa\u4e3a\u5e8f\u5217\u7684\u60c5\u51b5\u600e\u4e48\u5904\u7406\u5462\uff1f\u6211\u4eec\u6700\u5e38\u91c7\u7528\u7684\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u4f7f\u8be5\u8f93\u5165\u4f5c\u7528\u4e8e\u6bcf\u6b21\u7684\u8f93\u51fa\u4e4b\u4e0a. \u8fd9\u79cd\u7ed3\u6784\u53ef\u7528\u4e8e\u5c06\u56fe\u7247\u751f\u6210\u6587\u5b57\u4efb\u52a1\u7b49. N vs M - RNN: \u8fd9\u662f\u4e00\u79cd\u4e0d\u9650\u8f93\u5165\u8f93\u51fa\u957f\u5ea6\u7684RNN\u7ed3\u6784, \u5b83\u7531\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u4e24\u90e8\u5206\u7ec4\u6210, \u4e24\u8005\u7684\u5185\u90e8\u7ed3\u6784\u90fd\u662f\u67d0\u7c7bRNN, \u5b83\u4e5f\u88ab\u79f0\u4e3aseq2seq\u67b6\u6784. \u8f93\u5165\u6570\u636e\u9996\u5148\u901a\u8fc7\u7f16\u7801\u5668, \u6700\u7ec8\u8f93\u51fa\u4e00\u4e2a\u9690\u542b\u53d8\u91cfc, \u4e4b\u540e\u6700\u5e38\u7528\u7684\u505a\u6cd5\u662f\u4f7f\u7528\u8fd9\u4e2a\u9690\u542b\u53d8\u91cfc\u4f5c\u7528\u5728\u89e3\u7801\u5668\u8fdb\u884c\u89e3\u7801\u7684\u6bcf\u4e00\u6b65\u4e0a, \u4ee5\u4fdd\u8bc1\u8f93\u5165\u4fe1\u606f\u88ab\u6709\u6548\u5229\u7528. seq2seq\u67b6\u6784\u6700\u65e9\u88ab\u63d0\u51fa\u5e94\u7528\u4e8e\u673a\u5668\u7ffb\u8bd1, \u56e0\u4e3a\u5176\u8f93\u5165\u8f93\u51fa\u4e0d\u53d7\u9650\u5236\uff0c\u5982\u4eca\u4e5f\u662f\u5e94\u7528\u6700\u5e7f\u7684RNN\u6a21\u578b\u7ed3\u6784. \u5728\u673a\u5668\u7ffb\u8bd1, \u9605\u8bfb\u7406\u89e3, \u6587\u672c\u6458\u8981\u7b49\u4f17\u591a\u9886\u57df\u90fd\u8fdb\u884c\u4e86\u975e\u5e38\u591a\u7684\u5e94\u7528\u5b9e\u8df5. \u6309\u7167RNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b: \u4f20\u7edfRNN LSTM Bi-LSTM GRU Bi-GRU \u5173\u4e8eRNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b\u7684\u5185\u5bb9\u6211\u4eec\u5c06\u5728\u540e\u9762\u4f7f\u7528\u5355\u72ec\u7684\u5c0f\u8282\u8be6\u7ec6\u8bb2\u89e3. 1.2 \u4f20\u7edfRNN\u6a21\u578b \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f. \u638c\u63e1Pytorch\u4e2d\u4f20\u7edfRNN\u5de5\u5177\u7684\u4f7f\u7528. \u4e86\u89e3\u4f20\u7edfRNN\u7684\u4f18\u52bf\u4e0e\u7f3a\u70b9. \u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u56fe \u7ed3\u6784\u89e3\u91ca\u56fe: \u5185\u90e8\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u628a\u76ee\u5149\u96c6\u4e2d\u5728\u4e2d\u95f4\u7684\u65b9\u5757\u90e8\u5206, \u5b83\u7684\u8f93\u5165\u6709\u4e24\u90e8\u5206, \u5206\u522b\u662fh(t-1)\u4ee5\u53cax(t), \u4ee3\u8868\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684\u9690\u5c42\u8f93\u51fa, \u4ee5\u53ca\u6b64\u65f6\u95f4\u6b65\u7684\u8f93\u5165, \u5b83\u4eec\u8fdb\u5165RNN\u7ed3\u6784\u4f53\u540e, \u4f1a\"\u878d\u5408\"\u5230\u4e00\u8d77, \u8fd9\u79cd\u878d\u5408\u6211\u4eec\u6839\u636e\u7ed3\u6784\u89e3\u91ca\u53ef\u77e5, \u662f\u5c06\u4e8c\u8005\u8fdb\u884c\u62fc\u63a5, \u5f62\u6210\u65b0\u7684\u5f20\u91cf[x(t), h(t-1)], \u4e4b\u540e\u8fd9\u4e2a\u65b0\u7684\u5f20\u91cf\u5c06\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42(\u7ebf\u6027\u5c42), \u8be5\u5c42\u4f7f\u7528tanh\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570, \u6700\u7ec8\u5f97\u5230\u8be5\u65f6\u95f4\u6b65\u7684\u8f93\u51fah(t), \u5b83\u5c06\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u548cx(t+1)\u4e00\u8d77\u8fdb\u5165\u7ed3\u6784\u4f53. \u4ee5\u6b64\u7c7b\u63a8. \u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u6839\u636e\u7ed3\u6784\u5206\u6790\u5f97\u51fa\u5185\u90e8\u8ba1\u7b97\u516c\u5f0f: \u6fc0\u6d3b\u51fd\u6570tanh\u7684\u4f5c\u7528: \u7528\u4e8e\u5e2e\u52a9\u8c03\u8282\u6d41\u7ecf\u7f51\u7edc\u7684\u503c, tanh\u51fd\u6570\u5c06\u503c\u538b\u7f29\u5728-1\u548c1\u4e4b\u95f4. Pytorch\u4e2d\u4f20\u7edfRNN\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.RNN\u53ef\u8c03\u7528. nn.RNN\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. nonlinearity: \u6fc0\u6d3b\u51fd\u6570\u7684\u9009\u62e9, \u9ed8\u8ba4\u662ftanh. nn.RNN\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. nn.RNN\u4f7f\u7528\u793a\u4f8b: # \u5bfc\u5165\u5de5\u5177\u5305 >>> import torch >>> import torch.nn as nn >>> rnn = nn . RNN ( 5 , 6 , 1 ) >>> input = torch . randn ( 1 , 3 , 5 ) >>> h0 = torch . randn ( 1 , 3 , 6 ) >>> output , hn = rnn ( input , h0 ) >>> output tensor ([[[ 0.4282 , - 0.8475 , - 0.0685 , - 0.4601 , - 0.8357 , 0.1252 ], [ 0.5758 , - 0.2823 , 0.4822 , - 0.4485 , - 0.7362 , 0.0084 ], [ 0.9224 , - 0.7479 , - 0.3682 , - 0.5662 , - 0.9637 , 0.4938 ]]], grad_fn =< StackBackward > ) >>> hn tensor ([[[ 0.4282 , - 0.8475 , - 0.0685 , - 0.4601 , - 0.8357 , 0.1252 ], [ 0.5758 , - 0.2823 , 0.4822 , - 0.4485 , - 0.7362 , 0.0084 ], [ 0.9224 , - 0.7479 , - 0.3682 , - 0.5662 , - 0.9637 , 0.4938 ]]], grad_fn =< StackBackward > ) \u4f20\u7edfRNN\u7684\u4f18\u52bf: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u7b80\u5355, \u5bf9\u8ba1\u7b97\u8d44\u6e90\u8981\u6c42\u4f4e, \u76f8\u6bd4\u4e4b\u540e\u6211\u4eec\u8981\u5b66\u4e60\u7684RNN\u53d8\u4f53:LSTM\u548cGRU\u6a21\u578b\u53c2\u6570\u603b\u91cf\u5c11\u4e86\u5f88\u591a, \u5728\u77ed\u5e8f\u5217\u4efb\u52a1\u4e0a\u6027\u80fd\u548c\u6548\u679c\u90fd\u8868\u73b0\u4f18\u5f02. \u4f20\u7edfRNN\u7684\u7f3a\u70b9: \u4f20\u7edfRNN\u5728\u89e3\u51b3\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u8054\u65f6, \u901a\u8fc7\u5b9e\u8df5\uff0c\u8bc1\u660e\u7ecf\u5178RNN\u8868\u73b0\u5f88\u5dee, \u539f\u56e0\u662f\u5728\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u7684\u65f6\u5019, \u8fc7\u957f\u7684\u5e8f\u5217\u5bfc\u81f4\u68af\u5ea6\u7684\u8ba1\u7b97\u5f02\u5e38, \u53d1\u751f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8. \u4ec0\u4e48\u662f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u5462\uff1f \u6839\u636e\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u548c\u94fe\u5f0f\u6cd5\u5219, \u68af\u5ea6\u7684\u8ba1\u7b97\u53ef\u4ee5\u7b80\u5316\u4e3a\u4ee5\u4e0b\u516c\u5f0f: \u5176\u4e2dsigmoid\u7684\u5bfc\u6570\u503c\u57df\u662f\u56fa\u5b9a\u7684, \u5728[0, 0.25]\u4e4b\u95f4, \u800c\u4e00\u65e6\u516c\u5f0f\u4e2d\u7684w\u4e5f\u5c0f\u4e8e1, \u90a3\u4e48\u901a\u8fc7\u8fd9\u6837\u7684\u516c\u5f0f\u8fde\u4e58\u540e, \u6700\u7ec8\u7684\u68af\u5ea6\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u975e\u5e38\u5c0f, \u8fd9\u79cd\u73b0\u8c61\u79f0\u4f5c\u68af\u5ea6\u6d88\u5931. \u53cd\u4e4b, \u5982\u679c\u6211\u4eec\u4eba\u4e3a\u7684\u589e\u5927w\u7684\u503c, \u4f7f\u5176\u5927\u4e8e1, \u90a3\u4e48\u8fde\u4e58\u591f\u5c31\u53ef\u80fd\u9020\u6210\u68af\u5ea6\u8fc7\u5927, \u79f0\u4f5c\u68af\u5ea6\u7206\u70b8. \u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u7684\u5371\u5bb3: \u5982\u679c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u68af\u5ea6\u6d88\u5931\uff0c\u6743\u91cd\u65e0\u6cd5\u88ab\u66f4\u65b0\uff0c\u6700\u7ec8\u5bfc\u81f4\u8bad\u7ec3\u5931\u8d25; \u68af\u5ea6\u7206\u70b8\u6240\u5e26\u6765\u7684\u68af\u5ea6\u8fc7\u5927\uff0c\u5927\u5e45\u5ea6\u66f4\u65b0\u7f51\u7edc\u53c2\u6570\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u4f1a\u6ea2\u51fa\uff08NaN\u503c\uff09. \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u4f20\u7edfRNN\u7684\u7ed3\u6784\u5e76\u8fdb\u884c\u4e86\u5206\u6790; \u5b83\u7684\u8f93\u5165\u6709\u4e24\u90e8\u5206, \u5206\u522b\u662fh(t-1)\u4ee5\u53cax(t), \u4ee3\u8868\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684\u9690\u5c42\u8f93\u51fa, \u4ee5\u53ca\u6b64\u65f6\u95f4\u6b65\u7684\u8f93\u5165, \u5b83\u4eec\u8fdb\u5165RNN\u7ed3\u6784\u4f53\u540e, \u4f1a\"\u878d\u5408\"\u5230\u4e00\u8d77, \u8fd9\u79cd\u878d\u5408\u6211\u4eec\u6839\u636e\u7ed3\u6784\u89e3\u91ca\u53ef\u77e5, \u662f\u5c06\u4e8c\u8005\u8fdb\u884c\u62fc\u63a5, \u5f62\u6210\u65b0\u7684\u5f20\u91cf[x(t), h(t-1)], \u4e4b\u540e\u8fd9\u4e2a\u65b0\u7684\u5f20\u91cf\u5c06\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42(\u7ebf\u6027\u5c42), \u8be5\u5c42\u4f7f\u7528tanh\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570, \u6700\u7ec8\u5f97\u5230\u8be5\u65f6\u95f4\u6b65\u7684\u8f93\u51fah(t), \u5b83\u5c06\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u548cx(t+1)\u4e00\u8d77\u8fdb\u5165\u7ed3\u6784\u4f53. \u4ee5\u6b64\u7c7b\u63a8. \u6839\u636e\u7ed3\u6784\u5206\u6790\u5f97\u51fa\u4e86\u4f20\u7edfRNN\u7684\u8ba1\u7b97\u516c\u5f0f. \u5b66\u4e60\u4e86\u6fc0\u6d3b\u51fd\u6570tanh\u7684\u4f5c\u7528: \u7528\u4e8e\u5e2e\u52a9\u8c03\u8282\u6d41\u7ecf\u7f51\u7edc\u7684\u503c, tanh\u51fd\u6570\u5c06\u503c\u538b\u7f29\u5728-1\u548c1\u4e4b\u95f4. \u5b66\u4e60\u4e86Pytorch\u4e2d\u4f20\u7edfRNN\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.RNN\u53ef\u8c03\u7528. nn.RNN\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. nonlinearity: \u6fc0\u6d3b\u51fd\u6570\u7684\u9009\u62e9, \u9ed8\u8ba4\u662ftanh. nn.RNN\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. \u5b9e\u73b0\u4e86nn.RNN\u7684\u4f7f\u7528\u793a\u4f8b, \u83b7\u5f97RNN\u7684\u771f\u5b9e\u8fd4\u56de\u7ed3\u679c\u6837\u5f0f. \u5b66\u4e60\u4e86\u4f20\u7edfRNN\u7684\u4f18\u52bf: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u7b80\u5355, \u5bf9\u8ba1\u7b97\u8d44\u6e90\u8981\u6c42\u4f4e, \u76f8\u6bd4\u4e4b\u540e\u6211\u4eec\u8981\u5b66\u4e60\u7684RNN\u53d8\u4f53:LSTM\u548cGRU\u6a21\u578b\u53c2\u6570\u603b\u91cf\u5c11\u4e86\u5f88\u591a, \u5728\u77ed\u5e8f\u5217\u4efb\u52a1\u4e0a\u6027\u80fd\u548c\u6548\u679c\u90fd\u8868\u73b0\u4f18\u5f02. \u5b66\u4e60\u4e86\u4f20\u7edfRNN\u7684\u7f3a\u70b9: \u4f20\u7edfRNN\u5728\u89e3\u51b3\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u8054\u65f6, \u901a\u8fc7\u5b9e\u8df5\uff0c\u8bc1\u660e\u7ecf\u5178RNN\u8868\u73b0\u5f88\u5dee, \u539f\u56e0\u662f\u5728\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u7684\u65f6\u5019, \u8fc7\u957f\u7684\u5e8f\u5217\u5bfc\u81f4\u68af\u5ea6\u7684\u8ba1\u7b97\u5f02\u5e38, \u53d1\u751f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8. \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8: \u6839\u636e\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u548c\u94fe\u5f0f\u6cd5\u5219, \u5f97\u5230\u68af\u5ea6\u7684\u8ba1\u7b97\u7684\u7b80\u5316\u516c\u5f0f:\u5176\u4e2dsigmoid\u7684\u5bfc\u6570\u503c\u57df\u662f\u56fa\u5b9a\u7684, \u5728[0, 0.25]\u4e4b\u95f4, \u800c\u4e00\u65e6\u516c\u5f0f\u4e2d\u7684w\u4e5f\u5c0f\u4e8e1, \u90a3\u4e48\u901a\u8fc7\u8fd9\u6837\u7684\u516c\u5f0f\u8fde\u4e58\u540e, \u6700\u7ec8\u7684\u68af\u5ea6\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u975e\u5e38\u5c0f, \u8fd9\u79cd\u73b0\u8c61\u79f0\u4f5c\u68af\u5ea6\u6d88\u5931. \u53cd\u4e4b, \u5982\u679c\u6211\u4eec\u4eba\u4e3a\u7684\u589e\u5927w\u7684\u503c, \u4f7f\u5176\u5927\u4e8e1, \u90a3\u4e48\u8fde\u4e58\u591f\u5c31\u53ef\u80fd\u9020\u6210\u68af\u5ea6\u8fc7\u5927, \u79f0\u4f5c\u68af\u5ea6\u7206\u70b8. \u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u7684\u5371\u5bb3: \u5982\u679c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u68af\u5ea6\u6d88\u5931\uff0c\u6743\u91cd\u65e0\u6cd5\u88ab\u66f4\u65b0\uff0c\u6700\u7ec8\u5bfc\u81f4\u8bad\u7ec3\u5931\u8d25; \u68af\u5ea6\u7206\u70b8\u6240\u5e26\u6765\u7684\u68af\u5ea6\u8fc7\u5927\uff0c\u5927\u5e45\u5ea6\u66f4\u65b0\u7f51\u7edc\u53c2\u6570\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u4f1a\u6ea2\u51fa\uff08NaN\u503c\uff09. 1.3 LSTM\u6a21\u578b \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3LSTM\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f. \u638c\u63e1Pytorch\u4e2dLSTM\u5de5\u5177\u7684\u4f7f\u7528. \u4e86\u89e3LSTM\u7684\u4f18\u52bf\u4e0e\u7f3a\u70b9. LSTM\uff08Long Short-Term Memory\uff09\u4e5f\u79f0\u957f\u77ed\u65f6\u8bb0\u5fc6\u7ed3\u6784, \u5b83\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u4e0e\u7ecf\u5178RNN\u76f8\u6bd4\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6LSTM\u7684\u7ed3\u6784\u66f4\u590d\u6742, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u9057\u5fd8\u95e8 \u8f93\u5165\u95e8 \u7ec6\u80de\u72b6\u6001 \u8f93\u51fa\u95e8 LSTM\u7684\u5185\u90e8\u7ed3\u6784\u56fe \u7ed3\u6784\u89e3\u91ca\u56fe: \u9057\u5fd8\u95e8\u90e8\u5206\u7ed3\u6784\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u9057\u5fd8\u95e8\u7ed3\u6784\u5206\u6790: \u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u975e\u5e38\u76f8\u4f3c, \u9996\u5148\u5c06\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165x(t)\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u62fc\u63a5, \u5f97\u5230[x(t), h(t-1)], \u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u505a\u53d8\u6362, \u6700\u540e\u901a\u8fc7sigmoid\u51fd\u6570\u8fdb\u884c\u6fc0\u6d3b\u5f97\u5230f(t), \u6211\u4eec\u53ef\u4ee5\u5c06f(t)\u770b\u4f5c\u662f\u95e8\u503c, \u597d\u6bd4\u4e00\u6247\u95e8\u5f00\u5408\u7684\u5927\u5c0f\u7a0b\u5ea6, \u95e8\u503c\u90fd\u5c06\u4f5c\u7528\u5728\u901a\u8fc7\u8be5\u6247\u95e8\u7684\u5f20\u91cf, \u9057\u5fd8\u95e8\u95e8\u503c\u5c06\u4f5c\u7528\u7684\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u4e0a, \u4ee3\u8868\u9057\u5fd8\u8fc7\u53bb\u7684\u591a\u5c11\u4fe1\u606f, \u53c8\u56e0\u4e3a\u9057\u5fd8\u95e8\u95e8\u503c\u662f\u7531x(t), h(t-1)\u8ba1\u7b97\u5f97\u6765\u7684, \u56e0\u6b64\u6574\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u6839\u636e\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165\u548c\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u6765\u51b3\u5b9a\u9057\u5fd8\u591a\u5c11\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u6240\u643a\u5e26\u7684\u8fc7\u5f80\u4fe1\u606f. \u9057\u5fd8\u95e8\u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u6fc0\u6d3b\u51fd\u6570sigmiod\u7684\u4f5c\u7528: \u7528\u4e8e\u5e2e\u52a9\u8c03\u8282\u6d41\u7ecf\u7f51\u7edc\u7684\u503c, sigmoid\u51fd\u6570\u5c06\u503c\u538b\u7f29\u57280\u548c1\u4e4b\u95f4. \u8f93\u5165\u95e8\u90e8\u5206\u7ed3\u6784\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u8f93\u5165\u95e8\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u770b\u5230\u8f93\u5165\u95e8\u7684\u8ba1\u7b97\u516c\u5f0f\u6709\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5c31\u662f\u4ea7\u751f\u8f93\u5165\u95e8\u95e8\u503c\u7684\u516c\u5f0f, \u5b83\u548c\u9057\u5fd8\u95e8\u516c\u5f0f\u51e0\u4e4e\u76f8\u540c, \u533a\u522b\u53ea\u662f\u5728\u4e8e\u5b83\u4eec\u4e4b\u540e\u8981\u4f5c\u7528\u7684\u76ee\u6807\u4e0a. \u8fd9\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u8f93\u5165\u4fe1\u606f\u6709\u591a\u5c11\u9700\u8981\u8fdb\u884c\u8fc7\u6ee4. \u8f93\u5165\u95e8\u7684\u7b2c\u4e8c\u4e2a\u516c\u5f0f\u662f\u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u76f8\u540c. \u5bf9\u4e8eLSTM\u6765\u8bb2, \u5b83\u5f97\u5230\u7684\u662f\u5f53\u524d\u7684\u7ec6\u80de\u72b6\u6001, \u800c\u4e0d\u662f\u50cf\u7ecf\u5178RNN\u4e00\u6837\u5f97\u5230\u7684\u662f\u9690\u542b\u72b6\u6001. \u8f93\u5165\u95e8\u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u5206\u6790: \u7ec6\u80de\u66f4\u65b0\u7684\u7ed3\u6784\u4e0e\u8ba1\u7b97\u516c\u5f0f\u975e\u5e38\u5bb9\u6613\u7406\u89e3, \u8fd9\u91cc\u6ca1\u6709\u5168\u8fde\u63a5\u5c42, \u53ea\u662f\u5c06\u521a\u521a\u5f97\u5230\u7684\u9057\u5fd8\u95e8\u95e8\u503c\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u5f97\u5230\u7684C(t-1)\u76f8\u4e58, \u518d\u52a0\u4e0a\u8f93\u5165\u95e8\u95e8\u503c\u4e0e\u5f53\u524d\u65f6\u95f4\u6b65\u5f97\u5230\u7684\u672a\u66f4\u65b0C(t)\u76f8\u4e58\u7684\u7ed3\u679c. \u6700\u7ec8\u5f97\u5230\u66f4\u65b0\u540e\u7684C(t)\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u8fc7\u7a0b\u5c31\u662f\u5bf9\u9057\u5fd8\u95e8\u548c\u8f93\u5165\u95e8\u7684\u5e94\u7528. \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u8fc7\u7a0b\u6f14\u793a: \u8f93\u51fa\u95e8\u90e8\u5206\u7ed3\u6784\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u8f93\u51fa\u95e8\u7ed3\u6784\u5206\u6790: \u8f93\u51fa\u95e8\u90e8\u5206\u7684\u516c\u5f0f\u4e5f\u662f\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5373\u662f\u8ba1\u7b97\u8f93\u51fa\u95e8\u7684\u95e8\u503c, \u5b83\u548c\u9057\u5fd8\u95e8\uff0c\u8f93\u5165\u95e8\u8ba1\u7b97\u65b9\u5f0f\u76f8\u540c. \u7b2c\u4e8c\u4e2a\u5373\u662f\u4f7f\u7528\u8fd9\u4e2a\u95e8\u503c\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t), \u4ed6\u5c06\u4f5c\u7528\u5728\u66f4\u65b0\u540e\u7684\u7ec6\u80de\u72b6\u6001C(t)\u4e0a, \u5e76\u505atanh\u6fc0\u6d3b, \u6700\u7ec8\u5f97\u5230h(t)\u4f5c\u4e3a\u4e0b\u4e00\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u8f93\u51fa\u95e8\u7684\u8fc7\u7a0b, \u5c31\u662f\u4e3a\u4e86\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t). \u8f93\u51fa\u95e8\u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u4ec0\u4e48\u662fBi-LSTM ? Bi-LSTM\u5373\u53cc\u5411LSTM, \u5b83\u6ca1\u6709\u6539\u53d8LSTM\u672c\u8eab\u4efb\u4f55\u7684\u5185\u90e8\u7ed3\u6784, \u53ea\u662f\u5c06LSTM\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. Bi-LSTM\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u770b\u5230\u56fe\u4e2d\u5bf9\"\u6211\u7231\u4e2d\u56fd\"\u8fd9\u53e5\u8bdd\u6216\u8005\u53eb\u8fd9\u4e2a\u8f93\u5165\u5e8f\u5217, \u8fdb\u884c\u4e86\u4ece\u5de6\u5230\u53f3\u548c\u4ece\u53f3\u5230\u5de6\u4e24\u6b21LSTM\u5904\u7406, \u5c06\u5f97\u5230\u7684\u7ed3\u679c\u5f20\u91cf\u8fdb\u884c\u4e86\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. \u8fd9\u79cd\u7ed3\u6784\u80fd\u591f\u6355\u6349\u8bed\u8a00\u8bed\u6cd5\u4e2d\u4e00\u4e9b\u7279\u5b9a\u7684\u524d\u7f6e\u6216\u540e\u7f6e\u7279\u5f81, \u589e\u5f3a\u8bed\u4e49\u5173\u8054,\u4f46\u662f\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u590d\u6742\u5ea6\u4e5f\u968f\u4e4b\u589e\u52a0\u4e86\u4e00\u500d, \u4e00\u822c\u9700\u8981\u5bf9\u8bed\u6599\u548c\u8ba1\u7b97\u8d44\u6e90\u8fdb\u884c\u8bc4\u4f30\u540e\u51b3\u5b9a\u662f\u5426\u4f7f\u7528\u8be5\u7ed3\u6784. Pytorch\u4e2dLSTM\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.LSTM\u53ef\u8c03\u7528. nn.LSTM\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. bidirectional: \u662f\u5426\u9009\u62e9\u4f7f\u7528\u53cc\u5411LSTM, \u5982\u679c\u4e3aTrue, \u5219\u4f7f\u7528; \u9ed8\u8ba4\u4e0d\u4f7f\u7528. nn.LSTM\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. c0: \u521d\u59cb\u5316\u7684\u7ec6\u80de\u72b6\u6001\u5f20\u91cfc. nn.LSTM\u4f7f\u7528\u793a\u4f8b: # \u5b9a\u4e49LSTM\u7684\u53c2\u6570\u542b\u4e49: (input_size, hidden_size, num_layers) # \u5b9a\u4e49\u8f93\u5165\u5f20\u91cf\u7684\u53c2\u6570\u542b\u4e49: (sequence_length, batch_size, input_size) # \u5b9a\u4e49\u9690\u85cf\u5c42\u521d\u59cb\u5f20\u91cf\u548c\u7ec6\u80de\u521d\u59cb\u72b6\u6001\u5f20\u91cf\u7684\u53c2\u6570\u542b\u4e49: # (num_layers * num_directions, batch_size, hidden_size) >>> import torch.nn as nn >>> import torch >>> rnn = nn . LSTM ( 5 , 6 , 2 ) >>> input = torch . randn ( 1 , 3 , 5 ) >>> h0 = torch . randn ( 2 , 3 , 6 ) >>> c0 = torch . randn ( 2 , 3 , 6 ) >>> output , ( hn , cn ) = rnn ( input , ( h0 , c0 )) >>> output tensor ([[[ 0.0447 , - 0.0335 , 0.1454 , 0.0438 , 0.0865 , 0.0416 ], [ 0.0105 , 0.1923 , 0.5507 , - 0.1742 , 0.1569 , - 0.0548 ], [ - 0.1186 , 0.1835 , - 0.0022 , - 0.1388 , - 0.0877 , - 0.4007 ]]], grad_fn =< StackBackward > ) >>> hn tensor ([[[ 0.4647 , - 0.2364 , 0.0645 , - 0.3996 , - 0.0500 , - 0.0152 ], [ 0.3852 , 0.0704 , 0.2103 , - 0.2524 , 0.0243 , 0.0477 ], [ 0.2571 , 0.0608 , 0.2322 , 0.1815 , - 0.0513 , - 0.0291 ]], [[ 0.0447 , - 0.0335 , 0.1454 , 0.0438 , 0.0865 , 0.0416 ], [ 0.0105 , 0.1923 , 0.5507 , - 0.1742 , 0.1569 , - 0.0548 ], [ - 0.1186 , 0.1835 , - 0.0022 , - 0.1388 , - 0.0877 , - 0.4007 ]]], grad_fn =< StackBackward > ) >>> cn tensor ([[[ 0.8083 , - 0.5500 , 0.1009 , - 0.5806 , - 0.0668 , - 0.1161 ], [ 0.7438 , 0.0957 , 0.5509 , - 0.7725 , 0.0824 , 0.0626 ], [ 0.3131 , 0.0920 , 0.8359 , 0.9187 , - 0.4826 , - 0.0717 ]], [[ 0.1240 , - 0.0526 , 0.3035 , 0.1099 , 0.5915 , 0.0828 ], [ 0.0203 , 0.8367 , 0.9832 , - 0.4454 , 0.3917 , - 0.1983 ], [ - 0.2976 , 0.7764 , - 0.0074 , - 0.1965 , - 0.1343 , - 0.6683 ]]], grad_fn =< StackBackward > ) LSTM\u4f18\u52bf: LSTM\u7684\u95e8\u7ed3\u6784\u80fd\u591f\u6709\u6548\u51cf\u7f13\u957f\u5e8f\u5217\u95ee\u9898\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u867d\u7136\u5e76\u4e0d\u80fd\u675c\u7edd\u8fd9\u79cd\u73b0\u8c61, \u4f46\u5728\u66f4\u957f\u7684\u5e8f\u5217\u95ee\u9898\u4e0a\u8868\u73b0\u4f18\u4e8e\u4f20\u7edfRNN. LSTM\u7f3a\u70b9: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u76f8\u5bf9\u8f83\u590d\u6742, \u56e0\u6b64\u8bad\u7ec3\u6548\u7387\u5728\u540c\u7b49\u7b97\u529b\u4e0b\u8f83\u4f20\u7edfRNN\u4f4e\u5f88\u591a. \u5c0f\u8282\u603b\u7ed3 LSTM\uff08Long Short-Term Memory\uff09\u4e5f\u79f0\u957f\u77ed\u65f6\u8bb0\u5fc6\u7ed3\u6784, \u5b83\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u4e0e\u7ecf\u5178RNN\u76f8\u6bd4\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6LSTM\u7684\u7ed3\u6784\u66f4\u590d\u6742, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u9057\u5fd8\u95e8 \u8f93\u5165\u95e8 \u8f93\u51fa\u95e8 \u7ec6\u80de\u72b6\u6001 \u9057\u5fd8\u95e8\u7ed3\u6784\u5206\u6790: \u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u975e\u5e38\u76f8\u4f3c, \u9996\u5148\u5c06\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165x(t)\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u62fc\u63a5, \u5f97\u5230[x(t), h(t-1)], \u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u505a\u53d8\u6362, \u6700\u540e\u901a\u8fc7sigmoid\u51fd\u6570\u8fdb\u884c\u6fc0\u6d3b\u5f97\u5230f(t), \u6211\u4eec\u53ef\u4ee5\u5c06f(t)\u770b\u4f5c\u662f\u95e8\u503c, \u597d\u6bd4\u4e00\u6247\u95e8\u5f00\u5408\u7684\u5927\u5c0f\u7a0b\u5ea6, \u95e8\u503c\u90fd\u5c06\u4f5c\u7528\u5728\u901a\u8fc7\u8be5\u6247\u95e8\u7684\u5f20\u91cf, \u9057\u5fd8\u95e8\u95e8\u503c\u5c06\u4f5c\u7528\u7684\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u4e0a, \u4ee3\u8868\u9057\u5fd8\u8fc7\u53bb\u7684\u591a\u5c11\u4fe1\u606f, \u53c8\u56e0\u4e3a\u9057\u5fd8\u95e8\u95e8\u503c\u662f\u7531x(t), h(t-1)\u8ba1\u7b97\u5f97\u6765\u7684, \u56e0\u6b64\u6574\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u6839\u636e\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165\u548c\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u6765\u51b3\u5b9a\u9057\u5fd8\u591a\u5c11\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u6240\u643a\u5e26\u7684\u8fc7\u5f80\u4fe1\u606f. \u8f93\u5165\u95e8\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u770b\u5230\u8f93\u5165\u95e8\u7684\u8ba1\u7b97\u516c\u5f0f\u6709\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5c31\u662f\u4ea7\u751f\u8f93\u5165\u95e8\u95e8\u503c\u7684\u516c\u5f0f, \u5b83\u548c\u9057\u5fd8\u95e8\u516c\u5f0f\u51e0\u4e4e\u76f8\u540c, \u533a\u522b\u53ea\u662f\u5728\u4e8e\u5b83\u4eec\u4e4b\u540e\u8981\u4f5c\u7528\u7684\u76ee\u6807\u4e0a. \u8fd9\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u8f93\u5165\u4fe1\u606f\u6709\u591a\u5c11\u9700\u8981\u8fdb\u884c\u8fc7\u6ee4. \u8f93\u5165\u95e8\u7684\u7b2c\u4e8c\u4e2a\u516c\u5f0f\u662f\u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u76f8\u540c. \u5bf9\u4e8eLSTM\u6765\u8bb2, \u5b83\u5f97\u5230\u7684\u662f\u5f53\u524d\u7684\u7ec6\u80de\u72b6\u6001, \u800c\u4e0d\u662f\u50cf\u7ecf\u5178RNN\u4e00\u6837\u5f97\u5230\u7684\u662f\u9690\u542b\u72b6\u6001. \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u5206\u6790: \u7ec6\u80de\u66f4\u65b0\u7684\u7ed3\u6784\u4e0e\u8ba1\u7b97\u516c\u5f0f\u975e\u5e38\u5bb9\u6613\u7406\u89e3, \u8fd9\u91cc\u6ca1\u6709\u5168\u8fde\u63a5\u5c42, \u53ea\u662f\u5c06\u521a\u521a\u5f97\u5230\u7684\u9057\u5fd8\u95e8\u95e8\u503c\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u5f97\u5230\u7684C(t-1)\u76f8\u4e58, \u518d\u52a0\u4e0a\u8f93\u5165\u95e8\u95e8\u503c\u4e0e\u5f53\u524d\u65f6\u95f4\u6b65\u5f97\u5230\u7684\u672a\u66f4\u65b0C(t)\u76f8\u4e58\u7684\u7ed3\u679c. \u6700\u7ec8\u5f97\u5230\u66f4\u65b0\u540e\u7684C(t)\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u8fc7\u7a0b\u5c31\u662f\u5bf9\u9057\u5fd8\u95e8\u548c\u8f93\u5165\u95e8\u7684\u5e94\u7528. \u8f93\u51fa\u95e8\u7ed3\u6784\u5206\u6790: \u8f93\u51fa\u95e8\u90e8\u5206\u7684\u516c\u5f0f\u4e5f\u662f\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5373\u662f\u8ba1\u7b97\u8f93\u51fa\u95e8\u7684\u95e8\u503c, \u5b83\u548c\u9057\u5fd8\u95e8\uff0c\u8f93\u5165\u95e8\u8ba1\u7b97\u65b9\u5f0f\u76f8\u540c. \u7b2c\u4e8c\u4e2a\u5373\u662f\u4f7f\u7528\u8fd9\u4e2a\u95e8\u503c\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t), \u4ed6\u5c06\u4f5c\u7528\u5728\u66f4\u65b0\u540e\u7684\u7ec6\u80de\u72b6\u6001C(t)\u4e0a, \u5e76\u505atanh\u6fc0\u6d3b, \u6700\u7ec8\u5f97\u5230h(t)\u4f5c\u4e3a\u4e0b\u4e00\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u8f93\u51fa\u95e8\u7684\u8fc7\u7a0b, \u5c31\u662f\u4e3a\u4e86\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t). \u4ec0\u4e48\u662fBi-LSTM ? Bi-LSTM\u5373\u53cc\u5411LSTM, \u5b83\u6ca1\u6709\u6539\u53d8LSTM\u672c\u8eab\u4efb\u4f55\u7684\u5185\u90e8\u7ed3\u6784, \u53ea\u662f\u5c06LSTM\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. Pytorch\u4e2dLSTM\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.LSTM\u53ef\u8c03\u7528. LSTM\u4f18\u52bf: LSTM\u7684\u95e8\u7ed3\u6784\u80fd\u591f\u6709\u6548\u51cf\u7f13\u957f\u5e8f\u5217\u95ee\u9898\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u867d\u7136\u5e76\u4e0d\u80fd\u675c\u7edd\u8fd9\u79cd\u73b0\u8c61, \u4f46\u5728\u66f4\u957f\u7684\u5e8f\u5217\u95ee\u9898\u4e0a\u8868\u73b0\u4f18\u4e8e\u4f20\u7edfRNN. LSTM\u7f3a\u70b9: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u76f8\u5bf9\u8f83\u590d\u6742, \u56e0\u6b64\u8bad\u7ec3\u6548\u7387\u5728\u540c\u7b49\u7b97\u529b\u4e0b\u8f83\u4f20\u7edfRNN\u4f4e\u5f88\u591a. 1.4 GRU\u6a21\u578b \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3GRU\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f. \u638c\u63e1Pytorch\u4e2dGRU\u5de5\u5177\u7684\u4f7f\u7528. \u4e86\u89e3GRU\u7684\u4f18\u52bf\u4e0e\u7f3a\u70b9. GRU\uff08Gated Recurrent Unit\uff09\u4e5f\u79f0\u95e8\u63a7\u5faa\u73af\u5355\u5143\u7ed3\u6784, \u5b83\u4e5f\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u540cLSTM\u4e00\u6837\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6\u5b83\u7684\u7ed3\u6784\u548c\u8ba1\u7b97\u8981\u6bd4LSTM\u66f4\u7b80\u5355, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u66f4\u65b0\u95e8 \u91cd\u7f6e\u95e8 GRU\u7684\u5185\u90e8\u7ed3\u6784\u56fe\u548c\u8ba1\u7b97\u516c\u5f0f \u7ed3\u6784\u89e3\u91ca\u56fe: GRU\u7684\u66f4\u65b0\u95e8\u548c\u91cd\u7f6e\u95e8\u7ed3\u6784\u56fe: \u5185\u90e8\u7ed3\u6784\u5206\u6790: \u548c\u4e4b\u524d\u5206\u6790\u8fc7\u7684LSTM\u4e2d\u7684\u95e8\u63a7\u4e00\u6837, \u9996\u5148\u8ba1\u7b97\u66f4\u65b0\u95e8\u548c\u91cd\u7f6e\u95e8\u7684\u95e8\u503c, \u5206\u522b\u662fz(t)\u548cr(t), \u8ba1\u7b97\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528X(t)\u4e0eh(t-1)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u6362, \u518d\u7ecf\u8fc7sigmoid\u6fc0\u6d3b. \u4e4b\u540e\u91cd\u7f6e\u95e8\u95e8\u503c\u4f5c\u7528\u5728\u4e86h(t-1)\u4e0a, \u4ee3\u8868\u63a7\u5236\u4e0a\u4e00\u65f6\u95f4\u6b65\u4f20\u6765\u7684\u4fe1\u606f\u6709\u591a\u5c11\u53ef\u4ee5\u88ab\u5229\u7528. \u63a5\u7740\u5c31\u662f\u4f7f\u7528\u8fd9\u4e2a\u91cd\u7f6e\u540e\u7684h(t-1)\u8fdb\u884c\u57fa\u672c\u7684RNN\u8ba1\u7b97, \u5373\u4e0ex(t)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u5316, \u7ecf\u8fc7tanh\u6fc0\u6d3b, \u5f97\u5230\u65b0\u7684h(t). \u6700\u540e\u66f4\u65b0\u95e8\u7684\u95e8\u503c\u4f1a\u4f5c\u7528\u5728\u65b0\u7684h(t)\uff0c\u800c1-\u95e8\u503c\u4f1a\u4f5c\u7528\u5728h(t-1)\u4e0a, \u968f\u540e\u5c06\u4e24\u8005\u7684\u7ed3\u679c\u76f8\u52a0, \u5f97\u5230\u6700\u7ec8\u7684\u9690\u542b\u72b6\u6001\u8f93\u51fah(t), \u8fd9\u4e2a\u8fc7\u7a0b\u610f\u5473\u7740\u66f4\u65b0\u95e8\u6709\u80fd\u529b\u4fdd\u7559\u4e4b\u524d\u7684\u7ed3\u679c, \u5f53\u95e8\u503c\u8d8b\u4e8e1\u65f6, \u8f93\u51fa\u5c31\u662f\u65b0\u7684h(t), \u800c\u5f53\u95e8\u503c\u8d8b\u4e8e0\u65f6, \u8f93\u51fa\u5c31\u662f\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684h(t-1). Bi-GRU\u4e0eBi-LSTM\u7684\u903b\u8f91\u76f8\u540c, \u90fd\u662f\u4e0d\u6539\u53d8\u5176\u5185\u90e8\u7ed3\u6784, \u800c\u662f\u5c06\u6a21\u578b\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. \u5177\u4f53\u53c2\u89c1\u4e0a\u5c0f\u8282\u4e2d\u7684Bi-LSTM. Pytorch\u4e2dGRU\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.GRU\u53ef\u8c03\u7528. nn.GRU\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. bidirectional: \u662f\u5426\u9009\u62e9\u4f7f\u7528\u53cc\u5411LSTM, \u5982\u679c\u4e3aTrue, \u5219\u4f7f\u7528; \u9ed8\u8ba4\u4e0d\u4f7f\u7528. nn.GRU\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. nn.GRU\u4f7f\u7528\u793a\u4f8b: >>> import torch >>> import torch.nn as nn >>> rnn = nn . GRU ( 5 , 6 , 2 ) >>> input = torch . randn ( 1 , 3 , 5 ) >>> h0 = torch . randn ( 2 , 3 , 6 ) >>> output , hn = rnn ( input , h0 ) >>> output tensor ([[[ - 0.2097 , - 2.2225 , 0.6204 , - 0.1745 , - 0.1749 , - 0.0460 ], [ - 0.3820 , 0.0465 , - 0.4798 , 0.6837 , - 0.7894 , 0.5173 ], [ - 0.0184 , - 0.2758 , 1.2482 , 0.5514 , - 0.9165 , - 0.6667 ]]], grad_fn =< StackBackward > ) >>> hn tensor ([[[ 0.6578 , - 0.4226 , - 0.2129 , - 0.3785 , 0.5070 , 0.4338 ], [ - 0.5072 , 0.5948 , 0.8083 , 0.4618 , 0.1629 , - 0.1591 ], [ 0.2430 , - 0.4981 , 0.3846 , - 0.4252 , 0.7191 , 0.5420 ]], [[ - 0.2097 , - 2.2225 , 0.6204 , - 0.1745 , - 0.1749 , - 0.0460 ], [ - 0.3820 , 0.0465 , - 0.4798 , 0.6837 , - 0.7894 , 0.5173 ], [ - 0.0184 , - 0.2758 , 1.2482 , 0.5514 , - 0.9165 , - 0.6667 ]]], grad_fn =< StackBackward > ) GRU\u7684\u4f18\u52bf: GRU\u548cLSTM\u4f5c\u7528\u76f8\u540c, \u5728\u6355\u6349\u957f\u5e8f\u5217\u8bed\u4e49\u5173\u8054\u65f6, \u80fd\u6709\u6548\u6291\u5236\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u6548\u679c\u90fd\u4f18\u4e8e\u4f20\u7edfRNN\u4e14\u8ba1\u7b97\u590d\u6742\u5ea6\u76f8\u6bd4LSTM\u8981\u5c0f. GRU\u7684\u7f3a\u70b9: GRU\u4ecd\u7136\u4e0d\u80fd\u5b8c\u5168\u89e3\u51b3\u68af\u5ea6\u6d88\u5931\u95ee\u9898, \u540c\u65f6\u5176\u4f5c\u7528RNN\u7684\u53d8\u4f53, \u6709\u7740RNN\u7ed3\u6784\u672c\u8eab\u7684\u4e00\u5927\u5f0a\u7aef, \u5373\u4e0d\u53ef\u5e76\u884c\u8ba1\u7b97, \u8fd9\u5728\u6570\u636e\u91cf\u548c\u6a21\u578b\u4f53\u91cf\u9010\u6b65\u589e\u5927\u7684\u672a\u6765, \u662fRNN\u53d1\u5c55\u7684\u5173\u952e\u74f6\u9888. \u5c0f\u8282\u603b\u7ed3 GRU\uff08Gated Recurrent Unit\uff09\u4e5f\u79f0\u95e8\u63a7\u5faa\u73af\u5355\u5143\u7ed3\u6784, \u5b83\u4e5f\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u540cLSTM\u4e00\u6837\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6\u5b83\u7684\u7ed3\u6784\u548c\u8ba1\u7b97\u8981\u6bd4LSTM\u66f4\u7b80\u5355, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u66f4\u65b0\u95e8 \u91cd\u7f6e\u95e8 \u5185\u90e8\u7ed3\u6784\u5206\u6790: \u548c\u4e4b\u524d\u5206\u6790\u8fc7\u7684LSTM\u4e2d\u7684\u95e8\u63a7\u4e00\u6837, \u9996\u5148\u8ba1\u7b97\u66f4\u65b0\u95e8\u548c\u91cd\u7f6e\u95e8\u7684\u95e8\u503c, \u5206\u522b\u662fz(t)\u548cr(t), \u8ba1\u7b97\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528X(t)\u4e0eh(t-1)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u6362, \u518d\u7ecf\u8fc7sigmoid\u6fc0\u6d3b. \u4e4b\u540e\u91cd\u7f6e\u95e8\u95e8\u503c\u4f5c\u7528\u5728\u4e86h(t-1)\u4e0a, \u4ee3\u8868\u63a7\u5236\u4e0a\u4e00\u65f6\u95f4\u6b65\u4f20\u6765\u7684\u4fe1\u606f\u6709\u591a\u5c11\u53ef\u4ee5\u88ab\u5229\u7528. \u63a5\u7740\u5c31\u662f\u4f7f\u7528\u8fd9\u4e2a\u91cd\u7f6e\u540e\u7684h(t-1)\u8fdb\u884c\u57fa\u672c\u7684RNN\u8ba1\u7b97, \u5373\u4e0ex(t)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u5316, \u7ecf\u8fc7tanh\u6fc0\u6d3b, \u5f97\u5230\u65b0\u7684h(t). \u6700\u540e\u66f4\u65b0\u95e8\u7684\u95e8\u503c\u4f1a\u4f5c\u7528\u5728\u65b0\u7684h(t)\uff0c\u800c1-\u95e8\u503c\u4f1a\u4f5c\u7528\u5728h(t-1)\u4e0a, \u968f\u540e\u5c06\u4e24\u8005\u7684\u7ed3\u679c\u76f8\u52a0, \u5f97\u5230\u6700\u7ec8\u7684\u9690\u542b\u72b6\u6001\u8f93\u51fah(t), \u8fd9\u4e2a\u8fc7\u7a0b\u610f\u5473\u7740\u66f4\u65b0\u95e8\u6709\u80fd\u529b\u4fdd\u7559\u4e4b\u524d\u7684\u7ed3\u679c, \u5f53\u95e8\u503c\u8d8b\u4e8e1\u65f6, \u8f93\u51fa\u5c31\u662f\u65b0\u7684h(t), \u800c\u5f53\u95e8\u503c\u8d8b\u4e8e0\u65f6, \u8f93\u51fa\u5c31\u662f\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684h(t-1). Bi-GRU\u4e0eBi-LSTM\u7684\u903b\u8f91\u76f8\u540c, \u90fd\u662f\u4e0d\u6539\u53d8\u5176\u5185\u90e8\u7ed3\u6784, \u800c\u662f\u5c06\u6a21\u578b\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. \u5177\u4f53\u53c2\u89c1\u4e0a\u5c0f\u8282\u4e2d\u7684Bi-LSTM. Pytorch\u4e2dGRU\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.GRU\u53ef\u8c03\u7528. GRU\u7684\u4f18\u52bf: GRU\u548cLSTM\u4f5c\u7528\u76f8\u540c, \u5728\u6355\u6349\u957f\u5e8f\u5217\u8bed\u4e49\u5173\u8054\u65f6, \u80fd\u6709\u6548\u6291\u5236\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u6548\u679c\u90fd\u4f18\u4e8e\u4f20\u7edfRNN\u4e14\u8ba1\u7b97\u590d\u6742\u5ea6\u76f8\u6bd4LSTM\u8981\u5c0f. GRU\u7684\u7f3a\u70b9: GRU\u4ecd\u7136\u4e0d\u80fd\u5b8c\u5168\u89e3\u51b3\u68af\u5ea6\u6d88\u5931\u95ee\u9898, \u540c\u65f6\u5176\u4f5c\u7528RNN\u7684\u53d8\u4f53, \u6709\u7740RNN\u7ed3\u6784\u672c\u8eab\u7684\u4e00\u5927\u5f0a\u7aef, \u5373\u4e0d\u53ef\u5e76\u884c\u8ba1\u7b97, \u8fd9\u5728\u6570\u636e\u91cf\u548c\u6a21\u578b\u4f53\u91cf\u9010\u6b65\u589e\u5927\u7684\u672a\u6765, \u662fRNN\u53d1\u5c55\u7684\u5173\u952e\u74f6\u9888. 1.5 \u6ce8\u610f\u529b\u673a\u5236 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u4ee5\u53ca\u5e38\u89c1\u7684\u8ba1\u7b97\u89c4\u5219. \u4e86\u89e3\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u673a\u5236\u53ca\u5176\u4f5c\u7528. \u638c\u63e1\u6ce8\u610f\u529b\u673a\u5236\u7684\u5b9e\u73b0\u6b65\u9aa4. \u4ec0\u4e48\u662f\u6ce8\u610f\u529b: \u6211\u4eec\u89c2\u5bdf\u4e8b\u7269\u65f6\uff0c\u4e4b\u6240\u4ee5\u80fd\u591f\u5feb\u901f\u5224\u65ad\u4e00\u79cd\u4e8b\u7269(\u5f53\u7136\u5141\u8bb8\u5224\u65ad\u662f\u9519\u8bef\u7684), \u662f\u56e0\u4e3a\u6211\u4eec\u5927\u8111\u80fd\u591f\u5f88\u5feb\u628a\u6ce8\u610f\u529b\u653e\u5728\u4e8b\u7269\u6700\u5177\u6709\u8fa8\u8bc6\u5ea6\u7684\u90e8\u5206\u4ece\u800c\u4f5c\u51fa\u5224\u65ad\uff0c\u800c\u5e76\u975e\u662f\u4ece\u5934\u5230\u5c3e\u7684\u89c2\u5bdf\u4e00\u904d\u4e8b\u7269\u540e\uff0c\u624d\u80fd\u6709\u5224\u65ad\u7ed3\u679c. \u6b63\u662f\u57fa\u4e8e\u8fd9\u6837\u7684\u7406\u8bba\uff0c\u5c31\u4ea7\u751f\u4e86\u6ce8\u610f\u529b\u673a\u5236. \u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5b83\u9700\u8981\u4e09\u4e2a\u6307\u5b9a\u7684\u8f93\u5165Q(query), K(key), V(value), \u7136\u540e\u901a\u8fc7\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u6ce8\u610f\u529b\u7684\u7ed3\u679c, \u8fd9\u4e2a\u7ed3\u679c\u4ee3\u8868query\u5728key\u548cvalue\u4f5c\u7528\u4e0b\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5f53\u8f93\u5165\u7684Q=K=V\u65f6, \u79f0\u4f5c\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219. \u5e38\u89c1\u7684\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316\u540e\u518d\u4f7f\u7528tanh\u51fd\u6570\u6fc0\u6d3b, \u7136\u540e\u518d\u8fdb\u884c\u5185\u90e8\u6c42\u548c, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u518d\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\u4e0eK\u7684\u8f6c\u7f6e\u505a\u70b9\u79ef\u8fd0\u7b97, \u7136\u540e\u9664\u4ee5\u4e00\u4e2a\u7f29\u653e\u7cfb\u6570, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u8bf4\u660e\uff1a\u5f53\u6ce8\u610f\u529b\u6743\u91cd\u77e9\u9635\u548cV\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\u4e14\u7b2c\u4e00\u7ef4\u4ee3\u8868\u4e3abatch\u6761\u6570\u65f6, \u5219\u505abmm\u8fd0\u7b97.bmm\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5f20\u91cf\u4e58\u6cd5\u8fd0\u7b97. bmm\u8fd0\u7b97\u6f14\u793a: # \u5982\u679c\u53c2\u65701\u5f62\u72b6\u662f(b \u00d7 n \u00d7 m), \u53c2\u65702\u5f62\u72b6\u662f(b \u00d7 m \u00d7 p), \u5219\u8f93\u51fa\u4e3a(b \u00d7 n \u00d7 p) >>> input = torch.randn(10, 3, 4) >>> mat2 = torch.randn(10, 4, 5) >>> res = torch.bmm(input, mat2) >>> res.size() torch.Size([10, 3, 5]) \u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u673a\u5236 \u6ce8\u610f\u529b\u673a\u5236\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u80fd\u591f\u5e94\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u7684\u8f7d\u4f53, \u540c\u65f6\u5305\u62ec\u4e00\u4e9b\u5fc5\u8981\u7684\u5168\u8fde\u63a5\u5c42\u4ee5\u53ca\u76f8\u5173\u5f20\u91cf\u5904\u7406, \u4f7f\u5176\u4e0e\u5e94\u7528\u7f51\u7edc\u878d\u4e3a\u4e00\u4f53. \u4f7f\u7528\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u7684\u6ce8\u610f\u529b\u673a\u5236\u79f0\u4e3a\u81ea\u6ce8\u610f\u529b\u673a\u5236. \u8bf4\u660e: NLP\u9886\u57df\u4e2d, \u5f53\u524d\u7684\u6ce8\u610f\u529b\u673a\u5236\u5927\u591a\u6570\u5e94\u7528\u4e8eseq2seq\u67b6\u6784, \u5373\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u6a21\u578b. \u6ce8\u610f\u529b\u673a\u5236\u7684\u4f5c\u7528 \u5728\u89e3\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u80fd\u591f\u6839\u636e\u6a21\u578b\u76ee\u6807\u6709\u6548\u7684\u805a\u7126\u7f16\u7801\u5668\u7684\u8f93\u51fa\u7ed3\u679c, \u5f53\u5176\u4f5c\u4e3a\u89e3\u7801\u5668\u7684\u8f93\u5165\u65f6\u63d0\u5347\u6548\u679c. \u6539\u5584\u4ee5\u5f80\u7f16\u7801\u5668\u8f93\u51fa\u662f\u5355\u4e00\u5b9a\u957f\u5f20\u91cf, \u65e0\u6cd5\u5b58\u50a8\u8fc7\u591a\u4fe1\u606f\u7684\u60c5\u51b5. \u5728\u7f16\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u4e3b\u8981\u89e3\u51b3\u8868\u5f81\u95ee\u9898, \u76f8\u5f53\u4e8e\u7279\u5f81\u63d0\u53d6\u8fc7\u7a0b, \u5f97\u5230\u8f93\u5165\u7684\u6ce8\u610f\u529b\u8868\u793a. \u4e00\u822c\u4f7f\u7528\u81ea\u6ce8\u610f\u529b(self-attention). \u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u6b65\u9aa4 \u7b2c\u4e00\u6b65: \u6839\u636e\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219, \u5bf9Q\uff0cK\uff0cV\u8fdb\u884c\u76f8\u5e94\u7684\u8ba1\u7b97. \u7b2c\u4e8c\u6b65: \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, \u5982\u679c\u662f\u62fc\u63a5\u65b9\u6cd5\uff0c\u5219\u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e8c\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5, \u5982\u679c\u662f\u8f6c\u7f6e\u70b9\u79ef, \u4e00\u822c\u662f\u81ea\u6ce8\u610f\u529b, Q\u4e0eV\u76f8\u540c, \u5219\u4e0d\u9700\u8981\u8fdb\u884c\u4e0eQ\u7684\u62fc\u63a5. \u7b2c\u4e09\u6b65: \u6700\u540e\u4e3a\u4e86\u4f7f\u6574\u4e2aattention\u673a\u5236\u6309\u7167\u6307\u5b9a\u5c3a\u5bf8\u8f93\u51fa, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e8c\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362, \u5f97\u5230\u6700\u7ec8\u5bf9Q\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5e38\u89c1\u6ce8\u610f\u529b\u673a\u5236\u7684\u4ee3\u7801\u5206\u6790: import torch import torch.nn as nn import torch.nn.functional as F class Attn ( nn . Module ): def __init__ ( self , query_size , key_size , value_size1 , value_size2 , output_size ): \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u67095\u4e2a, query_size\u4ee3\u8868query\u7684\u6700\u540e\u4e00\u7ef4\u5927\u5c0f key_size\u4ee3\u8868key\u7684\u6700\u540e\u4e00\u7ef4\u5927\u5c0f, value_size1\u4ee3\u8868value\u7684\u5bfc\u6570\u7b2c\u4e8c\u7ef4\u5927\u5c0f, value = (1, value_size1, value_size2) value_size2\u4ee3\u8868value\u7684\u5012\u6570\u7b2c\u4e00\u7ef4\u5927\u5c0f, output_size\u8f93\u51fa\u7684\u6700\u540e\u4e00\u7ef4\u5927\u5c0f\"\"\" super ( Attn , self ) . __init__ () # \u5c06\u4ee5\u4e0b\u53c2\u6570\u4f20\u5165\u7c7b\u4e2d self . query_size = query_size self . key_size = key_size self . value_size1 = value_size1 self . value_size2 = value_size2 self . output_size = output_size # \u521d\u59cb\u5316\u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u7b2c\u4e00\u6b65\u4e2d\u9700\u8981\u7684\u7ebf\u6027\u5c42. self . attn = nn . Linear ( self . query_size + self . key_size , value_size1 ) # \u521d\u59cb\u5316\u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u7b2c\u4e09\u6b65\u4e2d\u9700\u8981\u7684\u7ebf\u6027\u5c42. self . attn_combine = nn . Linear ( self . query_size + value_size2 , output_size ) def forward ( self , Q , K , V ): \"\"\"forward\u51fd\u6570\u7684\u8f93\u5165\u53c2\u6570\u6709\u4e09\u4e2a, \u5206\u522b\u662fQ, K, V, \u6839\u636e\u6a21\u578b\u8bad\u7ec3\u5e38\u8bc6, \u8f93\u5165\u7ed9Attion\u673a\u5236\u7684 \u5f20\u91cf\u4e00\u822c\u60c5\u51b5\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf, \u56e0\u6b64\u8fd9\u91cc\u4e5f\u5047\u8bbeQ, K, V\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\"\"\" # \u7b2c\u4e00\u6b65, \u6309\u7167\u8ba1\u7b97\u89c4\u5219\u8fdb\u884c\u8ba1\u7b97, # \u6211\u4eec\u91c7\u7528\u5e38\u89c1\u7684\u7b2c\u4e00\u79cd\u8ba1\u7b97\u89c4\u5219 # \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c attn_weights = F . softmax ( self . attn ( torch . cat (( Q [ 0 ], K [ 0 ]), 1 )), dim = 1 ) # \u7136\u540e\u8fdb\u884c\u7b2c\u4e00\u6b65\u7684\u540e\u534a\u90e8\u5206, \u5c06\u5f97\u5230\u7684\u6743\u91cd\u77e9\u9635\u4e0eV\u505a\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97, # \u5f53\u4e8c\u8005\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\u4e14\u7b2c\u4e00\u7ef4\u4ee3\u8868\u4e3abatch\u6761\u6570\u65f6, \u5219\u505abmm\u8fd0\u7b97 attn_applied = torch . bmm ( attn_weights . unsqueeze ( 0 ), V ) # \u4e4b\u540e\u8fdb\u884c\u7b2c\u4e8c\u6b65, \u901a\u8fc7\u53d6[0]\u662f\u7528\u6765\u964d\u7ef4, \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, # \u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e00\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5 output = torch . cat (( Q [ 0 ], attn_applied [ 0 ]), 1 ) # \u6700\u540e\u662f\u7b2c\u4e09\u6b65, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e09\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\u5e76\u6269\u5c55\u7ef4\u5ea6\uff0c\u5f97\u5230\u8f93\u51fa # \u56e0\u4e3a\u8981\u4fdd\u8bc1\u8f93\u51fa\u4e5f\u662f\u4e09\u7ef4\u5f20\u91cf, \u56e0\u6b64\u4f7f\u7528unsqueeze(0)\u6269\u5c55\u7ef4\u5ea6 output = self . attn_combine ( output ) . unsqueeze ( 0 ) return output , attn_weights \u8c03\u7528: query_size = 32 key_size = 32 value_size1 = 32 value_size2 = 64 output_size = 64 attn = Attn(query_size, key_size, value_size1, value_size2, output_size) Q = torch.randn(1,1,32) K = torch.randn(1,1,32) V = torch.randn(1,32,64) out = attn(Q, K ,V) print(out[0]) print(out[1]) \u8f93\u51fa\u6548\u679c: tensor([[[ 0.4477, -0.0500, -0.2277, -0.3168, -0.4096, -0.5982, 0.1548, -0.0771, -0.0951, 0.1833, 0.3128, 0.1260, 0.4420, 0.0495, -0.7774, -0.0995, 0.2629, 0.4957, 1.0922, 0.1428, 0.3024, -0.2646, -0.0265, 0.0632, 0.3951, 0.1583, 0.1130, 0.5500, -0.1887, -0.2816, -0.3800, -0.5741, 0.1342, 0.0244, -0.2217, 0.1544, 0.1865, -0.2019, 0.4090, -0.4762, 0.3677, -0.2553, -0.5199, 0.2290, -0.4407, 0.0663, -0.0182, -0.2168, 0.0913, -0.2340, 0.1924, -0.3687, 0.1508, 0.3618, -0.0113, 0.2864, -0.1929, -0.6821, 0.0951, 0.1335, 0.3560, -0.3215, 0.6461, 0.1532]]], grad_fn=<UnsqueezeBackward0>) tensor([[0.0395, 0.0342, 0.0200, 0.0471, 0.0177, 0.0209, 0.0244, 0.0465, 0.0346, 0.0378, 0.0282, 0.0214, 0.0135, 0.0419, 0.0926, 0.0123, 0.0177, 0.0187, 0.0166, 0.0225, 0.0234, 0.0284, 0.0151, 0.0239, 0.0132, 0.0439, 0.0507, 0.0419, 0.0352, 0.0392, 0.0546, 0.0224]], grad_fn=<SoftmaxBackward>) \u66f4\u591a\u6709\u5173\u6ce8\u610f\u529b\u673a\u5236\u7684\u5e94\u7528\u6211\u4eec\u5c06\u5728\u6848\u4f8b\u4e2d\u8fdb\u884c\u8be6\u5c3d\u7684\u7406\u89e3\u5206\u6790. \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5b83\u9700\u8981\u4e09\u4e2a\u6307\u5b9a\u7684\u8f93\u5165Q(query), K(key), V(value), \u7136\u540e\u901a\u8fc7\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u6ce8\u610f\u529b\u7684\u7ed3\u679c, \u8fd9\u4e2a\u7ed3\u679c\u4ee3\u8868query\u5728key\u548cvalue\u4f5c\u7528\u4e0b\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5f53\u8f93\u5165\u7684Q=K=V\u65f6, \u79f0\u4f5c\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219. \u5e38\u89c1\u7684\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316\u540e\u518d\u4f7f\u7528tanh\u51fd\u6570\u6fc0\u6d3b, \u7136\u540e\u518d\u8fdb\u884c\u5185\u90e8\u6c42\u548c, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u518d\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\u4e0eK\u7684\u8f6c\u7f6e\u505a\u70b9\u79ef\u8fd0\u7b97, \u7136\u540e\u9664\u4ee5\u4e00\u4e2a\u7f29\u653e\u7cfb\u6570, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u673a\u5236: \u6ce8\u610f\u529b\u673a\u5236\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u80fd\u591f\u5e94\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u7684\u8f7d\u4f53, \u540c\u65f6\u5305\u62ec\u4e00\u4e9b\u5fc5\u8981\u7684\u5168\u8fde\u63a5\u5c42\u4ee5\u53ca\u76f8\u5173\u5f20\u91cf\u5904\u7406, \u4f7f\u5176\u4e0e\u5e94\u7528\u7f51\u7edc\u878d\u4e3a\u4e00\u4f53. \u4f7f\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u7684\u6ce8\u610f\u529b\u673a\u5236\u79f0\u4e3a\u81ea\u6ce8\u610f\u529b\u673a\u5236. \u6ce8\u610f\u529b\u673a\u5236\u7684\u4f5c\u7528: \u5728\u89e3\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u80fd\u591f\u6839\u636e\u6a21\u578b\u76ee\u6807\u6709\u6548\u7684\u805a\u7126\u7f16\u7801\u5668\u7684\u8f93\u51fa\u7ed3\u679c, \u5f53\u5176\u4f5c\u4e3a\u89e3\u7801\u5668\u7684\u8f93\u5165\u65f6\u63d0\u5347\u6548\u679c. \u6539\u5584\u4ee5\u5f80\u7f16\u7801\u5668\u8f93\u51fa\u662f\u5355\u4e00\u5b9a\u957f\u5f20\u91cf, \u65e0\u6cd5\u5b58\u50a8\u8fc7\u591a\u4fe1\u606f\u7684\u60c5\u51b5. \u5728\u7f16\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u4e3b\u8981\u89e3\u51b3\u8868\u5f81\u95ee\u9898, \u76f8\u5f53\u4e8e\u7279\u5f81\u63d0\u53d6\u8fc7\u7a0b, \u5f97\u5230\u8f93\u5165\u7684\u6ce8\u610f\u529b\u8868\u793a. \u4e00\u822c\u4f7f\u7528\u81ea\u6ce8\u610f\u529b(self-attention). \u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u6839\u636e\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219, \u5bf9Q\uff0cK\uff0cV\u8fdb\u884c\u76f8\u5e94\u7684\u8ba1\u7b97. \u7b2c\u4e8c\u6b65: \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, \u5982\u679c\u662f\u62fc\u63a5\u65b9\u6cd5\uff0c\u5219\u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e8c\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5, \u5982\u679c\u662f\u8f6c\u7f6e\u70b9\u79ef, \u4e00\u822c\u662f\u81ea\u6ce8\u610f\u529b, Q\u4e0eV\u76f8\u540c, \u5219\u4e0d\u9700\u8981\u8fdb\u884c\u4e0eQ\u7684\u62fc\u63a5. \u7b2c\u4e09\u6b65: \u6700\u540e\u4e3a\u4e86\u4f7f\u6574\u4e2aattention\u673a\u5236\u6309\u7167\u6307\u5b9a\u5c3a\u5bf8\u8f93\u51fa, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e8c\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362, \u5f97\u5230\u6700\u7ec8\u5bf9Q\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5b66\u4e60\u5e76\u5b9e\u73b0\u4e86\u4e00\u79cd\u5e38\u89c1\u7684\u6ce8\u610f\u529b\u673a\u5236\u7684\u7c7bAttn.","title":"1. RNN\u67b6\u6784\u89e3\u6790"},{"location":"1.html#11-rnn","text":"","title":"1.1 \u8ba4\u8bc6RNN\u6a21\u578b"},{"location":"1.html#_1","text":"\u4e86\u89e3\u4ec0\u4e48\u662fRNN\u6a21\u578b. \u4e86\u89e3RNN\u6a21\u578b\u7684\u4f5c\u7528. \u4e86\u89e3RNN\u6a21\u578b\u7684\u5206\u7c7b.","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"1.html#rnn","text":"RNN(Recurrent Neural Network), \u4e2d\u6587\u79f0\u4f5c\u5faa\u73af\u795e\u7ecf\u7f51\u7edc, \u5b83\u4e00\u822c\u4ee5\u5e8f\u5217\u6570\u636e\u4e3a\u8f93\u5165, \u901a\u8fc7\u7f51\u7edc\u5185\u90e8\u7684\u7ed3\u6784\u8bbe\u8ba1\u6709\u6548\u6355\u6349\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb\u7279\u5f81, \u4e00\u822c\u4e5f\u662f\u4ee5\u5e8f\u5217\u5f62\u5f0f\u8fdb\u884c\u8f93\u51fa. \u4e00\u822c\u5355\u5c42\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784: RNN\u5355\u5c42\u7f51\u7edc\u7ed3\u6784: \u4ee5\u65f6\u95f4\u6b65\u5bf9RNN\u8fdb\u884c\u5c55\u5f00\u540e\u7684\u5355\u5c42\u7f51\u7edc\u7ed3\u6784: RNN\u7684\u5faa\u73af\u673a\u5236\u4f7f\u6a21\u578b\u9690\u5c42\u4e0a\u4e00\u65f6\u95f4\u6b65\u4ea7\u751f\u7684\u7ed3\u679c, \u80fd\u591f\u4f5c\u4e3a\u5f53\u4e0b\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206(\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u9664\u4e86\u6b63\u5e38\u7684\u8f93\u5165\u5916\u8fd8\u5305\u62ec\u4e0a\u4e00\u6b65\u7684\u9690\u5c42\u8f93\u51fa)\u5bf9\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u4ea7\u751f\u5f71\u54cd.","title":"\u4ec0\u4e48\u662fRNN\u6a21\u578b"},{"location":"1.html#rnn_1","text":"\u56e0\u4e3aRNN\u7ed3\u6784\u80fd\u591f\u5f88\u597d\u5229\u7528\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb, \u56e0\u6b64\u9488\u5bf9\u81ea\u7136\u754c\u5177\u6709\u8fde\u7eed\u6027\u7684\u8f93\u5165\u5e8f\u5217, \u5982\u4eba\u7c7b\u7684\u8bed\u8a00, \u8bed\u97f3\u7b49\u8fdb\u884c\u5f88\u597d\u7684\u5904\u7406, \u5e7f\u6cdb\u5e94\u7528\u4e8eNLP\u9886\u57df\u7684\u5404\u9879\u4efb\u52a1, \u5982\u6587\u672c\u5206\u7c7b, \u60c5\u611f\u5206\u6790, \u610f\u56fe\u8bc6\u522b, \u673a\u5668\u7ffb\u8bd1\u7b49. \u4e0b\u9762\u6211\u4eec\u5c06\u4ee5\u4e00\u4e2a\u7528\u6237\u610f\u56fe\u8bc6\u522b\u7684\u4f8b\u5b50\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790: \u7b2c\u4e00\u6b65: \u7528\u6237\u8f93\u5165\u4e86\"What time is it ?\", \u6211\u4eec\u9996\u5148\u9700\u8981\u5bf9\u5b83\u8fdb\u884c\u57fa\u672c\u7684\u5206\u8bcd, \u56e0\u4e3aRNN\u662f\u6309\u7167\u987a\u5e8f\u5de5\u4f5c\u7684, \u6bcf\u6b21\u53ea\u63a5\u6536\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5904\u7406. \u7b2c\u4e8c\u6b65: \u9996\u5148\u5c06\u5355\u8bcd\"What\"\u8f93\u9001\u7ed9RNN, \u5b83\u5c06\u4ea7\u751f\u4e00\u4e2a\u8f93\u51faO1. \u7b2c\u4e09\u6b65: \u7ee7\u7eed\u5c06\u5355\u8bcd\"time\"\u8f93\u9001\u7ed9RNN, \u4f46\u6b64\u65f6RNN\u4e0d\u4ec5\u4ec5\u5229\u7528\"time\"\u6765\u4ea7\u751f\u8f93\u51faO2, \u8fd8\u4f1a\u4f7f\u7528\u6765\u81ea\u4e0a\u4e00\u5c42\u9690\u5c42\u8f93\u51faO1\u4f5c\u4e3a\u8f93\u5165\u4fe1\u606f. \u7b2c\u56db\u6b65: \u91cd\u590d\u8fd9\u6837\u7684\u6b65\u9aa4, \u76f4\u5230\u5904\u7406\u5b8c\u6240\u6709\u7684\u5355\u8bcd. \u7b2c\u4e94\u6b65: \u6700\u540e\uff0c\u5c06\u6700\u7ec8\u7684\u9690\u5c42\u8f93\u51faO5\u8fdb\u884c\u5904\u7406\u6765\u89e3\u6790\u7528\u6237\u610f\u56fe.","title":"RNN\u6a21\u578b\u7684\u4f5c\u7528"},{"location":"1.html#rnn_2","text":"\u8fd9\u91cc\u6211\u4eec\u5c06\u4ece\u4e24\u4e2a\u89d2\u5ea6\u5bf9RNN\u6a21\u578b\u8fdb\u884c\u5206\u7c7b. \u7b2c\u4e00\u4e2a\u89d2\u5ea6\u662f\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784, \u7b2c\u4e8c\u4e2a\u89d2\u5ea6\u662fRNN\u7684\u5185\u90e8\u6784\u9020. \u6309\u7167\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784\u8fdb\u884c\u5206\u7c7b: N vs N - RNN N vs 1 - RNN 1 vs N - RNN N vs M - RNN \u6309\u7167RNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b: \u4f20\u7edfRNN LSTM Bi-LSTM GRU Bi-GRU N vs N - RNN: \u5b83\u662fRNN\u6700\u57fa\u7840\u7684\u7ed3\u6784\u5f62\u5f0f, \u6700\u5927\u7684\u7279\u70b9\u5c31\u662f: \u8f93\u5165\u548c\u8f93\u51fa\u5e8f\u5217\u662f\u7b49\u957f\u7684. \u7531\u4e8e\u8fd9\u4e2a\u9650\u5236\u7684\u5b58\u5728, \u4f7f\u5176\u9002\u7528\u8303\u56f4\u6bd4\u8f83\u5c0f, \u53ef\u7528\u4e8e\u751f\u6210\u7b49\u957f\u5ea6\u7684\u5408\u8f99\u8bd7\u53e5. N vs 1 - RNN: \u6709\u65f6\u5019\u6211\u4eec\u8981\u5904\u7406\u7684\u95ee\u9898\u8f93\u5165\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u800c\u8981\u6c42\u8f93\u51fa\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u800c\u4e0d\u662f\u5e8f\u5217\uff0c\u5e94\u8be5\u600e\u6837\u5efa\u6a21\u5462\uff1f\u6211\u4eec\u53ea\u8981\u5728\u6700\u540e\u4e00\u4e2a\u9690\u5c42\u8f93\u51fah\u4e0a\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\u5c31\u53ef\u4ee5\u4e86\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u66f4\u597d\u7684\u660e\u786e\u7ed3\u679c, \u8fd8\u8981\u4f7f\u7528sigmoid\u6216\u8005softmax\u8fdb\u884c\u5904\u7406. \u8fd9\u79cd\u7ed3\u6784\u7ecf\u5e38\u88ab\u5e94\u7528\u5728\u6587\u672c\u5206\u7c7b\u95ee\u9898\u4e0a. 1 vs N - RNN: \u5982\u679c\u8f93\u5165\u4e0d\u662f\u5e8f\u5217\u800c\u8f93\u51fa\u4e3a\u5e8f\u5217\u7684\u60c5\u51b5\u600e\u4e48\u5904\u7406\u5462\uff1f\u6211\u4eec\u6700\u5e38\u91c7\u7528\u7684\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u4f7f\u8be5\u8f93\u5165\u4f5c\u7528\u4e8e\u6bcf\u6b21\u7684\u8f93\u51fa\u4e4b\u4e0a. \u8fd9\u79cd\u7ed3\u6784\u53ef\u7528\u4e8e\u5c06\u56fe\u7247\u751f\u6210\u6587\u5b57\u4efb\u52a1\u7b49. N vs M - RNN: \u8fd9\u662f\u4e00\u79cd\u4e0d\u9650\u8f93\u5165\u8f93\u51fa\u957f\u5ea6\u7684RNN\u7ed3\u6784, \u5b83\u7531\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u4e24\u90e8\u5206\u7ec4\u6210, \u4e24\u8005\u7684\u5185\u90e8\u7ed3\u6784\u90fd\u662f\u67d0\u7c7bRNN, \u5b83\u4e5f\u88ab\u79f0\u4e3aseq2seq\u67b6\u6784. \u8f93\u5165\u6570\u636e\u9996\u5148\u901a\u8fc7\u7f16\u7801\u5668, \u6700\u7ec8\u8f93\u51fa\u4e00\u4e2a\u9690\u542b\u53d8\u91cfc, \u4e4b\u540e\u6700\u5e38\u7528\u7684\u505a\u6cd5\u662f\u4f7f\u7528\u8fd9\u4e2a\u9690\u542b\u53d8\u91cfc\u4f5c\u7528\u5728\u89e3\u7801\u5668\u8fdb\u884c\u89e3\u7801\u7684\u6bcf\u4e00\u6b65\u4e0a, \u4ee5\u4fdd\u8bc1\u8f93\u5165\u4fe1\u606f\u88ab\u6709\u6548\u5229\u7528. seq2seq\u67b6\u6784\u6700\u65e9\u88ab\u63d0\u51fa\u5e94\u7528\u4e8e\u673a\u5668\u7ffb\u8bd1, \u56e0\u4e3a\u5176\u8f93\u5165\u8f93\u51fa\u4e0d\u53d7\u9650\u5236\uff0c\u5982\u4eca\u4e5f\u662f\u5e94\u7528\u6700\u5e7f\u7684RNN\u6a21\u578b\u7ed3\u6784. \u5728\u673a\u5668\u7ffb\u8bd1, \u9605\u8bfb\u7406\u89e3, \u6587\u672c\u6458\u8981\u7b49\u4f17\u591a\u9886\u57df\u90fd\u8fdb\u884c\u4e86\u975e\u5e38\u591a\u7684\u5e94\u7528\u5b9e\u8df5. \u5173\u4e8eRNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b\u7684\u5185\u5bb9\u6211\u4eec\u5c06\u5728\u540e\u9762\u4f7f\u7528\u5355\u72ec\u7684\u5c0f\u8282\u8be6\u7ec6\u8bb2\u89e3.","title":"RNN\u6a21\u578b\u7684\u5206\u7c7b"},{"location":"1.html#_2","text":"\u5b66\u4e60\u4e86\u4ec0\u4e48\u662fRNN\u6a21\u578b: RNN(Recurrent Neural Network), \u4e2d\u6587\u79f0\u4f5c\u5faa\u73af\u795e\u7ecf\u7f51\u7edc, \u5b83\u4e00\u822c\u4ee5\u5e8f\u5217\u6570\u636e\u4e3a\u8f93\u5165, \u901a\u8fc7\u7f51\u7edc\u5185\u90e8\u7684\u7ed3\u6784\u8bbe\u8ba1\u6709\u6548\u6355\u6349\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb\u7279\u5f81, \u4e00\u822c\u4e5f\u662f\u4ee5\u5e8f\u5217\u5f62\u5f0f\u8fdb\u884c\u8f93\u51fa. RNN\u7684\u5faa\u73af\u673a\u5236\u4f7f\u6a21\u578b\u9690\u5c42\u4e0a\u4e00\u65f6\u95f4\u6b65\u4ea7\u751f\u7684\u7ed3\u679c, \u80fd\u591f\u4f5c\u4e3a\u5f53\u4e0b\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206(\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u9664\u4e86\u6b63\u5e38\u7684\u8f93\u5165\u5916\u8fd8\u5305\u62ec\u4e0a\u4e00\u6b65\u7684\u9690\u5c42\u8f93\u51fa)\u5bf9\u5f53\u4e0b\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u4ea7\u751f\u5f71\u54cd. \u5b66\u4e60\u4e86RNN\u6a21\u578b\u7684\u4f5c\u7528: \u56e0\u4e3aRNN\u7ed3\u6784\u80fd\u591f\u5f88\u597d\u5229\u7528\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb, \u56e0\u6b64\u9488\u5bf9\u81ea\u7136\u754c\u5177\u6709\u8fde\u7eed\u6027\u7684\u8f93\u5165\u5e8f\u5217, \u5982\u4eba\u7c7b\u7684\u8bed\u8a00, \u8bed\u97f3\u7b49\u8fdb\u884c\u5f88\u597d\u7684\u5904\u7406, \u5e7f\u6cdb\u5e94\u7528\u4e8eNLP\u9886\u57df\u7684\u5404\u9879\u4efb\u52a1, \u5982\u6587\u672c\u5206\u7c7b, \u60c5\u611f\u5206\u6790, \u610f\u56fe\u8bc6\u522b, \u673a\u5668\u7ffb\u8bd1\u7b49. \u4ee5\u4e00\u4e2a\u7528\u6237\u610f\u56fe\u8bc6\u522b\u7684\u4f8b\u5b50\u5bf9RNN\u7684\u8fd0\u884c\u8fc7\u7a0b\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790: \u7b2c\u4e00\u6b65: \u7528\u6237\u8f93\u5165\u4e86\"What time is it ?\", \u6211\u4eec\u9996\u5148\u9700\u8981\u5bf9\u5b83\u8fdb\u884c\u57fa\u672c\u7684\u5206\u8bcd, \u56e0\u4e3aRNN\u662f\u6309\u7167\u987a\u5e8f\u5de5\u4f5c\u7684, \u6bcf\u6b21\u53ea\u63a5\u6536\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5904\u7406. \u7b2c\u4e8c\u6b65: \u9996\u5148\u5c06\u5355\u8bcd\"What\"\u8f93\u9001\u7ed9RNN, \u5b83\u5c06\u4ea7\u751f\u4e00\u4e2a\u8f93\u51faO1. \u7b2c\u4e09\u6b65: \u7ee7\u7eed\u5c06\u5355\u8bcd\"time\"\u8f93\u9001\u7ed9RNN, \u4f46\u6b64\u65f6RNN\u4e0d\u4ec5\u4ec5\u5229\u7528\"time\"\u6765\u4ea7\u751f\u8f93\u51faO2, \u8fd8\u4f1a\u4f7f\u7528\u6765\u81ea\u4e0a\u4e00\u5c42\u9690\u5c42\u8f93\u51faO1\u4f5c\u4e3a\u8f93\u5165\u4fe1\u606f. \u7b2c\u56db\u6b65: \u91cd\u590d\u8fd9\u6837\u7684\u6b65\u9aa4, \u76f4\u5230\u5904\u7406\u5b8c\u6240\u6709\u7684\u5355\u8bcd. \u7b2c\u4e94\u6b65: \u6700\u540e\uff0c\u5c06\u6700\u7ec8\u7684\u9690\u5c42\u8f93\u51faO5\u8fdb\u884c\u5904\u7406\u6765\u89e3\u6790\u7528\u6237\u610f\u56fe. \u5b66\u4e60\u4e86RNN\u6a21\u578b\u7684\u5206\u7c7b: \u8fd9\u91cc\u6211\u4eec\u5c06\u4ece\u4e24\u4e2a\u89d2\u5ea6\u5bf9RNN\u6a21\u578b\u8fdb\u884c\u5206\u7c7b. \u7b2c\u4e00\u4e2a\u89d2\u5ea6\u662f\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784, \u7b2c\u4e8c\u4e2a\u89d2\u5ea6\u662fRNN\u7684\u5185\u90e8\u6784\u9020. \u6309\u7167\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ed3\u6784\u8fdb\u884c\u5206\u7c7b: N vs N - RNN N vs 1 - RNN 1 vs N - RNN N vs M - RNN N vs N - RNN: \u5b83\u662fRNN\u6700\u57fa\u7840\u7684\u7ed3\u6784\u5f62\u5f0f, \u6700\u5927\u7684\u7279\u70b9\u5c31\u662f: \u8f93\u5165\u548c\u8f93\u51fa\u5e8f\u5217\u662f\u7b49\u957f\u7684. \u7531\u4e8e\u8fd9\u4e2a\u9650\u5236\u7684\u5b58\u5728, \u4f7f\u5176\u9002\u7528\u8303\u56f4\u6bd4\u8f83\u5c0f, \u53ef\u7528\u4e8e\u751f\u6210\u7b49\u957f\u5ea6\u7684\u5408\u8f99\u8bd7\u53e5. N vs 1 - RNN: \u6709\u65f6\u5019\u6211\u4eec\u8981\u5904\u7406\u7684\u95ee\u9898\u8f93\u5165\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u800c\u8981\u6c42\u8f93\u51fa\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u800c\u4e0d\u662f\u5e8f\u5217\uff0c\u5e94\u8be5\u600e\u6837\u5efa\u6a21\u5462\uff1f\u6211\u4eec\u53ea\u8981\u5728\u6700\u540e\u4e00\u4e2a\u9690\u5c42\u8f93\u51fah\u4e0a\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\u5c31\u53ef\u4ee5\u4e86\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u66f4\u597d\u7684\u660e\u786e\u7ed3\u679c, \u8fd8\u8981\u4f7f\u7528sigmoid\u6216\u8005softmax\u8fdb\u884c\u5904\u7406. \u8fd9\u79cd\u7ed3\u6784\u7ecf\u5e38\u88ab\u5e94\u7528\u5728\u6587\u672c\u5206\u7c7b\u95ee\u9898\u4e0a. 1 vs N - RNN: \u5982\u679c\u8f93\u5165\u4e0d\u662f\u5e8f\u5217\u800c\u8f93\u51fa\u4e3a\u5e8f\u5217\u7684\u60c5\u51b5\u600e\u4e48\u5904\u7406\u5462\uff1f\u6211\u4eec\u6700\u5e38\u91c7\u7528\u7684\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u4f7f\u8be5\u8f93\u5165\u4f5c\u7528\u4e8e\u6bcf\u6b21\u7684\u8f93\u51fa\u4e4b\u4e0a. \u8fd9\u79cd\u7ed3\u6784\u53ef\u7528\u4e8e\u5c06\u56fe\u7247\u751f\u6210\u6587\u5b57\u4efb\u52a1\u7b49. N vs M - RNN: \u8fd9\u662f\u4e00\u79cd\u4e0d\u9650\u8f93\u5165\u8f93\u51fa\u957f\u5ea6\u7684RNN\u7ed3\u6784, \u5b83\u7531\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u4e24\u90e8\u5206\u7ec4\u6210, \u4e24\u8005\u7684\u5185\u90e8\u7ed3\u6784\u90fd\u662f\u67d0\u7c7bRNN, \u5b83\u4e5f\u88ab\u79f0\u4e3aseq2seq\u67b6\u6784. \u8f93\u5165\u6570\u636e\u9996\u5148\u901a\u8fc7\u7f16\u7801\u5668, \u6700\u7ec8\u8f93\u51fa\u4e00\u4e2a\u9690\u542b\u53d8\u91cfc, \u4e4b\u540e\u6700\u5e38\u7528\u7684\u505a\u6cd5\u662f\u4f7f\u7528\u8fd9\u4e2a\u9690\u542b\u53d8\u91cfc\u4f5c\u7528\u5728\u89e3\u7801\u5668\u8fdb\u884c\u89e3\u7801\u7684\u6bcf\u4e00\u6b65\u4e0a, \u4ee5\u4fdd\u8bc1\u8f93\u5165\u4fe1\u606f\u88ab\u6709\u6548\u5229\u7528. seq2seq\u67b6\u6784\u6700\u65e9\u88ab\u63d0\u51fa\u5e94\u7528\u4e8e\u673a\u5668\u7ffb\u8bd1, \u56e0\u4e3a\u5176\u8f93\u5165\u8f93\u51fa\u4e0d\u53d7\u9650\u5236\uff0c\u5982\u4eca\u4e5f\u662f\u5e94\u7528\u6700\u5e7f\u7684RNN\u6a21\u578b\u7ed3\u6784. \u5728\u673a\u5668\u7ffb\u8bd1, \u9605\u8bfb\u7406\u89e3, \u6587\u672c\u6458\u8981\u7b49\u4f17\u591a\u9886\u57df\u90fd\u8fdb\u884c\u4e86\u975e\u5e38\u591a\u7684\u5e94\u7528\u5b9e\u8df5. \u6309\u7167RNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b: \u4f20\u7edfRNN LSTM Bi-LSTM GRU Bi-GRU \u5173\u4e8eRNN\u7684\u5185\u90e8\u6784\u9020\u8fdb\u884c\u5206\u7c7b\u7684\u5185\u5bb9\u6211\u4eec\u5c06\u5728\u540e\u9762\u4f7f\u7528\u5355\u72ec\u7684\u5c0f\u8282\u8be6\u7ec6\u8bb2\u89e3.","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"1.html#12-rnn","text":"","title":"1.2 \u4f20\u7edfRNN\u6a21\u578b"},{"location":"1.html#_3","text":"\u4e86\u89e3\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f. \u638c\u63e1Pytorch\u4e2d\u4f20\u7edfRNN\u5de5\u5177\u7684\u4f7f\u7528. \u4e86\u89e3\u4f20\u7edfRNN\u7684\u4f18\u52bf\u4e0e\u7f3a\u70b9.","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"1.html#rnn_3","text":"\u7ed3\u6784\u89e3\u91ca\u56fe: \u5185\u90e8\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u628a\u76ee\u5149\u96c6\u4e2d\u5728\u4e2d\u95f4\u7684\u65b9\u5757\u90e8\u5206, \u5b83\u7684\u8f93\u5165\u6709\u4e24\u90e8\u5206, \u5206\u522b\u662fh(t-1)\u4ee5\u53cax(t), \u4ee3\u8868\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684\u9690\u5c42\u8f93\u51fa, \u4ee5\u53ca\u6b64\u65f6\u95f4\u6b65\u7684\u8f93\u5165, \u5b83\u4eec\u8fdb\u5165RNN\u7ed3\u6784\u4f53\u540e, \u4f1a\"\u878d\u5408\"\u5230\u4e00\u8d77, \u8fd9\u79cd\u878d\u5408\u6211\u4eec\u6839\u636e\u7ed3\u6784\u89e3\u91ca\u53ef\u77e5, \u662f\u5c06\u4e8c\u8005\u8fdb\u884c\u62fc\u63a5, \u5f62\u6210\u65b0\u7684\u5f20\u91cf[x(t), h(t-1)], \u4e4b\u540e\u8fd9\u4e2a\u65b0\u7684\u5f20\u91cf\u5c06\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42(\u7ebf\u6027\u5c42), \u8be5\u5c42\u4f7f\u7528tanh\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570, \u6700\u7ec8\u5f97\u5230\u8be5\u65f6\u95f4\u6b65\u7684\u8f93\u51fah(t), \u5b83\u5c06\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u548cx(t+1)\u4e00\u8d77\u8fdb\u5165\u7ed3\u6784\u4f53. \u4ee5\u6b64\u7c7b\u63a8. \u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u6839\u636e\u7ed3\u6784\u5206\u6790\u5f97\u51fa\u5185\u90e8\u8ba1\u7b97\u516c\u5f0f: \u6fc0\u6d3b\u51fd\u6570tanh\u7684\u4f5c\u7528: \u7528\u4e8e\u5e2e\u52a9\u8c03\u8282\u6d41\u7ecf\u7f51\u7edc\u7684\u503c, tanh\u51fd\u6570\u5c06\u503c\u538b\u7f29\u5728-1\u548c1\u4e4b\u95f4. Pytorch\u4e2d\u4f20\u7edfRNN\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.RNN\u53ef\u8c03\u7528. nn.RNN\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. nonlinearity: \u6fc0\u6d3b\u51fd\u6570\u7684\u9009\u62e9, \u9ed8\u8ba4\u662ftanh. nn.RNN\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. nn.RNN\u4f7f\u7528\u793a\u4f8b: # \u5bfc\u5165\u5de5\u5177\u5305 >>> import torch >>> import torch.nn as nn >>> rnn = nn . RNN ( 5 , 6 , 1 ) >>> input = torch . randn ( 1 , 3 , 5 ) >>> h0 = torch . randn ( 1 , 3 , 6 ) >>> output , hn = rnn ( input , h0 ) >>> output tensor ([[[ 0.4282 , - 0.8475 , - 0.0685 , - 0.4601 , - 0.8357 , 0.1252 ], [ 0.5758 , - 0.2823 , 0.4822 , - 0.4485 , - 0.7362 , 0.0084 ], [ 0.9224 , - 0.7479 , - 0.3682 , - 0.5662 , - 0.9637 , 0.4938 ]]], grad_fn =< StackBackward > ) >>> hn tensor ([[[ 0.4282 , - 0.8475 , - 0.0685 , - 0.4601 , - 0.8357 , 0.1252 ], [ 0.5758 , - 0.2823 , 0.4822 , - 0.4485 , - 0.7362 , 0.0084 ], [ 0.9224 , - 0.7479 , - 0.3682 , - 0.5662 , - 0.9637 , 0.4938 ]]], grad_fn =< StackBackward > ) \u4f20\u7edfRNN\u7684\u4f18\u52bf: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u7b80\u5355, \u5bf9\u8ba1\u7b97\u8d44\u6e90\u8981\u6c42\u4f4e, \u76f8\u6bd4\u4e4b\u540e\u6211\u4eec\u8981\u5b66\u4e60\u7684RNN\u53d8\u4f53:LSTM\u548cGRU\u6a21\u578b\u53c2\u6570\u603b\u91cf\u5c11\u4e86\u5f88\u591a, \u5728\u77ed\u5e8f\u5217\u4efb\u52a1\u4e0a\u6027\u80fd\u548c\u6548\u679c\u90fd\u8868\u73b0\u4f18\u5f02. \u4f20\u7edfRNN\u7684\u7f3a\u70b9: \u4f20\u7edfRNN\u5728\u89e3\u51b3\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u8054\u65f6, \u901a\u8fc7\u5b9e\u8df5\uff0c\u8bc1\u660e\u7ecf\u5178RNN\u8868\u73b0\u5f88\u5dee, \u539f\u56e0\u662f\u5728\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u7684\u65f6\u5019, \u8fc7\u957f\u7684\u5e8f\u5217\u5bfc\u81f4\u68af\u5ea6\u7684\u8ba1\u7b97\u5f02\u5e38, \u53d1\u751f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8. \u4ec0\u4e48\u662f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u5462\uff1f \u6839\u636e\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u548c\u94fe\u5f0f\u6cd5\u5219, \u68af\u5ea6\u7684\u8ba1\u7b97\u53ef\u4ee5\u7b80\u5316\u4e3a\u4ee5\u4e0b\u516c\u5f0f: \u5176\u4e2dsigmoid\u7684\u5bfc\u6570\u503c\u57df\u662f\u56fa\u5b9a\u7684, \u5728[0, 0.25]\u4e4b\u95f4, \u800c\u4e00\u65e6\u516c\u5f0f\u4e2d\u7684w\u4e5f\u5c0f\u4e8e1, \u90a3\u4e48\u901a\u8fc7\u8fd9\u6837\u7684\u516c\u5f0f\u8fde\u4e58\u540e, \u6700\u7ec8\u7684\u68af\u5ea6\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u975e\u5e38\u5c0f, \u8fd9\u79cd\u73b0\u8c61\u79f0\u4f5c\u68af\u5ea6\u6d88\u5931. \u53cd\u4e4b, \u5982\u679c\u6211\u4eec\u4eba\u4e3a\u7684\u589e\u5927w\u7684\u503c, \u4f7f\u5176\u5927\u4e8e1, \u90a3\u4e48\u8fde\u4e58\u591f\u5c31\u53ef\u80fd\u9020\u6210\u68af\u5ea6\u8fc7\u5927, \u79f0\u4f5c\u68af\u5ea6\u7206\u70b8. \u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u7684\u5371\u5bb3: \u5982\u679c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u68af\u5ea6\u6d88\u5931\uff0c\u6743\u91cd\u65e0\u6cd5\u88ab\u66f4\u65b0\uff0c\u6700\u7ec8\u5bfc\u81f4\u8bad\u7ec3\u5931\u8d25; \u68af\u5ea6\u7206\u70b8\u6240\u5e26\u6765\u7684\u68af\u5ea6\u8fc7\u5927\uff0c\u5927\u5e45\u5ea6\u66f4\u65b0\u7f51\u7edc\u53c2\u6570\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u4f1a\u6ea2\u51fa\uff08NaN\u503c\uff09.","title":"\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u56fe"},{"location":"1.html#_4","text":"\u5b66\u4e60\u4e86\u4f20\u7edfRNN\u7684\u7ed3\u6784\u5e76\u8fdb\u884c\u4e86\u5206\u6790; \u5b83\u7684\u8f93\u5165\u6709\u4e24\u90e8\u5206, \u5206\u522b\u662fh(t-1)\u4ee5\u53cax(t), \u4ee3\u8868\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684\u9690\u5c42\u8f93\u51fa, \u4ee5\u53ca\u6b64\u65f6\u95f4\u6b65\u7684\u8f93\u5165, \u5b83\u4eec\u8fdb\u5165RNN\u7ed3\u6784\u4f53\u540e, \u4f1a\"\u878d\u5408\"\u5230\u4e00\u8d77, \u8fd9\u79cd\u878d\u5408\u6211\u4eec\u6839\u636e\u7ed3\u6784\u89e3\u91ca\u53ef\u77e5, \u662f\u5c06\u4e8c\u8005\u8fdb\u884c\u62fc\u63a5, \u5f62\u6210\u65b0\u7684\u5f20\u91cf[x(t), h(t-1)], \u4e4b\u540e\u8fd9\u4e2a\u65b0\u7684\u5f20\u91cf\u5c06\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42(\u7ebf\u6027\u5c42), \u8be5\u5c42\u4f7f\u7528tanh\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570, \u6700\u7ec8\u5f97\u5230\u8be5\u65f6\u95f4\u6b65\u7684\u8f93\u51fah(t), \u5b83\u5c06\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u5165\u548cx(t+1)\u4e00\u8d77\u8fdb\u5165\u7ed3\u6784\u4f53. \u4ee5\u6b64\u7c7b\u63a8. \u6839\u636e\u7ed3\u6784\u5206\u6790\u5f97\u51fa\u4e86\u4f20\u7edfRNN\u7684\u8ba1\u7b97\u516c\u5f0f. \u5b66\u4e60\u4e86\u6fc0\u6d3b\u51fd\u6570tanh\u7684\u4f5c\u7528: \u7528\u4e8e\u5e2e\u52a9\u8c03\u8282\u6d41\u7ecf\u7f51\u7edc\u7684\u503c, tanh\u51fd\u6570\u5c06\u503c\u538b\u7f29\u5728-1\u548c1\u4e4b\u95f4. \u5b66\u4e60\u4e86Pytorch\u4e2d\u4f20\u7edfRNN\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.RNN\u53ef\u8c03\u7528. nn.RNN\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. nonlinearity: \u6fc0\u6d3b\u51fd\u6570\u7684\u9009\u62e9, \u9ed8\u8ba4\u662ftanh. nn.RNN\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. \u5b9e\u73b0\u4e86nn.RNN\u7684\u4f7f\u7528\u793a\u4f8b, \u83b7\u5f97RNN\u7684\u771f\u5b9e\u8fd4\u56de\u7ed3\u679c\u6837\u5f0f. \u5b66\u4e60\u4e86\u4f20\u7edfRNN\u7684\u4f18\u52bf: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u7b80\u5355, \u5bf9\u8ba1\u7b97\u8d44\u6e90\u8981\u6c42\u4f4e, \u76f8\u6bd4\u4e4b\u540e\u6211\u4eec\u8981\u5b66\u4e60\u7684RNN\u53d8\u4f53:LSTM\u548cGRU\u6a21\u578b\u53c2\u6570\u603b\u91cf\u5c11\u4e86\u5f88\u591a, \u5728\u77ed\u5e8f\u5217\u4efb\u52a1\u4e0a\u6027\u80fd\u548c\u6548\u679c\u90fd\u8868\u73b0\u4f18\u5f02. \u5b66\u4e60\u4e86\u4f20\u7edfRNN\u7684\u7f3a\u70b9: \u4f20\u7edfRNN\u5728\u89e3\u51b3\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u8054\u65f6, \u901a\u8fc7\u5b9e\u8df5\uff0c\u8bc1\u660e\u7ecf\u5178RNN\u8868\u73b0\u5f88\u5dee, \u539f\u56e0\u662f\u5728\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u7684\u65f6\u5019, \u8fc7\u957f\u7684\u5e8f\u5217\u5bfc\u81f4\u68af\u5ea6\u7684\u8ba1\u7b97\u5f02\u5e38, \u53d1\u751f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8. \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8: \u6839\u636e\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u548c\u94fe\u5f0f\u6cd5\u5219, \u5f97\u5230\u68af\u5ea6\u7684\u8ba1\u7b97\u7684\u7b80\u5316\u516c\u5f0f:\u5176\u4e2dsigmoid\u7684\u5bfc\u6570\u503c\u57df\u662f\u56fa\u5b9a\u7684, \u5728[0, 0.25]\u4e4b\u95f4, \u800c\u4e00\u65e6\u516c\u5f0f\u4e2d\u7684w\u4e5f\u5c0f\u4e8e1, \u90a3\u4e48\u901a\u8fc7\u8fd9\u6837\u7684\u516c\u5f0f\u8fde\u4e58\u540e, \u6700\u7ec8\u7684\u68af\u5ea6\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u975e\u5e38\u5c0f, \u8fd9\u79cd\u73b0\u8c61\u79f0\u4f5c\u68af\u5ea6\u6d88\u5931. \u53cd\u4e4b, \u5982\u679c\u6211\u4eec\u4eba\u4e3a\u7684\u589e\u5927w\u7684\u503c, \u4f7f\u5176\u5927\u4e8e1, \u90a3\u4e48\u8fde\u4e58\u591f\u5c31\u53ef\u80fd\u9020\u6210\u68af\u5ea6\u8fc7\u5927, \u79f0\u4f5c\u68af\u5ea6\u7206\u70b8. \u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u7684\u5371\u5bb3: \u5982\u679c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u68af\u5ea6\u6d88\u5931\uff0c\u6743\u91cd\u65e0\u6cd5\u88ab\u66f4\u65b0\uff0c\u6700\u7ec8\u5bfc\u81f4\u8bad\u7ec3\u5931\u8d25; \u68af\u5ea6\u7206\u70b8\u6240\u5e26\u6765\u7684\u68af\u5ea6\u8fc7\u5927\uff0c\u5927\u5e45\u5ea6\u66f4\u65b0\u7f51\u7edc\u53c2\u6570\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u4f1a\u6ea2\u51fa\uff08NaN\u503c\uff09.","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"1.html#13-lstm","text":"","title":"1.3 LSTM\u6a21\u578b"},{"location":"1.html#_5","text":"\u4e86\u89e3LSTM\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f. \u638c\u63e1Pytorch\u4e2dLSTM\u5de5\u5177\u7684\u4f7f\u7528. \u4e86\u89e3LSTM\u7684\u4f18\u52bf\u4e0e\u7f3a\u70b9. LSTM\uff08Long Short-Term Memory\uff09\u4e5f\u79f0\u957f\u77ed\u65f6\u8bb0\u5fc6\u7ed3\u6784, \u5b83\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u4e0e\u7ecf\u5178RNN\u76f8\u6bd4\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6LSTM\u7684\u7ed3\u6784\u66f4\u590d\u6742, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u9057\u5fd8\u95e8 \u8f93\u5165\u95e8 \u7ec6\u80de\u72b6\u6001 \u8f93\u51fa\u95e8","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"1.html#lstm","text":"\u7ed3\u6784\u89e3\u91ca\u56fe: \u9057\u5fd8\u95e8\u90e8\u5206\u7ed3\u6784\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u9057\u5fd8\u95e8\u7ed3\u6784\u5206\u6790: \u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u975e\u5e38\u76f8\u4f3c, \u9996\u5148\u5c06\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165x(t)\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u62fc\u63a5, \u5f97\u5230[x(t), h(t-1)], \u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u505a\u53d8\u6362, \u6700\u540e\u901a\u8fc7sigmoid\u51fd\u6570\u8fdb\u884c\u6fc0\u6d3b\u5f97\u5230f(t), \u6211\u4eec\u53ef\u4ee5\u5c06f(t)\u770b\u4f5c\u662f\u95e8\u503c, \u597d\u6bd4\u4e00\u6247\u95e8\u5f00\u5408\u7684\u5927\u5c0f\u7a0b\u5ea6, \u95e8\u503c\u90fd\u5c06\u4f5c\u7528\u5728\u901a\u8fc7\u8be5\u6247\u95e8\u7684\u5f20\u91cf, \u9057\u5fd8\u95e8\u95e8\u503c\u5c06\u4f5c\u7528\u7684\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u4e0a, \u4ee3\u8868\u9057\u5fd8\u8fc7\u53bb\u7684\u591a\u5c11\u4fe1\u606f, \u53c8\u56e0\u4e3a\u9057\u5fd8\u95e8\u95e8\u503c\u662f\u7531x(t), h(t-1)\u8ba1\u7b97\u5f97\u6765\u7684, \u56e0\u6b64\u6574\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u6839\u636e\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165\u548c\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u6765\u51b3\u5b9a\u9057\u5fd8\u591a\u5c11\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u6240\u643a\u5e26\u7684\u8fc7\u5f80\u4fe1\u606f. \u9057\u5fd8\u95e8\u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u6fc0\u6d3b\u51fd\u6570sigmiod\u7684\u4f5c\u7528: \u7528\u4e8e\u5e2e\u52a9\u8c03\u8282\u6d41\u7ecf\u7f51\u7edc\u7684\u503c, sigmoid\u51fd\u6570\u5c06\u503c\u538b\u7f29\u57280\u548c1\u4e4b\u95f4. \u8f93\u5165\u95e8\u90e8\u5206\u7ed3\u6784\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u8f93\u5165\u95e8\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u770b\u5230\u8f93\u5165\u95e8\u7684\u8ba1\u7b97\u516c\u5f0f\u6709\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5c31\u662f\u4ea7\u751f\u8f93\u5165\u95e8\u95e8\u503c\u7684\u516c\u5f0f, \u5b83\u548c\u9057\u5fd8\u95e8\u516c\u5f0f\u51e0\u4e4e\u76f8\u540c, \u533a\u522b\u53ea\u662f\u5728\u4e8e\u5b83\u4eec\u4e4b\u540e\u8981\u4f5c\u7528\u7684\u76ee\u6807\u4e0a. \u8fd9\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u8f93\u5165\u4fe1\u606f\u6709\u591a\u5c11\u9700\u8981\u8fdb\u884c\u8fc7\u6ee4. \u8f93\u5165\u95e8\u7684\u7b2c\u4e8c\u4e2a\u516c\u5f0f\u662f\u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u76f8\u540c. \u5bf9\u4e8eLSTM\u6765\u8bb2, \u5b83\u5f97\u5230\u7684\u662f\u5f53\u524d\u7684\u7ec6\u80de\u72b6\u6001, \u800c\u4e0d\u662f\u50cf\u7ecf\u5178RNN\u4e00\u6837\u5f97\u5230\u7684\u662f\u9690\u542b\u72b6\u6001. \u8f93\u5165\u95e8\u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u5206\u6790: \u7ec6\u80de\u66f4\u65b0\u7684\u7ed3\u6784\u4e0e\u8ba1\u7b97\u516c\u5f0f\u975e\u5e38\u5bb9\u6613\u7406\u89e3, \u8fd9\u91cc\u6ca1\u6709\u5168\u8fde\u63a5\u5c42, \u53ea\u662f\u5c06\u521a\u521a\u5f97\u5230\u7684\u9057\u5fd8\u95e8\u95e8\u503c\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u5f97\u5230\u7684C(t-1)\u76f8\u4e58, \u518d\u52a0\u4e0a\u8f93\u5165\u95e8\u95e8\u503c\u4e0e\u5f53\u524d\u65f6\u95f4\u6b65\u5f97\u5230\u7684\u672a\u66f4\u65b0C(t)\u76f8\u4e58\u7684\u7ed3\u679c. \u6700\u7ec8\u5f97\u5230\u66f4\u65b0\u540e\u7684C(t)\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u8fc7\u7a0b\u5c31\u662f\u5bf9\u9057\u5fd8\u95e8\u548c\u8f93\u5165\u95e8\u7684\u5e94\u7528. \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u8fc7\u7a0b\u6f14\u793a: \u8f93\u51fa\u95e8\u90e8\u5206\u7ed3\u6784\u56fe\u4e0e\u8ba1\u7b97\u516c\u5f0f: \u8f93\u51fa\u95e8\u7ed3\u6784\u5206\u6790: \u8f93\u51fa\u95e8\u90e8\u5206\u7684\u516c\u5f0f\u4e5f\u662f\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5373\u662f\u8ba1\u7b97\u8f93\u51fa\u95e8\u7684\u95e8\u503c, \u5b83\u548c\u9057\u5fd8\u95e8\uff0c\u8f93\u5165\u95e8\u8ba1\u7b97\u65b9\u5f0f\u76f8\u540c. \u7b2c\u4e8c\u4e2a\u5373\u662f\u4f7f\u7528\u8fd9\u4e2a\u95e8\u503c\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t), \u4ed6\u5c06\u4f5c\u7528\u5728\u66f4\u65b0\u540e\u7684\u7ec6\u80de\u72b6\u6001C(t)\u4e0a, \u5e76\u505atanh\u6fc0\u6d3b, \u6700\u7ec8\u5f97\u5230h(t)\u4f5c\u4e3a\u4e0b\u4e00\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u8f93\u51fa\u95e8\u7684\u8fc7\u7a0b, \u5c31\u662f\u4e3a\u4e86\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t). \u8f93\u51fa\u95e8\u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a: \u4ec0\u4e48\u662fBi-LSTM ? Bi-LSTM\u5373\u53cc\u5411LSTM, \u5b83\u6ca1\u6709\u6539\u53d8LSTM\u672c\u8eab\u4efb\u4f55\u7684\u5185\u90e8\u7ed3\u6784, \u53ea\u662f\u5c06LSTM\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. Bi-LSTM\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u770b\u5230\u56fe\u4e2d\u5bf9\"\u6211\u7231\u4e2d\u56fd\"\u8fd9\u53e5\u8bdd\u6216\u8005\u53eb\u8fd9\u4e2a\u8f93\u5165\u5e8f\u5217, \u8fdb\u884c\u4e86\u4ece\u5de6\u5230\u53f3\u548c\u4ece\u53f3\u5230\u5de6\u4e24\u6b21LSTM\u5904\u7406, \u5c06\u5f97\u5230\u7684\u7ed3\u679c\u5f20\u91cf\u8fdb\u884c\u4e86\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. \u8fd9\u79cd\u7ed3\u6784\u80fd\u591f\u6355\u6349\u8bed\u8a00\u8bed\u6cd5\u4e2d\u4e00\u4e9b\u7279\u5b9a\u7684\u524d\u7f6e\u6216\u540e\u7f6e\u7279\u5f81, \u589e\u5f3a\u8bed\u4e49\u5173\u8054,\u4f46\u662f\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u590d\u6742\u5ea6\u4e5f\u968f\u4e4b\u589e\u52a0\u4e86\u4e00\u500d, \u4e00\u822c\u9700\u8981\u5bf9\u8bed\u6599\u548c\u8ba1\u7b97\u8d44\u6e90\u8fdb\u884c\u8bc4\u4f30\u540e\u51b3\u5b9a\u662f\u5426\u4f7f\u7528\u8be5\u7ed3\u6784. Pytorch\u4e2dLSTM\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.LSTM\u53ef\u8c03\u7528. nn.LSTM\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. bidirectional: \u662f\u5426\u9009\u62e9\u4f7f\u7528\u53cc\u5411LSTM, \u5982\u679c\u4e3aTrue, \u5219\u4f7f\u7528; \u9ed8\u8ba4\u4e0d\u4f7f\u7528. nn.LSTM\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. c0: \u521d\u59cb\u5316\u7684\u7ec6\u80de\u72b6\u6001\u5f20\u91cfc. nn.LSTM\u4f7f\u7528\u793a\u4f8b: # \u5b9a\u4e49LSTM\u7684\u53c2\u6570\u542b\u4e49: (input_size, hidden_size, num_layers) # \u5b9a\u4e49\u8f93\u5165\u5f20\u91cf\u7684\u53c2\u6570\u542b\u4e49: (sequence_length, batch_size, input_size) # \u5b9a\u4e49\u9690\u85cf\u5c42\u521d\u59cb\u5f20\u91cf\u548c\u7ec6\u80de\u521d\u59cb\u72b6\u6001\u5f20\u91cf\u7684\u53c2\u6570\u542b\u4e49: # (num_layers * num_directions, batch_size, hidden_size) >>> import torch.nn as nn >>> import torch >>> rnn = nn . LSTM ( 5 , 6 , 2 ) >>> input = torch . randn ( 1 , 3 , 5 ) >>> h0 = torch . randn ( 2 , 3 , 6 ) >>> c0 = torch . randn ( 2 , 3 , 6 ) >>> output , ( hn , cn ) = rnn ( input , ( h0 , c0 )) >>> output tensor ([[[ 0.0447 , - 0.0335 , 0.1454 , 0.0438 , 0.0865 , 0.0416 ], [ 0.0105 , 0.1923 , 0.5507 , - 0.1742 , 0.1569 , - 0.0548 ], [ - 0.1186 , 0.1835 , - 0.0022 , - 0.1388 , - 0.0877 , - 0.4007 ]]], grad_fn =< StackBackward > ) >>> hn tensor ([[[ 0.4647 , - 0.2364 , 0.0645 , - 0.3996 , - 0.0500 , - 0.0152 ], [ 0.3852 , 0.0704 , 0.2103 , - 0.2524 , 0.0243 , 0.0477 ], [ 0.2571 , 0.0608 , 0.2322 , 0.1815 , - 0.0513 , - 0.0291 ]], [[ 0.0447 , - 0.0335 , 0.1454 , 0.0438 , 0.0865 , 0.0416 ], [ 0.0105 , 0.1923 , 0.5507 , - 0.1742 , 0.1569 , - 0.0548 ], [ - 0.1186 , 0.1835 , - 0.0022 , - 0.1388 , - 0.0877 , - 0.4007 ]]], grad_fn =< StackBackward > ) >>> cn tensor ([[[ 0.8083 , - 0.5500 , 0.1009 , - 0.5806 , - 0.0668 , - 0.1161 ], [ 0.7438 , 0.0957 , 0.5509 , - 0.7725 , 0.0824 , 0.0626 ], [ 0.3131 , 0.0920 , 0.8359 , 0.9187 , - 0.4826 , - 0.0717 ]], [[ 0.1240 , - 0.0526 , 0.3035 , 0.1099 , 0.5915 , 0.0828 ], [ 0.0203 , 0.8367 , 0.9832 , - 0.4454 , 0.3917 , - 0.1983 ], [ - 0.2976 , 0.7764 , - 0.0074 , - 0.1965 , - 0.1343 , - 0.6683 ]]], grad_fn =< StackBackward > ) LSTM\u4f18\u52bf: LSTM\u7684\u95e8\u7ed3\u6784\u80fd\u591f\u6709\u6548\u51cf\u7f13\u957f\u5e8f\u5217\u95ee\u9898\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u867d\u7136\u5e76\u4e0d\u80fd\u675c\u7edd\u8fd9\u79cd\u73b0\u8c61, \u4f46\u5728\u66f4\u957f\u7684\u5e8f\u5217\u95ee\u9898\u4e0a\u8868\u73b0\u4f18\u4e8e\u4f20\u7edfRNN. LSTM\u7f3a\u70b9: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u76f8\u5bf9\u8f83\u590d\u6742, \u56e0\u6b64\u8bad\u7ec3\u6548\u7387\u5728\u540c\u7b49\u7b97\u529b\u4e0b\u8f83\u4f20\u7edfRNN\u4f4e\u5f88\u591a.","title":"LSTM\u7684\u5185\u90e8\u7ed3\u6784\u56fe"},{"location":"1.html#_6","text":"LSTM\uff08Long Short-Term Memory\uff09\u4e5f\u79f0\u957f\u77ed\u65f6\u8bb0\u5fc6\u7ed3\u6784, \u5b83\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u4e0e\u7ecf\u5178RNN\u76f8\u6bd4\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6LSTM\u7684\u7ed3\u6784\u66f4\u590d\u6742, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u9057\u5fd8\u95e8 \u8f93\u5165\u95e8 \u8f93\u51fa\u95e8 \u7ec6\u80de\u72b6\u6001 \u9057\u5fd8\u95e8\u7ed3\u6784\u5206\u6790: \u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u975e\u5e38\u76f8\u4f3c, \u9996\u5148\u5c06\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165x(t)\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u62fc\u63a5, \u5f97\u5230[x(t), h(t-1)], \u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u505a\u53d8\u6362, \u6700\u540e\u901a\u8fc7sigmoid\u51fd\u6570\u8fdb\u884c\u6fc0\u6d3b\u5f97\u5230f(t), \u6211\u4eec\u53ef\u4ee5\u5c06f(t)\u770b\u4f5c\u662f\u95e8\u503c, \u597d\u6bd4\u4e00\u6247\u95e8\u5f00\u5408\u7684\u5927\u5c0f\u7a0b\u5ea6, \u95e8\u503c\u90fd\u5c06\u4f5c\u7528\u5728\u901a\u8fc7\u8be5\u6247\u95e8\u7684\u5f20\u91cf, \u9057\u5fd8\u95e8\u95e8\u503c\u5c06\u4f5c\u7528\u7684\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u4e0a, \u4ee3\u8868\u9057\u5fd8\u8fc7\u53bb\u7684\u591a\u5c11\u4fe1\u606f, \u53c8\u56e0\u4e3a\u9057\u5fd8\u95e8\u95e8\u503c\u662f\u7531x(t), h(t-1)\u8ba1\u7b97\u5f97\u6765\u7684, \u56e0\u6b64\u6574\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u6839\u636e\u5f53\u524d\u65f6\u95f4\u6b65\u8f93\u5165\u548c\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u9690\u542b\u72b6\u6001h(t-1)\u6765\u51b3\u5b9a\u9057\u5fd8\u591a\u5c11\u4e0a\u4e00\u5c42\u7684\u7ec6\u80de\u72b6\u6001\u6240\u643a\u5e26\u7684\u8fc7\u5f80\u4fe1\u606f. \u8f93\u5165\u95e8\u7ed3\u6784\u5206\u6790: \u6211\u4eec\u770b\u5230\u8f93\u5165\u95e8\u7684\u8ba1\u7b97\u516c\u5f0f\u6709\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5c31\u662f\u4ea7\u751f\u8f93\u5165\u95e8\u95e8\u503c\u7684\u516c\u5f0f, \u5b83\u548c\u9057\u5fd8\u95e8\u516c\u5f0f\u51e0\u4e4e\u76f8\u540c, \u533a\u522b\u53ea\u662f\u5728\u4e8e\u5b83\u4eec\u4e4b\u540e\u8981\u4f5c\u7528\u7684\u76ee\u6807\u4e0a. \u8fd9\u4e2a\u516c\u5f0f\u610f\u5473\u7740\u8f93\u5165\u4fe1\u606f\u6709\u591a\u5c11\u9700\u8981\u8fdb\u884c\u8fc7\u6ee4. \u8f93\u5165\u95e8\u7684\u7b2c\u4e8c\u4e2a\u516c\u5f0f\u662f\u4e0e\u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u8ba1\u7b97\u76f8\u540c. \u5bf9\u4e8eLSTM\u6765\u8bb2, \u5b83\u5f97\u5230\u7684\u662f\u5f53\u524d\u7684\u7ec6\u80de\u72b6\u6001, \u800c\u4e0d\u662f\u50cf\u7ecf\u5178RNN\u4e00\u6837\u5f97\u5230\u7684\u662f\u9690\u542b\u72b6\u6001. \u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u5206\u6790: \u7ec6\u80de\u66f4\u65b0\u7684\u7ed3\u6784\u4e0e\u8ba1\u7b97\u516c\u5f0f\u975e\u5e38\u5bb9\u6613\u7406\u89e3, \u8fd9\u91cc\u6ca1\u6709\u5168\u8fde\u63a5\u5c42, \u53ea\u662f\u5c06\u521a\u521a\u5f97\u5230\u7684\u9057\u5fd8\u95e8\u95e8\u503c\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6b65\u5f97\u5230\u7684C(t-1)\u76f8\u4e58, \u518d\u52a0\u4e0a\u8f93\u5165\u95e8\u95e8\u503c\u4e0e\u5f53\u524d\u65f6\u95f4\u6b65\u5f97\u5230\u7684\u672a\u66f4\u65b0C(t)\u76f8\u4e58\u7684\u7ed3\u679c. \u6700\u7ec8\u5f97\u5230\u66f4\u65b0\u540e\u7684C(t)\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u7ec6\u80de\u72b6\u6001\u66f4\u65b0\u8fc7\u7a0b\u5c31\u662f\u5bf9\u9057\u5fd8\u95e8\u548c\u8f93\u5165\u95e8\u7684\u5e94\u7528. \u8f93\u51fa\u95e8\u7ed3\u6784\u5206\u6790: \u8f93\u51fa\u95e8\u90e8\u5206\u7684\u516c\u5f0f\u4e5f\u662f\u4e24\u4e2a, \u7b2c\u4e00\u4e2a\u5373\u662f\u8ba1\u7b97\u8f93\u51fa\u95e8\u7684\u95e8\u503c, \u5b83\u548c\u9057\u5fd8\u95e8\uff0c\u8f93\u5165\u95e8\u8ba1\u7b97\u65b9\u5f0f\u76f8\u540c. \u7b2c\u4e8c\u4e2a\u5373\u662f\u4f7f\u7528\u8fd9\u4e2a\u95e8\u503c\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t), \u4ed6\u5c06\u4f5c\u7528\u5728\u66f4\u65b0\u540e\u7684\u7ec6\u80de\u72b6\u6001C(t)\u4e0a, \u5e76\u505atanh\u6fc0\u6d3b, \u6700\u7ec8\u5f97\u5230h(t)\u4f5c\u4e3a\u4e0b\u4e00\u65f6\u95f4\u6b65\u8f93\u5165\u7684\u4e00\u90e8\u5206. \u6574\u4e2a\u8f93\u51fa\u95e8\u7684\u8fc7\u7a0b, \u5c31\u662f\u4e3a\u4e86\u4ea7\u751f\u9690\u542b\u72b6\u6001h(t). \u4ec0\u4e48\u662fBi-LSTM ? Bi-LSTM\u5373\u53cc\u5411LSTM, \u5b83\u6ca1\u6709\u6539\u53d8LSTM\u672c\u8eab\u4efb\u4f55\u7684\u5185\u90e8\u7ed3\u6784, \u53ea\u662f\u5c06LSTM\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. Pytorch\u4e2dLSTM\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.LSTM\u53ef\u8c03\u7528. LSTM\u4f18\u52bf: LSTM\u7684\u95e8\u7ed3\u6784\u80fd\u591f\u6709\u6548\u51cf\u7f13\u957f\u5e8f\u5217\u95ee\u9898\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u867d\u7136\u5e76\u4e0d\u80fd\u675c\u7edd\u8fd9\u79cd\u73b0\u8c61, \u4f46\u5728\u66f4\u957f\u7684\u5e8f\u5217\u95ee\u9898\u4e0a\u8868\u73b0\u4f18\u4e8e\u4f20\u7edfRNN. LSTM\u7f3a\u70b9: \u7531\u4e8e\u5185\u90e8\u7ed3\u6784\u76f8\u5bf9\u8f83\u590d\u6742, \u56e0\u6b64\u8bad\u7ec3\u6548\u7387\u5728\u540c\u7b49\u7b97\u529b\u4e0b\u8f83\u4f20\u7edfRNN\u4f4e\u5f88\u591a.","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"1.html#14-gru","text":"","title":"1.4 GRU\u6a21\u578b"},{"location":"1.html#_7","text":"\u4e86\u89e3GRU\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f. \u638c\u63e1Pytorch\u4e2dGRU\u5de5\u5177\u7684\u4f7f\u7528. \u4e86\u89e3GRU\u7684\u4f18\u52bf\u4e0e\u7f3a\u70b9. GRU\uff08Gated Recurrent Unit\uff09\u4e5f\u79f0\u95e8\u63a7\u5faa\u73af\u5355\u5143\u7ed3\u6784, \u5b83\u4e5f\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u540cLSTM\u4e00\u6837\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6\u5b83\u7684\u7ed3\u6784\u548c\u8ba1\u7b97\u8981\u6bd4LSTM\u66f4\u7b80\u5355, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u66f4\u65b0\u95e8 \u91cd\u7f6e\u95e8","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"1.html#gru","text":"\u7ed3\u6784\u89e3\u91ca\u56fe: GRU\u7684\u66f4\u65b0\u95e8\u548c\u91cd\u7f6e\u95e8\u7ed3\u6784\u56fe: \u5185\u90e8\u7ed3\u6784\u5206\u6790: \u548c\u4e4b\u524d\u5206\u6790\u8fc7\u7684LSTM\u4e2d\u7684\u95e8\u63a7\u4e00\u6837, \u9996\u5148\u8ba1\u7b97\u66f4\u65b0\u95e8\u548c\u91cd\u7f6e\u95e8\u7684\u95e8\u503c, \u5206\u522b\u662fz(t)\u548cr(t), \u8ba1\u7b97\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528X(t)\u4e0eh(t-1)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u6362, \u518d\u7ecf\u8fc7sigmoid\u6fc0\u6d3b. \u4e4b\u540e\u91cd\u7f6e\u95e8\u95e8\u503c\u4f5c\u7528\u5728\u4e86h(t-1)\u4e0a, \u4ee3\u8868\u63a7\u5236\u4e0a\u4e00\u65f6\u95f4\u6b65\u4f20\u6765\u7684\u4fe1\u606f\u6709\u591a\u5c11\u53ef\u4ee5\u88ab\u5229\u7528. \u63a5\u7740\u5c31\u662f\u4f7f\u7528\u8fd9\u4e2a\u91cd\u7f6e\u540e\u7684h(t-1)\u8fdb\u884c\u57fa\u672c\u7684RNN\u8ba1\u7b97, \u5373\u4e0ex(t)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u5316, \u7ecf\u8fc7tanh\u6fc0\u6d3b, \u5f97\u5230\u65b0\u7684h(t). \u6700\u540e\u66f4\u65b0\u95e8\u7684\u95e8\u503c\u4f1a\u4f5c\u7528\u5728\u65b0\u7684h(t)\uff0c\u800c1-\u95e8\u503c\u4f1a\u4f5c\u7528\u5728h(t-1)\u4e0a, \u968f\u540e\u5c06\u4e24\u8005\u7684\u7ed3\u679c\u76f8\u52a0, \u5f97\u5230\u6700\u7ec8\u7684\u9690\u542b\u72b6\u6001\u8f93\u51fah(t), \u8fd9\u4e2a\u8fc7\u7a0b\u610f\u5473\u7740\u66f4\u65b0\u95e8\u6709\u80fd\u529b\u4fdd\u7559\u4e4b\u524d\u7684\u7ed3\u679c, \u5f53\u95e8\u503c\u8d8b\u4e8e1\u65f6, \u8f93\u51fa\u5c31\u662f\u65b0\u7684h(t), \u800c\u5f53\u95e8\u503c\u8d8b\u4e8e0\u65f6, \u8f93\u51fa\u5c31\u662f\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684h(t-1). Bi-GRU\u4e0eBi-LSTM\u7684\u903b\u8f91\u76f8\u540c, \u90fd\u662f\u4e0d\u6539\u53d8\u5176\u5185\u90e8\u7ed3\u6784, \u800c\u662f\u5c06\u6a21\u578b\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. \u5177\u4f53\u53c2\u89c1\u4e0a\u5c0f\u8282\u4e2d\u7684Bi-LSTM. Pytorch\u4e2dGRU\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.GRU\u53ef\u8c03\u7528. nn.GRU\u7c7b\u521d\u59cb\u5316\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input_size: \u8f93\u5165\u5f20\u91cfx\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. hidden_size: \u9690\u5c42\u5f20\u91cfh\u4e2d\u7279\u5f81\u7ef4\u5ea6\u7684\u5927\u5c0f. num_layers: \u9690\u542b\u5c42\u7684\u6570\u91cf. bidirectional: \u662f\u5426\u9009\u62e9\u4f7f\u7528\u53cc\u5411LSTM, \u5982\u679c\u4e3aTrue, \u5219\u4f7f\u7528; \u9ed8\u8ba4\u4e0d\u4f7f\u7528. nn.GRU\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e3b\u8981\u53c2\u6570\u89e3\u91ca: input: \u8f93\u5165\u5f20\u91cfx. h0: \u521d\u59cb\u5316\u7684\u9690\u5c42\u5f20\u91cfh. nn.GRU\u4f7f\u7528\u793a\u4f8b: >>> import torch >>> import torch.nn as nn >>> rnn = nn . GRU ( 5 , 6 , 2 ) >>> input = torch . randn ( 1 , 3 , 5 ) >>> h0 = torch . randn ( 2 , 3 , 6 ) >>> output , hn = rnn ( input , h0 ) >>> output tensor ([[[ - 0.2097 , - 2.2225 , 0.6204 , - 0.1745 , - 0.1749 , - 0.0460 ], [ - 0.3820 , 0.0465 , - 0.4798 , 0.6837 , - 0.7894 , 0.5173 ], [ - 0.0184 , - 0.2758 , 1.2482 , 0.5514 , - 0.9165 , - 0.6667 ]]], grad_fn =< StackBackward > ) >>> hn tensor ([[[ 0.6578 , - 0.4226 , - 0.2129 , - 0.3785 , 0.5070 , 0.4338 ], [ - 0.5072 , 0.5948 , 0.8083 , 0.4618 , 0.1629 , - 0.1591 ], [ 0.2430 , - 0.4981 , 0.3846 , - 0.4252 , 0.7191 , 0.5420 ]], [[ - 0.2097 , - 2.2225 , 0.6204 , - 0.1745 , - 0.1749 , - 0.0460 ], [ - 0.3820 , 0.0465 , - 0.4798 , 0.6837 , - 0.7894 , 0.5173 ], [ - 0.0184 , - 0.2758 , 1.2482 , 0.5514 , - 0.9165 , - 0.6667 ]]], grad_fn =< StackBackward > ) GRU\u7684\u4f18\u52bf: GRU\u548cLSTM\u4f5c\u7528\u76f8\u540c, \u5728\u6355\u6349\u957f\u5e8f\u5217\u8bed\u4e49\u5173\u8054\u65f6, \u80fd\u6709\u6548\u6291\u5236\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u6548\u679c\u90fd\u4f18\u4e8e\u4f20\u7edfRNN\u4e14\u8ba1\u7b97\u590d\u6742\u5ea6\u76f8\u6bd4LSTM\u8981\u5c0f. GRU\u7684\u7f3a\u70b9: GRU\u4ecd\u7136\u4e0d\u80fd\u5b8c\u5168\u89e3\u51b3\u68af\u5ea6\u6d88\u5931\u95ee\u9898, \u540c\u65f6\u5176\u4f5c\u7528RNN\u7684\u53d8\u4f53, \u6709\u7740RNN\u7ed3\u6784\u672c\u8eab\u7684\u4e00\u5927\u5f0a\u7aef, \u5373\u4e0d\u53ef\u5e76\u884c\u8ba1\u7b97, \u8fd9\u5728\u6570\u636e\u91cf\u548c\u6a21\u578b\u4f53\u91cf\u9010\u6b65\u589e\u5927\u7684\u672a\u6765, \u662fRNN\u53d1\u5c55\u7684\u5173\u952e\u74f6\u9888.","title":"GRU\u7684\u5185\u90e8\u7ed3\u6784\u56fe\u548c\u8ba1\u7b97\u516c\u5f0f"},{"location":"1.html#_8","text":"GRU\uff08Gated Recurrent Unit\uff09\u4e5f\u79f0\u95e8\u63a7\u5faa\u73af\u5355\u5143\u7ed3\u6784, \u5b83\u4e5f\u662f\u4f20\u7edfRNN\u7684\u53d8\u4f53, \u540cLSTM\u4e00\u6837\u80fd\u591f\u6709\u6548\u6355\u6349\u957f\u5e8f\u5217\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u8054, \u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u73b0\u8c61. \u540c\u65f6\u5b83\u7684\u7ed3\u6784\u548c\u8ba1\u7b97\u8981\u6bd4LSTM\u66f4\u7b80\u5355, \u5b83\u7684\u6838\u5fc3\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\u53bb\u89e3\u6790: \u66f4\u65b0\u95e8 \u91cd\u7f6e\u95e8 \u5185\u90e8\u7ed3\u6784\u5206\u6790: \u548c\u4e4b\u524d\u5206\u6790\u8fc7\u7684LSTM\u4e2d\u7684\u95e8\u63a7\u4e00\u6837, \u9996\u5148\u8ba1\u7b97\u66f4\u65b0\u95e8\u548c\u91cd\u7f6e\u95e8\u7684\u95e8\u503c, \u5206\u522b\u662fz(t)\u548cr(t), \u8ba1\u7b97\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528X(t)\u4e0eh(t-1)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u6362, \u518d\u7ecf\u8fc7sigmoid\u6fc0\u6d3b. \u4e4b\u540e\u91cd\u7f6e\u95e8\u95e8\u503c\u4f5c\u7528\u5728\u4e86h(t-1)\u4e0a, \u4ee3\u8868\u63a7\u5236\u4e0a\u4e00\u65f6\u95f4\u6b65\u4f20\u6765\u7684\u4fe1\u606f\u6709\u591a\u5c11\u53ef\u4ee5\u88ab\u5229\u7528. \u63a5\u7740\u5c31\u662f\u4f7f\u7528\u8fd9\u4e2a\u91cd\u7f6e\u540e\u7684h(t-1)\u8fdb\u884c\u57fa\u672c\u7684RNN\u8ba1\u7b97, \u5373\u4e0ex(t)\u62fc\u63a5\u8fdb\u884c\u7ebf\u6027\u53d8\u5316, \u7ecf\u8fc7tanh\u6fc0\u6d3b, \u5f97\u5230\u65b0\u7684h(t). \u6700\u540e\u66f4\u65b0\u95e8\u7684\u95e8\u503c\u4f1a\u4f5c\u7528\u5728\u65b0\u7684h(t)\uff0c\u800c1-\u95e8\u503c\u4f1a\u4f5c\u7528\u5728h(t-1)\u4e0a, \u968f\u540e\u5c06\u4e24\u8005\u7684\u7ed3\u679c\u76f8\u52a0, \u5f97\u5230\u6700\u7ec8\u7684\u9690\u542b\u72b6\u6001\u8f93\u51fah(t), \u8fd9\u4e2a\u8fc7\u7a0b\u610f\u5473\u7740\u66f4\u65b0\u95e8\u6709\u80fd\u529b\u4fdd\u7559\u4e4b\u524d\u7684\u7ed3\u679c, \u5f53\u95e8\u503c\u8d8b\u4e8e1\u65f6, \u8f93\u51fa\u5c31\u662f\u65b0\u7684h(t), \u800c\u5f53\u95e8\u503c\u8d8b\u4e8e0\u65f6, \u8f93\u51fa\u5c31\u662f\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684h(t-1). Bi-GRU\u4e0eBi-LSTM\u7684\u903b\u8f91\u76f8\u540c, \u90fd\u662f\u4e0d\u6539\u53d8\u5176\u5185\u90e8\u7ed3\u6784, \u800c\u662f\u5c06\u6a21\u578b\u5e94\u7528\u4e24\u6b21\u4e14\u65b9\u5411\u4e0d\u540c, \u518d\u5c06\u4e24\u6b21\u5f97\u5230\u7684LSTM\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa. \u5177\u4f53\u53c2\u89c1\u4e0a\u5c0f\u8282\u4e2d\u7684Bi-LSTM. Pytorch\u4e2dGRU\u5de5\u5177\u7684\u4f7f\u7528: \u4f4d\u7f6e: \u5728torch.nn\u5de5\u5177\u5305\u4e4b\u4e2d, \u901a\u8fc7torch.nn.GRU\u53ef\u8c03\u7528. GRU\u7684\u4f18\u52bf: GRU\u548cLSTM\u4f5c\u7528\u76f8\u540c, \u5728\u6355\u6349\u957f\u5e8f\u5217\u8bed\u4e49\u5173\u8054\u65f6, \u80fd\u6709\u6548\u6291\u5236\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8, \u6548\u679c\u90fd\u4f18\u4e8e\u4f20\u7edfRNN\u4e14\u8ba1\u7b97\u590d\u6742\u5ea6\u76f8\u6bd4LSTM\u8981\u5c0f. GRU\u7684\u7f3a\u70b9: GRU\u4ecd\u7136\u4e0d\u80fd\u5b8c\u5168\u89e3\u51b3\u68af\u5ea6\u6d88\u5931\u95ee\u9898, \u540c\u65f6\u5176\u4f5c\u7528RNN\u7684\u53d8\u4f53, \u6709\u7740RNN\u7ed3\u6784\u672c\u8eab\u7684\u4e00\u5927\u5f0a\u7aef, \u5373\u4e0d\u53ef\u5e76\u884c\u8ba1\u7b97, \u8fd9\u5728\u6570\u636e\u91cf\u548c\u6a21\u578b\u4f53\u91cf\u9010\u6b65\u589e\u5927\u7684\u672a\u6765, \u662fRNN\u53d1\u5c55\u7684\u5173\u952e\u74f6\u9888.","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"1.html#15","text":"","title":"1.5 \u6ce8\u610f\u529b\u673a\u5236"},{"location":"1.html#_9","text":"\u4e86\u89e3\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u4ee5\u53ca\u5e38\u89c1\u7684\u8ba1\u7b97\u89c4\u5219. \u4e86\u89e3\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u673a\u5236\u53ca\u5176\u4f5c\u7528. \u638c\u63e1\u6ce8\u610f\u529b\u673a\u5236\u7684\u5b9e\u73b0\u6b65\u9aa4. \u4ec0\u4e48\u662f\u6ce8\u610f\u529b: \u6211\u4eec\u89c2\u5bdf\u4e8b\u7269\u65f6\uff0c\u4e4b\u6240\u4ee5\u80fd\u591f\u5feb\u901f\u5224\u65ad\u4e00\u79cd\u4e8b\u7269(\u5f53\u7136\u5141\u8bb8\u5224\u65ad\u662f\u9519\u8bef\u7684), \u662f\u56e0\u4e3a\u6211\u4eec\u5927\u8111\u80fd\u591f\u5f88\u5feb\u628a\u6ce8\u610f\u529b\u653e\u5728\u4e8b\u7269\u6700\u5177\u6709\u8fa8\u8bc6\u5ea6\u7684\u90e8\u5206\u4ece\u800c\u4f5c\u51fa\u5224\u65ad\uff0c\u800c\u5e76\u975e\u662f\u4ece\u5934\u5230\u5c3e\u7684\u89c2\u5bdf\u4e00\u904d\u4e8b\u7269\u540e\uff0c\u624d\u80fd\u6709\u5224\u65ad\u7ed3\u679c. \u6b63\u662f\u57fa\u4e8e\u8fd9\u6837\u7684\u7406\u8bba\uff0c\u5c31\u4ea7\u751f\u4e86\u6ce8\u610f\u529b\u673a\u5236. \u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5b83\u9700\u8981\u4e09\u4e2a\u6307\u5b9a\u7684\u8f93\u5165Q(query), K(key), V(value), \u7136\u540e\u901a\u8fc7\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u6ce8\u610f\u529b\u7684\u7ed3\u679c, \u8fd9\u4e2a\u7ed3\u679c\u4ee3\u8868query\u5728key\u548cvalue\u4f5c\u7528\u4e0b\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5f53\u8f93\u5165\u7684Q=K=V\u65f6, \u79f0\u4f5c\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219. \u5e38\u89c1\u7684\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316\u540e\u518d\u4f7f\u7528tanh\u51fd\u6570\u6fc0\u6d3b, \u7136\u540e\u518d\u8fdb\u884c\u5185\u90e8\u6c42\u548c, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u518d\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\u4e0eK\u7684\u8f6c\u7f6e\u505a\u70b9\u79ef\u8fd0\u7b97, \u7136\u540e\u9664\u4ee5\u4e00\u4e2a\u7f29\u653e\u7cfb\u6570, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u8bf4\u660e\uff1a\u5f53\u6ce8\u610f\u529b\u6743\u91cd\u77e9\u9635\u548cV\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\u4e14\u7b2c\u4e00\u7ef4\u4ee3\u8868\u4e3abatch\u6761\u6570\u65f6, \u5219\u505abmm\u8fd0\u7b97.bmm\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5f20\u91cf\u4e58\u6cd5\u8fd0\u7b97. bmm\u8fd0\u7b97\u6f14\u793a: # \u5982\u679c\u53c2\u65701\u5f62\u72b6\u662f(b \u00d7 n \u00d7 m), \u53c2\u65702\u5f62\u72b6\u662f(b \u00d7 m \u00d7 p), \u5219\u8f93\u51fa\u4e3a(b \u00d7 n \u00d7 p) >>> input = torch.randn(10, 3, 4) >>> mat2 = torch.randn(10, 4, 5) >>> res = torch.bmm(input, mat2) >>> res.size() torch.Size([10, 3, 5])","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"1.html#_10","text":"\u6ce8\u610f\u529b\u673a\u5236\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u80fd\u591f\u5e94\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u7684\u8f7d\u4f53, \u540c\u65f6\u5305\u62ec\u4e00\u4e9b\u5fc5\u8981\u7684\u5168\u8fde\u63a5\u5c42\u4ee5\u53ca\u76f8\u5173\u5f20\u91cf\u5904\u7406, \u4f7f\u5176\u4e0e\u5e94\u7528\u7f51\u7edc\u878d\u4e3a\u4e00\u4f53. \u4f7f\u7528\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u7684\u6ce8\u610f\u529b\u673a\u5236\u79f0\u4e3a\u81ea\u6ce8\u610f\u529b\u673a\u5236. \u8bf4\u660e: NLP\u9886\u57df\u4e2d, \u5f53\u524d\u7684\u6ce8\u610f\u529b\u673a\u5236\u5927\u591a\u6570\u5e94\u7528\u4e8eseq2seq\u67b6\u6784, \u5373\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u6a21\u578b.","title":"\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u673a\u5236"},{"location":"1.html#_11","text":"\u5728\u89e3\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u80fd\u591f\u6839\u636e\u6a21\u578b\u76ee\u6807\u6709\u6548\u7684\u805a\u7126\u7f16\u7801\u5668\u7684\u8f93\u51fa\u7ed3\u679c, \u5f53\u5176\u4f5c\u4e3a\u89e3\u7801\u5668\u7684\u8f93\u5165\u65f6\u63d0\u5347\u6548\u679c. \u6539\u5584\u4ee5\u5f80\u7f16\u7801\u5668\u8f93\u51fa\u662f\u5355\u4e00\u5b9a\u957f\u5f20\u91cf, \u65e0\u6cd5\u5b58\u50a8\u8fc7\u591a\u4fe1\u606f\u7684\u60c5\u51b5. \u5728\u7f16\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u4e3b\u8981\u89e3\u51b3\u8868\u5f81\u95ee\u9898, \u76f8\u5f53\u4e8e\u7279\u5f81\u63d0\u53d6\u8fc7\u7a0b, \u5f97\u5230\u8f93\u5165\u7684\u6ce8\u610f\u529b\u8868\u793a. \u4e00\u822c\u4f7f\u7528\u81ea\u6ce8\u610f\u529b(self-attention).","title":"\u6ce8\u610f\u529b\u673a\u5236\u7684\u4f5c\u7528"},{"location":"1.html#_12","text":"\u7b2c\u4e00\u6b65: \u6839\u636e\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219, \u5bf9Q\uff0cK\uff0cV\u8fdb\u884c\u76f8\u5e94\u7684\u8ba1\u7b97. \u7b2c\u4e8c\u6b65: \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, \u5982\u679c\u662f\u62fc\u63a5\u65b9\u6cd5\uff0c\u5219\u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e8c\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5, \u5982\u679c\u662f\u8f6c\u7f6e\u70b9\u79ef, \u4e00\u822c\u662f\u81ea\u6ce8\u610f\u529b, Q\u4e0eV\u76f8\u540c, \u5219\u4e0d\u9700\u8981\u8fdb\u884c\u4e0eQ\u7684\u62fc\u63a5. \u7b2c\u4e09\u6b65: \u6700\u540e\u4e3a\u4e86\u4f7f\u6574\u4e2aattention\u673a\u5236\u6309\u7167\u6307\u5b9a\u5c3a\u5bf8\u8f93\u51fa, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e8c\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362, \u5f97\u5230\u6700\u7ec8\u5bf9Q\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5e38\u89c1\u6ce8\u610f\u529b\u673a\u5236\u7684\u4ee3\u7801\u5206\u6790: import torch import torch.nn as nn import torch.nn.functional as F class Attn ( nn . Module ): def __init__ ( self , query_size , key_size , value_size1 , value_size2 , output_size ): \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u67095\u4e2a, query_size\u4ee3\u8868query\u7684\u6700\u540e\u4e00\u7ef4\u5927\u5c0f key_size\u4ee3\u8868key\u7684\u6700\u540e\u4e00\u7ef4\u5927\u5c0f, value_size1\u4ee3\u8868value\u7684\u5bfc\u6570\u7b2c\u4e8c\u7ef4\u5927\u5c0f, value = (1, value_size1, value_size2) value_size2\u4ee3\u8868value\u7684\u5012\u6570\u7b2c\u4e00\u7ef4\u5927\u5c0f, output_size\u8f93\u51fa\u7684\u6700\u540e\u4e00\u7ef4\u5927\u5c0f\"\"\" super ( Attn , self ) . __init__ () # \u5c06\u4ee5\u4e0b\u53c2\u6570\u4f20\u5165\u7c7b\u4e2d self . query_size = query_size self . key_size = key_size self . value_size1 = value_size1 self . value_size2 = value_size2 self . output_size = output_size # \u521d\u59cb\u5316\u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u7b2c\u4e00\u6b65\u4e2d\u9700\u8981\u7684\u7ebf\u6027\u5c42. self . attn = nn . Linear ( self . query_size + self . key_size , value_size1 ) # \u521d\u59cb\u5316\u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u7b2c\u4e09\u6b65\u4e2d\u9700\u8981\u7684\u7ebf\u6027\u5c42. self . attn_combine = nn . Linear ( self . query_size + value_size2 , output_size ) def forward ( self , Q , K , V ): \"\"\"forward\u51fd\u6570\u7684\u8f93\u5165\u53c2\u6570\u6709\u4e09\u4e2a, \u5206\u522b\u662fQ, K, V, \u6839\u636e\u6a21\u578b\u8bad\u7ec3\u5e38\u8bc6, \u8f93\u5165\u7ed9Attion\u673a\u5236\u7684 \u5f20\u91cf\u4e00\u822c\u60c5\u51b5\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf, \u56e0\u6b64\u8fd9\u91cc\u4e5f\u5047\u8bbeQ, K, V\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\"\"\" # \u7b2c\u4e00\u6b65, \u6309\u7167\u8ba1\u7b97\u89c4\u5219\u8fdb\u884c\u8ba1\u7b97, # \u6211\u4eec\u91c7\u7528\u5e38\u89c1\u7684\u7b2c\u4e00\u79cd\u8ba1\u7b97\u89c4\u5219 # \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c attn_weights = F . softmax ( self . attn ( torch . cat (( Q [ 0 ], K [ 0 ]), 1 )), dim = 1 ) # \u7136\u540e\u8fdb\u884c\u7b2c\u4e00\u6b65\u7684\u540e\u534a\u90e8\u5206, \u5c06\u5f97\u5230\u7684\u6743\u91cd\u77e9\u9635\u4e0eV\u505a\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97, # \u5f53\u4e8c\u8005\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\u4e14\u7b2c\u4e00\u7ef4\u4ee3\u8868\u4e3abatch\u6761\u6570\u65f6, \u5219\u505abmm\u8fd0\u7b97 attn_applied = torch . bmm ( attn_weights . unsqueeze ( 0 ), V ) # \u4e4b\u540e\u8fdb\u884c\u7b2c\u4e8c\u6b65, \u901a\u8fc7\u53d6[0]\u662f\u7528\u6765\u964d\u7ef4, \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, # \u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e00\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5 output = torch . cat (( Q [ 0 ], attn_applied [ 0 ]), 1 ) # \u6700\u540e\u662f\u7b2c\u4e09\u6b65, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e09\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\u5e76\u6269\u5c55\u7ef4\u5ea6\uff0c\u5f97\u5230\u8f93\u51fa # \u56e0\u4e3a\u8981\u4fdd\u8bc1\u8f93\u51fa\u4e5f\u662f\u4e09\u7ef4\u5f20\u91cf, \u56e0\u6b64\u4f7f\u7528unsqueeze(0)\u6269\u5c55\u7ef4\u5ea6 output = self . attn_combine ( output ) . unsqueeze ( 0 ) return output , attn_weights \u8c03\u7528: query_size = 32 key_size = 32 value_size1 = 32 value_size2 = 64 output_size = 64 attn = Attn(query_size, key_size, value_size1, value_size2, output_size) Q = torch.randn(1,1,32) K = torch.randn(1,1,32) V = torch.randn(1,32,64) out = attn(Q, K ,V) print(out[0]) print(out[1]) \u8f93\u51fa\u6548\u679c: tensor([[[ 0.4477, -0.0500, -0.2277, -0.3168, -0.4096, -0.5982, 0.1548, -0.0771, -0.0951, 0.1833, 0.3128, 0.1260, 0.4420, 0.0495, -0.7774, -0.0995, 0.2629, 0.4957, 1.0922, 0.1428, 0.3024, -0.2646, -0.0265, 0.0632, 0.3951, 0.1583, 0.1130, 0.5500, -0.1887, -0.2816, -0.3800, -0.5741, 0.1342, 0.0244, -0.2217, 0.1544, 0.1865, -0.2019, 0.4090, -0.4762, 0.3677, -0.2553, -0.5199, 0.2290, -0.4407, 0.0663, -0.0182, -0.2168, 0.0913, -0.2340, 0.1924, -0.3687, 0.1508, 0.3618, -0.0113, 0.2864, -0.1929, -0.6821, 0.0951, 0.1335, 0.3560, -0.3215, 0.6461, 0.1532]]], grad_fn=<UnsqueezeBackward0>) tensor([[0.0395, 0.0342, 0.0200, 0.0471, 0.0177, 0.0209, 0.0244, 0.0465, 0.0346, 0.0378, 0.0282, 0.0214, 0.0135, 0.0419, 0.0926, 0.0123, 0.0177, 0.0187, 0.0166, 0.0225, 0.0234, 0.0284, 0.0151, 0.0239, 0.0132, 0.0439, 0.0507, 0.0419, 0.0352, 0.0392, 0.0546, 0.0224]], grad_fn=<SoftmaxBackward>) \u66f4\u591a\u6709\u5173\u6ce8\u610f\u529b\u673a\u5236\u7684\u5e94\u7528\u6211\u4eec\u5c06\u5728\u6848\u4f8b\u4e2d\u8fdb\u884c\u8be6\u5c3d\u7684\u7406\u89e3\u5206\u6790.","title":"\u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u6b65\u9aa4"},{"location":"1.html#_13","text":"\u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5b83\u9700\u8981\u4e09\u4e2a\u6307\u5b9a\u7684\u8f93\u5165Q(query), K(key), V(value), \u7136\u540e\u901a\u8fc7\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u6ce8\u610f\u529b\u7684\u7ed3\u679c, \u8fd9\u4e2a\u7ed3\u679c\u4ee3\u8868query\u5728key\u548cvalue\u4f5c\u7528\u4e0b\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5f53\u8f93\u5165\u7684Q=K=V\u65f6, \u79f0\u4f5c\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219. \u5e38\u89c1\u7684\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219: \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316\u540e\u518d\u4f7f\u7528tanh\u51fd\u6570\u6fc0\u6d3b, \u7136\u540e\u518d\u8fdb\u884c\u5185\u90e8\u6c42\u548c, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u518d\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5c06Q\u4e0eK\u7684\u8f6c\u7f6e\u505a\u70b9\u79ef\u8fd0\u7b97, \u7136\u540e\u9664\u4ee5\u4e00\u4e2a\u7f29\u653e\u7cfb\u6570, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5. \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u6ce8\u610f\u529b\u673a\u5236: \u6ce8\u610f\u529b\u673a\u5236\u662f\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u80fd\u591f\u5e94\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u7684\u8f7d\u4f53, \u540c\u65f6\u5305\u62ec\u4e00\u4e9b\u5fc5\u8981\u7684\u5168\u8fde\u63a5\u5c42\u4ee5\u53ca\u76f8\u5173\u5f20\u91cf\u5904\u7406, \u4f7f\u5176\u4e0e\u5e94\u7528\u7f51\u7edc\u878d\u4e3a\u4e00\u4f53. \u4f7f\u81ea\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219\u7684\u6ce8\u610f\u529b\u673a\u5236\u79f0\u4e3a\u81ea\u6ce8\u610f\u529b\u673a\u5236. \u6ce8\u610f\u529b\u673a\u5236\u7684\u4f5c\u7528: \u5728\u89e3\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u80fd\u591f\u6839\u636e\u6a21\u578b\u76ee\u6807\u6709\u6548\u7684\u805a\u7126\u7f16\u7801\u5668\u7684\u8f93\u51fa\u7ed3\u679c, \u5f53\u5176\u4f5c\u4e3a\u89e3\u7801\u5668\u7684\u8f93\u5165\u65f6\u63d0\u5347\u6548\u679c. \u6539\u5584\u4ee5\u5f80\u7f16\u7801\u5668\u8f93\u51fa\u662f\u5355\u4e00\u5b9a\u957f\u5f20\u91cf, \u65e0\u6cd5\u5b58\u50a8\u8fc7\u591a\u4fe1\u606f\u7684\u60c5\u51b5. \u5728\u7f16\u7801\u5668\u7aef\u7684\u6ce8\u610f\u529b\u673a\u5236: \u4e3b\u8981\u89e3\u51b3\u8868\u5f81\u95ee\u9898, \u76f8\u5f53\u4e8e\u7279\u5f81\u63d0\u53d6\u8fc7\u7a0b, \u5f97\u5230\u8f93\u5165\u7684\u6ce8\u610f\u529b\u8868\u793a. \u4e00\u822c\u4f7f\u7528\u81ea\u6ce8\u610f\u529b(self-attention). \u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u6839\u636e\u6ce8\u610f\u529b\u8ba1\u7b97\u89c4\u5219, \u5bf9Q\uff0cK\uff0cV\u8fdb\u884c\u76f8\u5e94\u7684\u8ba1\u7b97. \u7b2c\u4e8c\u6b65: \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, \u5982\u679c\u662f\u62fc\u63a5\u65b9\u6cd5\uff0c\u5219\u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e8c\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5, \u5982\u679c\u662f\u8f6c\u7f6e\u70b9\u79ef, \u4e00\u822c\u662f\u81ea\u6ce8\u610f\u529b, Q\u4e0eV\u76f8\u540c, \u5219\u4e0d\u9700\u8981\u8fdb\u884c\u4e0eQ\u7684\u62fc\u63a5. \u7b2c\u4e09\u6b65: \u6700\u540e\u4e3a\u4e86\u4f7f\u6574\u4e2aattention\u673a\u5236\u6309\u7167\u6307\u5b9a\u5c3a\u5bf8\u8f93\u51fa, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e8c\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362, \u5f97\u5230\u6700\u7ec8\u5bf9Q\u7684\u6ce8\u610f\u529b\u8868\u793a. \u5b66\u4e60\u5e76\u5b9e\u73b0\u4e86\u4e00\u79cd\u5e38\u89c1\u7684\u6ce8\u610f\u529b\u673a\u5236\u7684\u7c7bAttn.","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"2.html","text":"2.1 \u4f7f\u7528RNN\u6a21\u578b\u6784\u5efa\u4eba\u540d\u5206\u7c7b\u5668 \u5b66\u4e60\u76ee\u6807: \u4e86\u89e3\u6709\u5173\u4eba\u540d\u5206\u7c7b\u95ee\u9898\u548c\u6709\u5173\u6570\u636e. \u638c\u63e1\u4f7f\u7528RNN\u6784\u5efa\u4eba\u540d\u5206\u7c7b\u5668\u5b9e\u73b0\u8fc7\u7a0b. \u5173\u4e8e\u4eba\u540d\u5206\u7c7b\u95ee\u9898: \u4ee5\u4e00\u4e2a\u4eba\u540d\u4e3a\u8f93\u5165, \u4f7f\u7528\u6a21\u578b\u5e2e\u52a9\u6211\u4eec\u5224\u65ad\u5b83\u6700\u6709\u53ef\u80fd\u662f\u6765\u81ea\u54ea\u4e00\u4e2a\u56fd\u5bb6\u7684\u4eba\u540d, \u8fd9\u5728\u67d0\u4e9b\u56fd\u9645\u5316\u516c\u53f8\u7684\u4e1a\u52a1\u4e2d\u5177\u6709\u91cd\u8981\u610f\u4e49, \u5728\u7528\u6237\u6ce8\u518c\u8fc7\u7a0b\u4e2d, \u4f1a\u6839\u636e\u7528\u6237\u586b\u5199\u7684\u540d\u5b57\u76f4\u63a5\u7ed9\u4ed6\u5206\u914d\u53ef\u80fd\u7684\u56fd\u5bb6\u6216\u5730\u533a\u9009\u9879, \u4ee5\u53ca\u8be5\u56fd\u5bb6\u6216\u5730\u533a\u7684\u56fd\u65d7, \u9650\u5236\u624b\u673a\u53f7\u7801\u4f4d\u6570\u7b49\u7b49. \u4eba\u540d\u5206\u7c7b\u6570\u636e: \u6570\u636e\u4e0b\u8f7d\u5730\u5740: https://download.pytorch.org/tutorial/data.zip \u6570\u636e\u6587\u4ef6\u9884\u89c8: - data/ - names/ Arabic.txt Chinese.txt Czech.txt Dutch.txt English.txt French.txt German.txt Greek.txt Irish.txt Italian.txt Japanese.txt Korean.txt Polish.txt Portuguese.txt Russian.txt Scottish.txt Spanish.txt Vietnamese.txt Chiness.txt\u9884\u89c8: Ang Au-Yong Bai Ban Bao Bei Bian Bui Cai Cao Cen Chai Chaim Chan Chang Chao Che Chen Cheng \u6574\u4e2a\u6848\u4f8b\u7684\u5b9e\u73b0\u53ef\u5206\u4e3a\u4ee5\u4e0b\u4e94\u4e2a\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305. \u7b2c\u4e8c\u6b65: \u5bf9data\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u6ee1\u8db3\u8bad\u7ec3\u8981\u6c42. \u7b2c\u4e09\u6b65: \u6784\u5efaRNN\u6a21\u578b(\u5305\u62ec\u4f20\u7edfRNN, LSTM\u4ee5\u53caGRU). \u7b2c\u56db\u6b65: \u6784\u5efa\u8bad\u7ec3\u51fd\u6570\u5e76\u8fdb\u884c\u8bad\u7ec3. \u7b2c\u4e94\u6b65: \u6784\u5efa\u8bc4\u4f30\u51fd\u6570\u5e76\u8fdb\u884c\u9884\u6d4b. \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 python\u7248\u672c\u4f7f\u75283.6.x, pytorch\u7248\u672c\u4f7f\u75281.3.1 pip install torch==1.3.1 # \u4eceio\u4e2d\u5bfc\u5165\u6587\u4ef6\u6253\u5f00\u65b9\u6cd5 from io import open # \u5e2e\u52a9\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u5b50\u76ee\u5f55\u7684\u67e5\u8be2 import glob import os # \u7528\u4e8e\u83b7\u5f97\u5e38\u89c1\u5b57\u6bcd\u53ca\u5b57\u7b26\u89c4\u8303\u5316 import string import unicodedata # \u5bfc\u5165\u968f\u673a\u5de5\u5177random import random # \u5bfc\u5165\u65f6\u95f4\u548c\u6570\u5b66\u5de5\u5177\u5305 import time import math # \u5bfc\u5165torch\u5de5\u5177 import torch # \u5bfc\u5165nn\u51c6\u5907\u6784\u5efa\u6a21\u578b import torch.nn as nn # \u5f15\u5165\u5236\u56fe\u5de5\u5177\u5305 import matplotlib.pyplot as plt \u7b2c\u4e8c\u6b65: \u5bf9data\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u6ee1\u8db3\u8bad\u7ec3\u8981\u6c42. \u83b7\u53d6\u5e38\u7528\u7684\u5b57\u7b26\u6570\u91cf: # \u83b7\u53d6\u6240\u6709\u5e38\u7528\u5b57\u7b26\u5305\u62ec\u5b57\u6bcd\u548c\u5e38\u7528\u6807\u70b9 all_letters = string . ascii_letters + \" .,;'\" # \u83b7\u53d6\u5e38\u7528\u5b57\u7b26\u6570\u91cf n_letters = len ( all_letters ) print ( \"n_letter:\" , n_letters ) \u8f93\u51fa\u6548\u679c: n_letter : 57 \u5b57\u7b26\u89c4\u8303\u5316\u4e4bunicode\u8f6cAscii\u51fd\u6570: # \u5173\u4e8e\u7f16\u7801\u95ee\u9898\u6211\u4eec\u6682\u4e14\u4e0d\u53bb\u8003\u8651 # \u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u53bb\u6389\u4e00\u4e9b\u8bed\u8a00\u4e2d\u7684\u91cd\u97f3\u6807\u8bb0 # \u5982: \u015alus\u00e0rski ---> Slusarski def unicodeToAscii ( s ): return '' . join ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' and c in all_letters ) \u8c03\u7528: s = \"\u015alus\u00e0rski\" a = unicodeToAscii(s) print(a) \u8f93\u51fa\u6548\u679c: Slusarski \u6784\u5efa\u4e00\u4e2a\u4ece\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5185\u5bb9\u5230\u5185\u5b58\u7684\u51fd\u6570: data_path = \"./data/name/\" def readLines ( filename ): \"\"\"\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6bcf\u4e00\u884c\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5f62\u6210\u5217\u8868\"\"\" # \u6253\u5f00\u6307\u5b9a\u6587\u4ef6\u5e76\u8bfb\u53d6\u6240\u6709\u5185\u5bb9, \u4f7f\u7528strip()\u53bb\u9664\u4e24\u4fa7\u7a7a\u767d\u7b26, \u7136\u540e\u4ee5'\\n'\u8fdb\u884c\u5207\u5206 lines = open ( filename , encoding = 'utf-8' ) . read () . strip () . split ( ' \\n ' ) # \u5bf9\u5e94\u6bcf\u4e00\u4e2alines\u5217\u8868\u4e2d\u7684\u540d\u5b57\u8fdb\u884cAscii\u8f6c\u6362, \u4f7f\u5176\u89c4\u8303\u5316.\u6700\u540e\u8fd4\u56de\u4e00\u4e2a\u540d\u5b57\u5217\u8868 return [ unicodeToAscii ( line ) for line in lines ] \u8c03\u7528: # filename\u662f\u6570\u636e\u96c6\u4e2d\u67d0\u4e2a\u5177\u4f53\u7684\u6587\u4ef6, \u6211\u4eec\u8fd9\u91cc\u9009\u62e9Chinese.txt filename = data_path + \"Chinese.txt\" lines = readLines ( filename ) print ( lines ) \u8f93\u51fa\u6548\u679c: lines: ['Ang', 'AuYong', 'Bai', 'Ban', 'Bao', 'Bei', 'Bian', 'Bui', 'Cai', 'Cao', 'Cen', 'Chai', 'Chaim', 'Chan', 'Chang', 'Chao', 'Che', 'Chen', 'Cheng', 'Cheung', 'Chew', 'Chieu', 'Chin', 'Chong', 'Chou', 'Chu', 'Cui', 'Dai', 'Deng', 'Ding', 'Dong', 'Dou', 'Duan', 'Eng', 'Fan', 'Fei', 'Feng', 'Foong', 'Fung', 'Gan', 'Gauk', 'Geng', 'Gim', 'Gok', 'Gong', 'Guan', 'Guang', 'Guo', 'Gwock', 'Han', 'Hang', 'Hao', 'Hew', 'Hiu', 'Hong', 'Hor', 'Hsiao', 'Hua', 'Huan', 'Huang', 'Hui', 'Huie', 'Huo', 'Jia', 'Jiang', 'Jin', 'Jing', 'Joe', 'Kang', 'Kau', 'Khoo', 'Khu', 'Kong', 'Koo', 'Kwan', 'Kwei', 'Kwong', 'Lai', 'Lam', 'Lang', 'Lau', 'Law', 'Lew', 'Lian', 'Liao', 'Lim', 'Lin', 'Ling', 'Liu', 'Loh', 'Long', 'Loong', 'Luo', 'Mah', 'Mai', 'Mak', 'Mao', 'Mar', 'Mei', 'Meng', 'Miao', 'Min', 'Ming', 'Moy', 'Mui', 'Nie', 'Niu', 'OuYang', 'OwYang', 'Pan', 'Pang', 'Pei', 'Peng', 'Ping', 'Qian', 'Qin', 'Qiu', 'Quan', 'Que', 'Ran', 'Rao', 'Rong', 'Ruan', 'Sam', 'Seah', 'See ', 'Seow', 'Seto', 'Sha', 'Shan', 'Shang', 'Shao', 'Shaw', 'She', 'Shen', 'Sheng', 'Shi', 'Shu', 'Shuai', 'Shui', 'Shum', 'Siew', 'Siu', 'Song', 'Sum', 'Sun', 'Sze ', 'Tan', 'Tang', 'Tao', 'Teng', 'Teoh', 'Thean', 'Thian', 'Thien', 'Tian', 'Tong', 'Tow', 'Tsang', 'Tse', 'Tsen', 'Tso', 'Tze', 'Wan', 'Wang', 'Wei', 'Wen', 'Weng', 'Won', 'Wong', 'Woo', 'Xiang', 'Xiao', 'Xie', 'Xing', 'Xue', 'Xun', 'Yan', 'Yang', 'Yao', 'Yap', 'Yau', 'Yee', 'Yep', 'Yim', 'Yin', 'Ying', 'Yong', 'You', 'Yuan', 'Zang', 'Zeng', 'Zha', 'Zhan', 'Zhang', 'Zhao', 'Zhen', 'Zheng', 'Zhong', 'Zhou', 'Zhu', 'Zhuo', 'Zong', 'Zou', 'Bing', 'Chi', 'Chu', 'Cong', 'Cuan', 'Dan', 'Fei', 'Feng', 'Gai', 'Gao', 'Gou', 'Guan', 'Gui', 'Guo', 'Hong', 'Hou', 'Huan', 'Jian', 'Jiao', 'Jin', 'Jiu', 'Juan', 'Jue', 'Kan', 'Kuai', 'Kuang', 'Kui', 'Lao', 'Liang', 'Lu', 'Luo', 'Man', 'Nao', 'Pian', 'Qiao', 'Qing', 'Qiu', 'Rang', 'Rui', 'She', 'Shi', 'Shuo', 'Sui', 'Tai', 'Wan', 'Wei', 'Xian', 'Xie', 'Xin', 'Xing', 'Xiong', 'Xuan', 'Yan', 'Yin', 'Ying', 'Yuan', 'Yue', 'Yun', 'Zha', 'Zhai', 'Zhang', 'Zhi', 'Zhuan', 'Zhui'] \u6784\u5efa\u4eba\u540d\u7c7b\u522b\uff08\u6240\u5c5e\u7684\u8bed\u8a00\uff09\u5217\u8868\u4e0e\u4eba\u540d\u5bf9\u5e94\u5173\u7cfb\u5b57\u5178: # \u6784\u5efa\u7684category_lines\u5f62\u5982\uff1a{\"English\":[\"Lily\", \"Susan\", \"Kobe\"], \"Chinese\":[\"Zhang San\", \"Xiao Ming\"]} category_lines = {} # all_categories\u5f62\u5982\uff1a [\"English\",...,\"Chinese\"] all_categories = [] # \u8bfb\u53d6\u6307\u5b9a\u8def\u5f84\u4e0b\u7684txt\u6587\u4ef6\uff0c \u4f7f\u7528glob\uff0cpath\u4e2d\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f for filename in glob . glob ( data_path + '*.txt' ): # \u83b7\u53d6\u6bcf\u4e2a\u6587\u4ef6\u7684\u6587\u4ef6\u540d, \u5c31\u662f\u5bf9\u5e94\u7684\u540d\u5b57\u7c7b\u522b category = os . path . splitext ( os . path . basename ( filename ))[ 0 ] # \u5c06\u5176\u9010\u4e00\u88c5\u5230all_categories\u5217\u8868\u4e2d all_categories . append ( category ) # \u7136\u540e\u8bfb\u53d6\u6bcf\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u5f62\u6210\u540d\u5b57\u5217\u8868 lines = readLines ( filename ) # \u6309\u7167\u5bf9\u5e94\u7684\u7c7b\u522b\uff0c\u5c06\u540d\u5b57\u5217\u8868\u5199\u5165\u5230category_lines\u5b57\u5178\u4e2d category_lines [ category ] = lines # \u67e5\u770b\u7c7b\u522b\u603b\u6570 n_categories = len ( all_categories ) print ( \"n_categories:\" , n_categories ) # \u968f\u4fbf\u67e5\u770b\u5176\u4e2d\u7684\u4e00\u4e9b\u5185\u5bb9 print ( category_lines [ 'Italian' ][: 5 ]) \u8f93\u51fa\u6548\u679c: n_categories : 18 [ 'Abandonato' , 'Abatangelo' , 'Abatantuono' , 'Abate' , 'Abategiovanni' ] \u5c06\u4eba\u540d\u8f6c\u5316\u4e3a\u5bf9\u5e94onehot\u5f20\u91cf\u8868\u793a: # \u5c06\u5b57\u7b26\u4e32(\u5355\u8bcd\u7c92\u5ea6)\u8f6c\u5316\u4e3a\u5f20\u91cf\u8868\u793a\uff0c\u5982\uff1a\"ab\" ---> # tensor([[[1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 0., 0., 0., 0., 0., 0.]], # [[0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 0., 0., 0., 0., 0., 0.]]]) def lineToTensor ( line ): \"\"\"\u5c06\u4eba\u540d\u8f6c\u5316\u4e3a\u5bf9\u5e94onehot\u5f20\u91cf\u8868\u793a, \u53c2\u6570line\u662f\u8f93\u5165\u7684\u4eba\u540d\"\"\" # \u9996\u5148\u521d\u59cb\u5316\u4e00\u4e2a0\u5f20\u91cf, \u5b83\u7684\u5f62\u72b6(len(line), 1, n_letters) # \u4ee3\u8868\u4eba\u540d\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u7528\u4e00\u4e2a1 x n_letters\u7684\u5f20\u91cf\u8868\u793a. tensor = torch . zeros ( len ( line ), 1 , n_letters ) # \u904d\u5386\u8fd9\u4e2a\u4eba\u540d\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u7d22\u5f15\u548c\u5b57\u7b26 for li , letter in enumerate ( line ): # \u4f7f\u7528\u5b57\u7b26\u4e32\u65b9\u6cd5find\u627e\u5230\u6bcf\u4e2a\u5b57\u7b26\u5728all_letters\u4e2d\u7684\u7d22\u5f15 # \u5b83\u4e5f\u662f\u6211\u4eec\u751f\u6210onehot\u5f20\u91cf\u4e2d1\u7684\u7d22\u5f15\u4f4d\u7f6e tensor [ li ][ 0 ][ all_letters . find ( letter )] = 1 # \u8fd4\u56de\u7ed3\u679c return tensor \u8c03\u7528: line = \"Bai\" line_tensor = lineToTensor ( line ) print ( \"line_tensot:\" , line_tensor ) \u8f93\u51fa\u6548\u679c: line_tensot : tensor ([[[ 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 1 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 .]], [[ 1 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 .]], [[ 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 1 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 .]]]) \u7b2c\u4e09\u6b65: \u6784\u5efaRNN\u6a21\u578b \u6784\u5efa\u4f20\u7edf\u7684RNN\u6a21\u578b: # \u4f7f\u7528nn.RNN\u6784\u5efa\u5b8c\u6210\u4f20\u7edfRNN\u4f7f\u7528\u7c7b class RNN ( nn . Module ): def __init__ ( self , input_size , hidden_size , output_size , num_layers = 1 ): \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u67094\u4e2a\u53c2\u6570, \u5206\u522b\u4ee3\u8868RNN\u8f93\u5165\u6700\u540e\u4e00\u7ef4\u5c3a\u5bf8, RNN\u7684\u9690\u5c42\u6700\u540e\u4e00\u7ef4\u5c3a\u5bf8, RNN\u5c42\u6570\"\"\" super ( RNN , self ) . __init__ () # \u5c06hidden_size\u4e0enum_layers\u4f20\u5165\u5176\u4e2d self . hidden_size = hidden_size self . num_layers = num_layers # \u5b9e\u4f8b\u5316\u9884\u5b9a\u4e49\u7684nn.RNN, \u5b83\u7684\u4e09\u4e2a\u53c2\u6570\u5206\u522b\u662finput_size, hidden_size, num_layers self . rnn = nn . RNN ( input_size , hidden_size , num_layers ) # \u5b9e\u4f8b\u5316nn.Linear, \u8fd9\u4e2a\u7ebf\u6027\u5c42\u7528\u4e8e\u5c06nn.RNN\u7684\u8f93\u51fa\u7ef4\u5ea6\u8f6c\u5316\u4e3a\u6307\u5b9a\u7684\u8f93\u51fa\u7ef4\u5ea6 self . linear = nn . Linear ( hidden_size , output_size ) # \u5b9e\u4f8b\u5316nn\u4e2d\u9884\u5b9a\u7684Softmax\u5c42, \u7528\u4e8e\u4ece\u8f93\u51fa\u5c42\u83b7\u5f97\u7c7b\u522b\u7ed3\u679c self . softmax = nn . LogSoftmax ( dim =- 1 ) def forward ( self , input , hidden ): \"\"\"\u5b8c\u6210\u4f20\u7edfRNN\u4e2d\u7684\u4e3b\u8981\u903b\u8f91, \u8f93\u5165\u53c2\u6570input\u4ee3\u8868\u8f93\u5165\u5f20\u91cf, \u5b83\u7684\u5f62\u72b6\u662f1 x n_letters hidden\u4ee3\u8868RNN\u7684\u9690\u5c42\u5f20\u91cf, \u5b83\u7684\u5f62\u72b6\u662fself.num_layers x 1 x self.hidden_size\"\"\" # \u56e0\u4e3a\u9884\u5b9a\u4e49\u7684nn.RNN\u8981\u6c42\u8f93\u5165\u7ef4\u5ea6\u4e00\u5b9a\u662f\u4e09\u7ef4\u5f20\u91cf, \u56e0\u6b64\u5728\u8fd9\u91cc\u4f7f\u7528unsqueeze(0)\u6269\u5c55\u4e00\u4e2a\u7ef4\u5ea6 input = input . unsqueeze ( 0 ) # \u5c06input\u548chidden\u8f93\u5165\u5230\u4f20\u7edfRNN\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e2d\uff0c\u5982\u679cnum_layers=1, rr\u6052\u7b49\u4e8ehn rr , hn = self . rnn ( input , hidden ) # \u5c06\u4eceRNN\u4e2d\u83b7\u5f97\u7684\u7ed3\u679c\u901a\u8fc7\u7ebf\u6027\u53d8\u6362\u548csoftmax\u8fd4\u56de\uff0c\u540c\u65f6\u8fd4\u56dehn\u4f5c\u4e3a\u540e\u7eedRNN\u7684\u8f93\u5165 return self . softmax ( self . linear ( rr )), hn def initHidden ( self ): \"\"\"\u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf\"\"\" # \u521d\u59cb\u5316\u4e00\u4e2a\uff08self.num_layers, 1, self.hidden_size\uff09\u5f62\u72b6\u76840\u5f20\u91cf return torch . zeros ( self . num_layers , 1 , self . hidden_size ) torch.unsqueeze\u6f14\u793a: >>> x = torch.tensor([1, 2, 3, 4]) >>> torch.unsqueeze(x, 0) tensor([[ 1, 2, 3, 4]]) >>> torch.unsqueeze(x, 1) tensor([[ 1], [ 2], [ 3], [ 4]]) \u6784\u5efaLSTM\u6a21\u578b: # \u4f7f\u7528nn.LSTM\u6784\u5efa\u5b8c\u6210LSTM\u4f7f\u7528\u7c7b class LSTM ( nn . Module ): def __init__ ( self , input_size , hidden_size , output_size , num_layers = 1 ): \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u7684\u53c2\u6570\u4e0e\u4f20\u7edfRNN\u76f8\u540c\"\"\" super ( LSTM , self ) . __init__ () # \u5c06hidden_size\u4e0enum_layers\u4f20\u5165\u5176\u4e2d self . hidden_size = hidden_size self . num_layers = num_layers # \u5b9e\u4f8b\u5316\u9884\u5b9a\u4e49\u7684nn.LSTM self . lstm = nn . LSTM ( input_size , hidden_size , num_layers ) # \u5b9e\u4f8b\u5316nn.Linear, \u8fd9\u4e2a\u7ebf\u6027\u5c42\u7528\u4e8e\u5c06nn.RNN\u7684\u8f93\u51fa\u7ef4\u5ea6\u8f6c\u5316\u4e3a\u6307\u5b9a\u7684\u8f93\u51fa\u7ef4\u5ea6 self . linear = nn . Linear ( hidden_size , output_size ) # \u5b9e\u4f8b\u5316nn\u4e2d\u9884\u5b9a\u7684Softmax\u5c42, \u7528\u4e8e\u4ece\u8f93\u51fa\u5c42\u83b7\u5f97\u7c7b\u522b\u7ed3\u679c self . softmax = nn . LogSoftmax ( dim =- 1 ) def forward ( self , input , hidden , c ): \"\"\"\u5728\u4e3b\u8981\u903b\u8f91\u51fd\u6570\u4e2d\u591a\u51fa\u4e00\u4e2a\u53c2\u6570c, \u4e5f\u5c31\u662fLSTM\u4e2d\u7684\u7ec6\u80de\u72b6\u6001\u5f20\u91cf\"\"\" # \u4f7f\u7528unsqueeze(0)\u6269\u5c55\u4e00\u4e2a\u7ef4\u5ea6 input = input . unsqueeze ( 0 ) # \u5c06input, hidden\u4ee5\u53ca\u521d\u59cb\u5316\u7684c\u4f20\u5165lstm\u4e2d rr , ( hn , c ) = self . lstm ( input , ( hidden , c )) # \u6700\u540e\u8fd4\u56de\u5904\u7406\u540e\u7684rr, hn, c return self . softmax ( self . linear ( rr )), hn , c def initHiddenAndC ( self ): \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u4e0d\u4ec5\u521d\u59cb\u5316hidden\u8fd8\u8981\u521d\u59cb\u5316\u7ec6\u80de\u72b6\u6001c, \u5b83\u4eec\u5f62\u72b6\u76f8\u540c\"\"\" c = hidden = torch . zeros ( self . num_layers , 1 , self . hidden_size ) return hidden , c \u6784\u5efaGRU\u6a21\u578b: # \u4f7f\u7528nn.GRU\u6784\u5efa\u5b8c\u6210\u4f20\u7edfRNN\u4f7f\u7528\u7c7b # GRU\u4e0e\u4f20\u7edfRNN\u7684\u5916\u90e8\u5f62\u5f0f\u76f8\u540c, \u90fd\u662f\u53ea\u4f20\u9012\u9690\u5c42\u5f20\u91cf, \u56e0\u6b64\u53ea\u9700\u8981\u66f4\u6539\u9884\u5b9a\u4e49\u5c42\u7684\u540d\u5b57 class GRU ( nn . Module ): def __init__ ( self , input_size , hidden_size , output_size , num_layers = 1 ): super ( GRU , self ) . __init__ () self . hidden_size = hidden_size self . num_layers = num_layers # \u5b9e\u4f8b\u5316\u9884\u5b9a\u4e49\u7684nn.GRU, \u5b83\u7684\u4e09\u4e2a\u53c2\u6570\u5206\u522b\u662finput_size, hidden_size, num_layers self . gru = nn . GRU ( input_size , hidden_size , num_layers ) self . linear = nn . Linear ( hidden_size , output_size ) self . softmax = nn . LogSoftmax ( dim =- 1 ) def forward ( self , input , hidden ): input = input . unsqueeze ( 0 ) rr , hn = self . gru ( input , hidden ) return self . softmax ( self . linear ( rr )), hn def initHidden ( self ): return torch . zeros ( self . num_layers , 1 , self . hidden_size ) \u5b9e\u4f8b\u5316\u53c2\u6570: # \u56e0\u4e3a\u662fonehot\u7f16\u7801, \u8f93\u5165\u5f20\u91cf\u6700\u540e\u4e00\u7ef4\u7684\u5c3a\u5bf8\u5c31\u662fn_letters input_size = n_letters # \u5b9a\u4e49\u9690\u5c42\u7684\u6700\u540e\u4e00\u7ef4\u5c3a\u5bf8\u5927\u5c0f n_hidden = 128 # \u8f93\u51fa\u5c3a\u5bf8\u4e3a\u8bed\u8a00\u7c7b\u522b\u603b\u6570n_categories output_size = n_categories # num_layer\u4f7f\u7528\u9ed8\u8ba4\u503c, num_layers = 1 \u8f93\u5165\u53c2\u6570: # \u5047\u5982\u6211\u4eec\u4ee5\u4e00\u4e2a\u5b57\u6bcdB\u4f5c\u4e3aRNN\u7684\u9996\u6b21\u8f93\u5165, \u5b83\u901a\u8fc7lineToTensor\u8f6c\u4e3a\u5f20\u91cf # \u56e0\u4e3a\u6211\u4eec\u7684lineToTensor\u8f93\u51fa\u662f\u4e09\u7ef4\u5f20\u91cf, \u800cRNN\u7c7b\u9700\u8981\u7684\u4e8c\u7ef4\u5f20\u91cf # \u56e0\u6b64\u9700\u8981\u4f7f\u7528squeeze(0)\u964d\u4f4e\u4e00\u4e2a\u7ef4\u5ea6 input = lineToTensor ( 'B' ) . squeeze ( 0 ) # \u521d\u59cb\u5316\u4e00\u4e2a\u4e09\u7ef4\u7684\u9690\u5c420\u5f20\u91cf, \u4e5f\u662f\u521d\u59cb\u7684\u7ec6\u80de\u72b6\u6001\u5f20\u91cf hidden = c = torch . zeros ( 1 , 1 , n_hidden ) \u8c03\u7528: rnn = RNN ( n_letters , n_hidden , n_categories ) lstm = LSTM ( n_letters , n_hidden , n_categories ) gru = GRU ( n_letters , n_hidden , n_categories ) rnn_output , next_hidden = rnn ( input , hidden ) print ( \"rnn:\" , rnn_output ) lstm_output , next_hidden , c = lstm ( input , hidden , c ) print ( \"lstm:\" , lstm_output ) gru_output , next_hidden = gru ( input , hidden ) print ( \"gru:\" , gru_output ) \u8f93\u51fa\u6548\u679c: rnn : tensor ([[[- 2.8822 , - 2.8615 , - 2.9488 , - 2.8898 , - 2.9205 , - 2.8113 , - 2.9328 , - 2.8239 , - 2.8678 , - 2.9474 , - 2.8724 , - 2.9703 , - 2.9019 , - 2.8871 , - 2.9340 , - 2.8436 , - 2.8442 , - 2.9047 ]]], grad_fn =< LogSoftmaxBackward >) lstm : tensor ([[[- 2.9427 , - 2.8574 , - 2.9175 , - 2.8492 , - 2.8962 , - 2.9276 , - 2.8500 , - 2.9306 , - 2.8304 , - 2.9559 , - 2.9751 , - 2.8071 , - 2.9138 , - 2.8196 , - 2.8575 , - 2.8416 , - 2.9395 , - 2.9384 ]]], grad_fn =< LogSoftmaxBackward >) gru : tensor ([[[- 2.8042 , - 2.8894 , - 2.8355 , - 2.8951 , - 2.8682 , - 2.9502 , - 2.9056 , - 2.8963 , - 2.8671 , - 2.9109 , - 2.9425 , - 2.8390 , - 2.9229 , - 2.8081 , - 2.8800 , - 2.9561 , - 2.9205 , - 2.9546 ]]], grad_fn =< LogSoftmaxBackward >) \u7b2c\u56db\u6b65: \u6784\u5efa\u8bad\u7ec3\u51fd\u6570\u5e76\u8fdb\u884c\u8bad\u7ec3 \u4ece\u8f93\u51fa\u7ed3\u679c\u4e2d\u83b7\u5f97\u6307\u5b9a\u7c7b\u522b\u51fd\u6570: def categoryFromOutput ( output ): \"\"\"\u4ece\u8f93\u51fa\u7ed3\u679c\u4e2d\u83b7\u5f97\u6307\u5b9a\u7c7b\u522b, \u53c2\u6570\u4e3a\u8f93\u51fa\u5f20\u91cfoutput\"\"\" # \u4ece\u8f93\u51fa\u5f20\u91cf\u4e2d\u8fd4\u56de\u6700\u5927\u7684\u503c\u548c\u7d22\u5f15\u5bf9\u8c61, \u6211\u4eec\u8fd9\u91cc\u4e3b\u8981\u9700\u8981\u8fd9\u4e2a\u7d22\u5f15 top_n , top_i = output . topk ( 1 ) # top_i\u5bf9\u8c61\u4e2d\u53d6\u51fa\u7d22\u5f15\u7684\u503c category_i = top_i [ 0 ] . item () # \u6839\u636e\u7d22\u5f15\u503c\u83b7\u5f97\u5bf9\u5e94\u8bed\u8a00\u7c7b\u522b, \u8fd4\u56de\u8bed\u8a00\u7c7b\u522b\u548c\u7d22\u5f15\u503c return all_categories [ category_i ], category_i torch.topk\u6f14\u793a: >>> x = torch.arange(1., 6.) >>> x tensor([ 1., 2., 3., 4., 5.]) >>> torch.topk(x, 3) torch.return_types.topk(values=tensor([5., 4., 3.]), indices=tensor([4, 3, 2])) \u8f93\u5165\u53c2\u6570: # \u5c06\u4e0a\u4e00\u6b65\u4e2dgru\u7684\u8f93\u51fa\u4f5c\u4e3a\u51fd\u6570\u7684\u8f93\u5165 output = gru_output # tensor([[[-2.8042, -2.8894, -2.8355, -2.8951, -2.8682, -2.9502, -2.9056, # -2.8963, -2.8671, -2.9109, -2.9425, -2.8390, -2.9229, -2.8081, # -2.8800, -2.9561, -2.9205, -2.9546]]], grad_fn=<LogSoftmaxBackward>) \u8c03\u7528: category , category_i = categoryFromOutput ( output ) print ( \"category:\" , category ) print ( \"category_i:\" , category_i ) \u8f93\u51fa\u6548\u679c: category : Portuguese category_i : 13 \u968f\u673a\u751f\u6210\u8bad\u7ec3\u6570\u636e: def randomTrainingExample (): \"\"\"\u8be5\u51fd\u6570\u7528\u4e8e\u968f\u673a\u4ea7\u751f\u8bad\u7ec3\u6570\u636e\"\"\" # \u9996\u5148\u4f7f\u7528random\u7684choice\u65b9\u6cd5\u4eceall_categories\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u7c7b\u522b category = random . choice ( all_categories ) # \u7136\u540e\u5728\u901a\u8fc7category_lines\u5b57\u5178\u53d6category\u7c7b\u522b\u5bf9\u5e94\u7684\u540d\u5b57\u5217\u8868 # \u4e4b\u540e\u518d\u4ece\u5217\u8868\u4e2d\u968f\u673a\u53d6\u4e00\u4e2a\u540d\u5b57 line = random . choice ( category_lines [ category ]) # \u63a5\u7740\u5c06\u8fd9\u4e2a\u7c7b\u522b\u5728\u6240\u6709\u7c7b\u522b\u5217\u8868\u4e2d\u7684\u7d22\u5f15\u5c01\u88c5\u6210tensor, \u5f97\u5230\u7c7b\u522b\u5f20\u91cfcategory_tensor category_tensor = torch . tensor ([ all_categories . index ( category )], dtype = torch . long ) # \u6700\u540e, \u5c06\u968f\u673a\u53d6\u5230\u7684\u540d\u5b57\u901a\u8fc7\u51fd\u6570lineToTensor\u8f6c\u5316\u4e3aonehot\u5f20\u91cf\u8868\u793a line_tensor = lineToTensor ( line ) return category , line , category_tensor , line_tensor \u8c03\u7528: # \u6211\u4eec\u968f\u673a\u53d6\u51fa\u5341\u4e2a\u8fdb\u884c\u7ed3\u679c\u67e5\u770b for i in range ( 10 ): category , line , category_tensor , line_tensor = randomTrainingExample () print ( 'category =' , category , '/ line =' , line , '/ category_tensor =' , category_tensor ) \u8f93\u51fa\u6548\u679c: category = French / line = Fontaine / category_tensor = tensor ([ 5 ]) category = Italian / line = Grimaldi / category_tensor = tensor ([ 9 ]) category = Chinese / line = Zha / category_tensor = tensor ([ 1 ]) category = Italian / line = Rapallino / category_tensor = tensor ([ 9 ]) category = Czech / line = Sherak / category_tensor = tensor ([ 2 ]) category = Arabic / line = Najjar / category_tensor = tensor ([ 0 ]) category = Scottish / line = Brown / category_tensor = tensor ([ 15 ]) category = Arabic / line = Sarraf / category_tensor = tensor ([ 0 ]) category = Japanese / line = Ibi / category_tensor = tensor ([ 10 ]) category = Chinese / line = Zha / category_tensor = tensor ([ 1 ]) \u6784\u5efa\u4f20\u7edfRNN\u8bad\u7ec3\u51fd\u6570: # \u5b9a\u4e49\u635f\u5931\u51fd\u6570\u4e3ann.NLLLoss\uff0c\u56e0\u4e3aRNN\u7684\u6700\u540e\u4e00\u5c42\u662fnn.LogSoftmax, \u4e24\u8005\u7684\u5185\u90e8\u8ba1\u7b97\u903b\u8f91\u6b63\u597d\u80fd\u591f\u543b\u5408. criterion = nn . NLLLoss () # \u8bbe\u7f6e\u5b66\u4e60\u7387\u4e3a0.005 learning_rate = 0.005 def trainRNN ( category_tensor , line_tensor ): \"\"\"\u5b9a\u4e49\u8bad\u7ec3\u51fd\u6570, \u5b83\u7684\u4e24\u4e2a\u53c2\u6570\u662fcategory_tensor\u7c7b\u522b\u7684\u5f20\u91cf\u8868\u793a, \u76f8\u5f53\u4e8e\u8bad\u7ec3\u6570\u636e\u7684\u6807\u7b7e, line_tensor\u540d\u5b57\u7684\u5f20\u91cf\u8868\u793a, \u76f8\u5f53\u4e8e\u5bf9\u5e94\u8bad\u7ec3\u6570\u636e\"\"\" # \u5728\u51fd\u6570\u4e2d, \u9996\u5148\u901a\u8fc7\u5b9e\u4f8b\u5316\u5bf9\u8c61rnn\u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf hidden = rnn . initHidden () # \u7136\u540e\u5c06\u6a21\u578b\u7ed3\u6784\u4e2d\u7684\u68af\u5ea6\u5f520 rnn . zero_grad () # \u4e0b\u9762\u5f00\u59cb\u8fdb\u884c\u8bad\u7ec3, \u5c06\u8bad\u7ec3\u6570\u636eline_tensor\u7684\u6bcf\u4e2a\u5b57\u7b26\u9010\u4e2a\u4f20\u5165rnn\u4e4b\u4e2d, \u5f97\u5230\u6700\u7ec8\u7ed3\u679c for i in range ( line_tensor . size ()[ 0 ]): output , hidden = rnn ( line_tensor [ i ], hidden ) # \u56e0\u4e3a\u6211\u4eec\u7684rnn\u5bf9\u8c61\u7531nn.RNN\u5b9e\u4f8b\u5316\u5f97\u5230, \u6700\u7ec8\u8f93\u51fa\u5f62\u72b6\u662f\u4e09\u7ef4\u5f20\u91cf, \u4e3a\u4e86\u6ee1\u8db3\u4e8ecategory_tensor # \u8fdb\u884c\u5bf9\u6bd4\u8ba1\u7b97\u635f\u5931, \u9700\u8981\u51cf\u5c11\u7b2c\u4e00\u4e2a\u7ef4\u5ea6, \u8fd9\u91cc\u4f7f\u7528squeeze()\u65b9\u6cd5 loss = criterion ( output . squeeze ( 0 ), category_tensor ) # \u635f\u5931\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u66f4\u65b0\u6a21\u578b\u4e2d\u6240\u6709\u7684\u53c2\u6570 for p in rnn . parameters (): # \u5c06\u53c2\u6570\u7684\u5f20\u91cf\u8868\u793a\u4e0e\u53c2\u6570\u7684\u68af\u5ea6\u4e58\u4ee5\u5b66\u4e60\u7387\u7684\u7ed3\u679c\u76f8\u52a0\u4ee5\u6b64\u6765\u66f4\u65b0\u53c2\u6570 p . data . add_ ( - learning_rate , p . grad . data ) # \u8fd4\u56de\u7ed3\u679c\u548c\u635f\u5931\u7684\u503c return output , loss . item () torch.add\u6f14\u793a: >>> a = torch.randn(4) >>> a tensor([-0.9732, -0.3497, 0.6245, 0.4022]) >>> b = torch.randn(4, 1) >>> b tensor([[ 0.3743], [-1.7724], [-0.5811], [-0.8017]]) >>> torch.add(a, b, alpha=10) tensor([[ 2.7695, 3.3930, 4.3672, 4.1450], [-18.6971, -18.0736, -17.0994, -17.3216], [ -6.7845, -6.1610, -5.1868, -5.4090], [ -8.9902, -8.3667, -7.3925, -7.6147]]) \u6784\u5efaLSTM\u8bad\u7ec3\u51fd\u6570: # \u4e0e\u4f20\u7edfRNN\u76f8\u6bd4\u591a\u51fa\u7ec6\u80de\u72b6\u6001c def trainLSTM ( category_tensor , line_tensor ): hidden , c = lstm . initHiddenAndC () lstm . zero_grad () for i in range ( line_tensor . size ()[ 0 ]): # \u8fd4\u56deoutput, hidden\u4ee5\u53ca\u7ec6\u80de\u72b6\u6001c output , hidden , c = lstm ( line_tensor [ i ], hidden , c ) loss = criterion ( output . squeeze ( 0 ), category_tensor ) loss . backward () for p in lstm . parameters (): p . data . add_ ( - learning_rate , p . grad . data ) return output , loss . item () \u6784\u5efaGRU\u8bad\u7ec3\u51fd\u6570: # \u4e0e\u4f20\u7edfRNN\u5b8c\u5168\u76f8\u540c, \u53ea\u4e0d\u8fc7\u540d\u5b57\u6539\u6210\u4e86GRU def trainGRU ( category_tensor , line_tensor ): hidden = gru . initHidden () gru . zero_grad () for i in range ( line_tensor . size ()[ 0 ]): output , hidden = gru ( line_tensor [ i ], hidden ) loss = criterion ( output . squeeze ( 0 ), category_tensor ) loss . backward () for p in gru . parameters (): p . data . add_ ( - learning_rate , p . grad . data ) return output , loss . item () \u6784\u5efa\u65f6\u95f4\u8ba1\u7b97\u51fd\u6570: def timeSince ( since ): \"\u83b7\u5f97\u6bcf\u6b21\u6253\u5370\u7684\u8bad\u7ec3\u8017\u65f6, since\u662f\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\" # \u83b7\u5f97\u5f53\u524d\u65f6\u95f4 now = time . time () # \u83b7\u5f97\u65f6\u95f4\u5dee\uff0c\u5c31\u662f\u8bad\u7ec3\u8017\u65f6 s = now - since # \u5c06\u79d2\u8f6c\u5316\u4e3a\u5206\u949f, \u5e76\u53d6\u6574 m = math . floor ( s / 60 ) # \u8ba1\u7b97\u5269\u4e0b\u4e0d\u591f\u51d1\u62101\u5206\u949f\u7684\u79d2\u6570 s -= m * 60 # \u8fd4\u56de\u6307\u5b9a\u683c\u5f0f\u7684\u8017\u65f6 return ' %d m %d s' % ( m , s ) \u8f93\u5165\u53c2\u6570: # \u5047\u5b9a\u6a21\u578b\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\u662f10min\u4e4b\u524d since = time . time () - 10 * 60 \u8c03\u7528: period = timeSince ( since ) print ( period ) \u8f93\u51fa\u6548\u679c: 10 m 0 s \u6784\u5efa\u8bad\u7ec3\u8fc7\u7a0b\u7684\u65e5\u5fd7\u6253\u5370\u51fd\u6570: # \u8bbe\u7f6e\u8bad\u7ec3\u8fed\u4ee3\u6b21\u6570 n_iters = 1000 # \u8bbe\u7f6e\u7ed3\u679c\u7684\u6253\u5370\u95f4\u9694 print_every = 50 # \u8bbe\u7f6e\u7ed8\u5236\u635f\u5931\u66f2\u7ebf\u4e0a\u7684\u5236\u56fe\u95f4\u9694 plot_every = 10 def train ( train_type_fn ): \"\"\"\u8bad\u7ec3\u8fc7\u7a0b\u7684\u65e5\u5fd7\u6253\u5370\u51fd\u6570, \u53c2\u6570train_type_fn\u4ee3\u8868\u9009\u62e9\u54ea\u79cd\u6a21\u578b\u8bad\u7ec3\u51fd\u6570, \u5982trainRNN\"\"\" # \u6bcf\u4e2a\u5236\u56fe\u95f4\u9694\u635f\u5931\u4fdd\u5b58\u5217\u8868 all_losses = [] # \u83b7\u5f97\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\u6233 start = time . time () # \u8bbe\u7f6e\u521d\u59cb\u95f4\u9694\u635f\u5931\u4e3a0 current_loss = 0 # \u4ece1\u5f00\u59cb\u8fdb\u884c\u8bad\u7ec3\u8fed\u4ee3, \u5171n_iters\u6b21 for iter in range ( 1 , n_iters + 1 ): # \u901a\u8fc7randomTrainingExample\u51fd\u6570\u968f\u673a\u83b7\u53d6\u4e00\u7ec4\u8bad\u7ec3\u6570\u636e\u548c\u5bf9\u5e94\u7684\u7c7b\u522b category , line , category_tensor , line_tensor = randomTrainingExample () # \u5c06\u8bad\u7ec3\u6570\u636e\u548c\u5bf9\u5e94\u7c7b\u522b\u7684\u5f20\u91cf\u8868\u793a\u4f20\u5165\u5230train\u51fd\u6570\u4e2d output , loss = train_type_fn ( category_tensor , line_tensor ) # \u8ba1\u7b97\u5236\u56fe\u95f4\u9694\u4e2d\u7684\u603b\u635f\u5931 current_loss += loss # \u5982\u679c\u8fed\u4ee3\u6570\u80fd\u591f\u6574\u9664\u6253\u5370\u95f4\u9694 if iter % print_every == 0 : # \u53d6\u8be5\u8fed\u4ee3\u6b65\u4e0a\u7684output\u901a\u8fc7categoryFromOutput\u51fd\u6570\u83b7\u5f97\u5bf9\u5e94\u7684\u7c7b\u522b\u548c\u7c7b\u522b\u7d22\u5f15 guess , guess_i = categoryFromOutput ( output ) # \u7136\u540e\u548c\u771f\u5b9e\u7684\u7c7b\u522bcategory\u505a\u6bd4\u8f83, \u5982\u679c\u76f8\u540c\u5219\u6253\u5bf9\u53f7, \u5426\u5219\u6253\u53c9\u53f7. correct = '\u2713' if guess == category else '\u2717 ( %s )' % category # \u6253\u5370\u8fed\u4ee3\u6b65, \u8fed\u4ee3\u6b65\u767e\u5206\u6bd4, \u5f53\u524d\u8bad\u7ec3\u8017\u65f6, \u635f\u5931, \u8be5\u6b65\u9884\u6d4b\u7684\u540d\u5b57, \u4ee5\u53ca\u662f\u5426\u6b63\u786e print ( ' %d %d%% ( %s ) %.4f %s / %s %s ' % ( iter , iter / n_iters * 100 , timeSince ( start ), loss , line , guess , correct )) # \u5982\u679c\u8fed\u4ee3\u6570\u80fd\u591f\u6574\u9664\u5236\u56fe\u95f4\u9694 if iter % plot_every == 0 : # \u5c06\u4fdd\u5b58\u8be5\u95f4\u9694\u4e2d\u7684\u5e73\u5747\u635f\u5931\u5230all_losses\u5217\u8868\u4e2d all_losses . append ( current_loss / plot_every ) # \u95f4\u9694\u635f\u5931\u91cd\u7f6e\u4e3a0 current_loss = 0 # \u8fd4\u56de\u5bf9\u5e94\u7684\u603b\u635f\u5931\u5217\u8868\u548c\u8bad\u7ec3\u8017\u65f6 return all_losses , int ( time . time () - start ) \u5f00\u59cb\u8bad\u7ec3\u4f20\u7edfRNN, LSTM, GRU\u6a21\u578b\u5e76\u5236\u4f5c\u5bf9\u6bd4\u56fe: # \u8c03\u7528train\u51fd\u6570, \u5206\u522b\u8fdb\u884cRNN, LSTM, GRU\u6a21\u578b\u7684\u8bad\u7ec3 # \u5e76\u8fd4\u56de\u5404\u81ea\u7684\u5168\u90e8\u635f\u5931, \u4ee5\u53ca\u8bad\u7ec3\u8017\u65f6\u7528\u4e8e\u5236\u56fe all_losses1 , period1 = train ( trainRNN ) all_losses2 , period2 = train ( trainLSTM ) all_losses3 , period3 = train ( trainGRU ) # \u7ed8\u5236\u635f\u5931\u5bf9\u6bd4\u66f2\u7ebf, \u8bad\u7ec3\u8017\u65f6\u5bf9\u6bd4\u67f1\u5f20\u56fe # \u521b\u5efa\u753b\u5e030 plt . figure ( 0 ) # \u7ed8\u5236\u635f\u5931\u5bf9\u6bd4\u66f2\u7ebf plt . plot ( all_losses1 , label = \"RNN\" ) plt . plot ( all_losses2 , color = \"red\" , label = \"LSTM\" ) plt . plot ( all_losses3 , color = \"orange\" , label = \"GRU\" ) plt . legend ( loc = 'upper left' ) # \u521b\u5efa\u753b\u5e031 plt . figure ( 1 ) x_data = [ \"RNN\" , \"LSTM\" , \"GRU\" ] y_data = [ period1 , period2 , period3 ] # \u7ed8\u5236\u8bad\u7ec3\u8017\u65f6\u5bf9\u6bd4\u67f1\u72b6\u56fe plt . bar ( range ( len ( x_data )), y_data , tick_label = x_data ) \u4f20\u7edfRNN\u8bad\u7ec3\u65e5\u5fd7\u8f93\u51fa: 5000 5 % ( 0 m 16 s ) 3.2264 Carr / Chinese \u2717 ( English ) 10000 10 % ( 0 m 30 s ) 1.2063 Biondi / Italian \u2713 15000 15 % ( 0 m 47 s ) 1.4010 Palmeiro / Italian \u2717 ( Portuguese ) 20000 20 % ( 1 m 0 s ) 3.8165 Konae / Fre nch \u2717 ( Japanese ) 25000 25 % ( 1 m 17 s ) 0.5420 Koo / Korean \u2713 30000 30 % ( 1 m 31 s ) 5.6180 Fergus / Portuguese \u2717 ( Irish ) 35000 35 % ( 1 m 45 s ) 0.6073 Meeuwessen / Dutch \u2713 40000 40 % ( 1 m 59 s ) 2.1356 Olan / Irish \u2717 ( English ) 45000 45 % ( 2 m 13 s ) 0.3352 Romijnders / Dutch \u2713 50000 50 % ( 2 m 26 s ) 1.1624 Flanagan / Irish \u2713 55000 55 % ( 2 m 40 s ) 0.4743 Dubhshlaine / Irish \u2713 60000 60 % ( 2 m 54 s ) 2.7260 Lee / Chinese \u2717 ( Korean ) 65000 65 % ( 3 m 8 s ) 1.2075 Rutherford / English \u2713 70000 70 % ( 3 m 23 s ) 3.6317 Han / Chinese \u2717 ( Vietnamese ) 75000 75 % ( 3 m 37 s ) 0.1779 Accorso / Italian \u2713 80000 80 % ( 3 m 52 s ) 0.1095 O ' Brien / Irish \u2713 85000 85 % ( 4 m 6 s ) 2.3845 Moran / Irish \u2717 ( English ) 90000 90 % ( 4 m 21 s ) 0.3871 Xuan / Chinese \u2713 95000 95 % ( 4 m 36 s ) 0.1104 Inoguchi / Japanese \u2713 100000 100 % ( 4 m 52 s ) 4.2142 Simon / Fre nch \u2713 ( Irish ) LSTM\u8bad\u7ec3\u65e5\u5fd7\u8f93\u51fa: 5000 5 % ( 0 m 25 s ) 2.8640 Fabian / Dutch \u2717 ( Polish ) 10000 10 % ( 0 m 48 s ) 2.9079 Log in / Russian \u2717 ( Irish ) 15000 15 % ( 1 m 14 s ) 2.8223 Fernandes / Greek \u2717 ( Portuguese ) 20000 20 % ( 1 m 40 s ) 2.7069 Hudecek / Polish \u2717 ( Czech ) 25000 25 % ( 2 m 4 s ) 2.6162 Acciaio / Czech \u2717 ( Italian ) 30000 30 % ( 2 m 27 s ) 2.4044 Magalhaes / Greek \u2717 ( Portuguese ) 35000 35 % ( 2 m 52 s ) 1.3030 Antoschenko / Russian \u2713 40000 40 % ( 3 m 18 s ) 0.8912 Xing / Chinese \u2713 45000 45 % ( 3 m 42 s ) 1.1788 Numata / Japanese \u2713 50000 50 % ( 4 m 7 s ) 2.2863 Baz / Vietnamese \u2717 ( Arabic ) 55000 55 % ( 4 m 32 s ) 3.2549 Close / Dutch \u2717 ( Greek ) 60000 60 % ( 4 m 54 s ) 4.5170 Pan / Vietnamese \u2717 ( Fre nch ) 65000 65 % ( 5 m 16 s ) 1.1503 San / Chinese \u2717 ( Korean ) 70000 70 % ( 5 m 39 s ) 1.2357 Pavlik / Polish \u2717 ( Czech ) 75000 75 % ( 6 m 2 s ) 2.3275 Alves / Portuguese \u2717 ( English ) 80000 80 % ( 6 m 28 s ) 2.3294 Plamondon / Scottish \u2717 ( Fre nch ) 85000 85 % ( 6 m 54 s ) 2.7794 Water / Fre nch \u2717 ( English ) 90000 90 % ( 7 m 18 s ) 0.8021 Pereira / Portuguese \u2713 95000 95 % ( 7 m 43 s ) 1.4374 Kunkel / German \u2713 100000 100 % ( 8 m 5 s ) 1.2792 Taylor / Scottish \u2713 GRU\u8bad\u7ec3\u65e5\u5fd7\u8f93\u51fa: 5000 5 % ( 0 m 22 s ) 2.8182 Bernard / Irish \u2717 ( Polish ) 10000 10 % ( 0 m 48 s ) 2.8966 Macias / Greek \u2717 ( Spanish ) 15000 15 % ( 1 m 13 s ) 3.1046 Morcos / Greek \u2717 ( Arabic ) 20000 20 % ( 1 m 37 s ) 1.5359 Davlatov / Russian \u2713 25000 25 % ( 2 m 1 s ) 1.0999 Han / Vietnamese \u2713 30000 30 % ( 2 m 26 s ) 4.1017 Chepel / German \u2717 ( Russian ) 35000 35 % ( 2 m 49 s ) 1.8765 Klein / Scottish \u2717 ( English ) 40000 40 % ( 3 m 11 s ) 1.1265 an / Chinese \u2717 ( Vietnamese ) 45000 45 % ( 3 m 34 s ) 0.3511 Slusarski / Polish \u2713 50000 50 % ( 3 m 59 s ) 0.9694 Than / Vietnamese \u2713 55000 55 % ( 4 m 25 s ) 2.3576 Bokhoven / Russian \u2717 ( Dutch ) 60000 60 % ( 4 m 51 s ) 0.1344 Filipowski / Polish \u2713 65000 65 % ( 5 m 15 s ) 1.4070 Reuter / German \u2713 70000 70 % ( 5 m 37 s ) 1.8409 Guillory / Irish \u2717 ( Fre nch ) 75000 75 % ( 6 m 0 s ) 0.6882 Song / Korean \u2713 80000 80 % ( 6 m 22 s ) 5.0092 Maly / Scottish \u2717 ( Polish ) 85000 85 % ( 6 m 43 s ) 2.4570 Sai / Chinese \u2717 ( Vietnamese ) 90000 90 % ( 7 m 5 s ) 1.2006 Heel / German \u2717 ( Dutch ) 95000 95 % ( 7 m 27 s ) 0.9144 Doan / Vietnamese \u2713 100000 100 % ( 7 m 50 s ) 1.1320 Crespo / Portuguese \u2713 \u635f\u5931\u5bf9\u6bd4\u66f2\u7ebf: \u635f\u5931\u5bf9\u6bd4\u66f2\u7ebf\u5206\u6790: \u6a21\u578b\u8bad\u7ec3\u7684\u635f\u5931\u964d\u4f4e\u5feb\u6162\u4ee3\u8868\u6a21\u578b\u6536\u655b\u7a0b\u5ea6, \u7531\u56fe\u53ef\u77e5, \u4f20\u7edfRNN\u7684\u6a21\u578b\u6536\u655b\u60c5\u51b5\u6700\u597d, \u7136\u540e\u662fGRU, \u6700\u540e\u662fLSTM, \u8fd9\u662f\u56e0\u4e3a: \u6211\u4eec\u5f53\u524d\u5904\u7406\u7684\u6587\u672c\u6570\u636e\u662f\u4eba\u540d, \u4ed6\u4eec\u7684\u957f\u5ea6\u6709\u9650, \u4e14\u957f\u8ddd\u79bb\u5b57\u6bcd\u95f4\u57fa\u672c\u65e0\u7279\u5b9a\u5173\u8054, \u56e0\u6b64\u65e0\u6cd5\u53d1\u6325\u6539\u8fdb\u6a21\u578bLSTM\u548cGRU\u7684\u957f\u8ddd\u79bb\u6355\u6349\u8bed\u4e49\u5173\u8054\u7684\u4f18\u52bf. \u6240\u4ee5\u5728\u4ee5\u540e\u7684\u6a21\u578b\u9009\u7528\u65f6, \u8981\u901a\u8fc7\u5bf9\u4efb\u52a1\u7684\u5206\u6790\u4ee5\u53ca\u5b9e\u9a8c\u5bf9\u6bd4, \u9009\u62e9\u6700\u9002\u5408\u7684\u6a21\u578b. \u8bad\u7ec3\u8017\u65f6\u5bf9\u6bd4\u56fe: \u8bad\u7ec3\u8017\u65f6\u5bf9\u6bd4\u56fe\u5206\u6790: \u6a21\u578b\u8bad\u7ec3\u7684\u8017\u65f6\u957f\u77ed\u4ee3\u8868\u6a21\u578b\u7684\u8ba1\u7b97\u590d\u6742\u5ea6, \u7531\u56fe\u53ef\u77e5, \u4e5f\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u7684\u7406\u8bba\u5206\u6790, \u4f20\u7edfRNN\u590d\u6742\u5ea6\u6700\u4f4e, \u8017\u65f6\u51e0\u4e4e\u53ea\u662f\u540e\u4e24\u8005\u7684\u4e00\u534a, \u7136\u540e\u662fGRU, \u6700\u540e\u662f\u590d\u6742\u5ea6\u6700\u9ad8\u7684LSTM. \u7ed3\u8bba: \u6a21\u578b\u9009\u7528\u4e00\u822c\u5e94\u901a\u8fc7\u5b9e\u9a8c\u5bf9\u6bd4, \u5e76\u975e\u8d8a\u590d\u6742\u6216\u8d8a\u5148\u8fdb\u7684\u6a21\u578b\u8868\u73b0\u8d8a\u597d, \u800c\u662f\u9700\u8981\u7ed3\u5408\u81ea\u5df1\u7684\u7279\u5b9a\u4efb\u52a1, \u4ece\u5bf9\u6570\u636e\u7684\u5206\u6790\u548c\u5b9e\u9a8c\u7ed3\u679c\u4e2d\u83b7\u5f97\u6700\u4f73\u7b54\u6848. \u7b2c\u4e94\u6b65: \u6784\u5efa\u8bc4\u4f30\u51fd\u6570\u5e76\u8fdb\u884c\u9884\u6d4b \u6784\u5efa\u4f20\u7edfRNN\u8bc4\u4f30\u51fd\u6570: def evaluateRNN ( line_tensor ) : \"\"\"\u8bc4\u4f30\u51fd\u6570, \u548c\u8bad\u7ec3\u51fd\u6570\u903b\u8f91\u76f8\u540c, \u53c2\u6570\u662fline_tensor\u4ee3\u8868\u540d\u5b57\u7684\u5f20\u91cf\u8868\u793a\"\"\" # \u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf hidden = rnn . initHidden () # \u5c06\u8bc4\u4f30\u6570\u636eline_tensor\u7684\u6bcf\u4e2a\u5b57\u7b26\u9010\u4e2a\u4f20\u5165rnn\u4e4b\u4e2d for i in range ( line_tensor . size () [ 0 ] ) : output , hidden = rnn ( line_tensor [ i ] , hidden ) # \u83b7\u5f97\u8f93\u51fa\u7ed3\u679c return output . squeeze ( 0 ) \u6784\u5efaLSTM\u8bc4\u4f30\u51fd\u6570: def evaluateLSTM ( line_tensor ): # \u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf\u548c\u7ec6\u80de\u72b6\u6001\u5f20\u91cf hidden , c = lstm . initHiddenAndC () # \u5c06\u8bc4\u4f30\u6570\u636eline_tensor\u7684\u6bcf\u4e2a\u5b57\u7b26\u9010\u4e2a\u4f20\u5165lstm\u4e4b\u4e2d for i in range ( line_tensor . size ()[ 0 ]): output , hidden , c = lstm ( line_tensor [ i ], hidden , c ) return output . squeeze ( 0 ) \u6784\u5efaGRU\u8bc4\u4f30\u51fd\u6570: def evaluateGRU ( line_tensor ): hidden = gru . initHidden () # \u5c06\u8bc4\u4f30\u6570\u636eline_tensor\u7684\u6bcf\u4e2a\u5b57\u7b26\u9010\u4e2a\u4f20\u5165gru\u4e4b\u4e2d for i in range ( line_tensor . size ()[ 0 ]): output , hidden = gru ( line_tensor [ i ], hidden ) return output . squeeze ( 0 ) \u8f93\u5165\u53c2\u6570: line = \"Bai\" line_tensor = lineToTensor ( line ) \u8c03\u7528: rnn_output = evaluateRNN ( line_tensor ) lstm_output = evaluateLSTM ( line_tensor ) gru_output = evaluateGRU ( line_tensor ) print ( \"rnn_output:\" , rnn_output ) print ( \"gru_output:\" , lstm_output ) print ( \"gru_output:\" , gru_output ) \u8f93\u51fa\u6548\u679c: rnn_output : tensor ([[- 2.8923 , - 2.7665 , - 2.8640 , - 2.7907 , - 2.9919 , - 2.9482 , - 2.8809 , - 2.9526 , - 2.9445 , - 2.8115 , - 2.9544 , - 2.9043 , - 2.8016 , - 2.8668 , - 3.0484 , - 2.9382 , - 2.9935 , - 2.7393 ]], grad_fn =< SqueezeBackward1 >) gru_output : tensor ([[- 2.9498 , - 2.9455 , - 2.8981 , - 2.7791 , - 2.8915 , - 2.8534 , - 2.8637 , - 2.8902 , - 2.9537 , - 2.8834 , - 2.8973 , - 2.9711 , - 2.8622 , - 2.9001 , - 2.9149 , - 2.8762 , - 2.8286 , - 2.8866 ]], grad_fn =< SqueezeBackward1 >) gru_output : tensor ([[- 2.8781 , - 2.9347 , - 2.7355 , - 2.9662 , - 2.9404 , - 2.9600 , - 2.8810 , - 2.8000 , - 2.8151 , - 2.9132 , - 2.7564 , - 2.8849 , - 2.9814 , - 3.0499 , - 2.9153 , - 2.8190 , - 2.8841 , - 2.9706 ]], grad_fn =< SqueezeBackward1 >) \u6784\u5efa\u9884\u6d4b\u51fd\u6570: def predict ( input_line , evaluate , n_predictions = 3 ): \"\"\"\u9884\u6d4b\u51fd\u6570, \u8f93\u5165\u53c2\u6570input_line\u4ee3\u8868\u8f93\u5165\u7684\u540d\u5b57, n_predictions\u4ee3\u8868\u9700\u8981\u53d6\u6700\u6709\u53ef\u80fd\u7684top\u4e2a\"\"\" # \u9996\u5148\u6253\u5370\u8f93\u5165 print ( ' \\n > %s ' % input_line ) # \u4ee5\u4e0b\u64cd\u4f5c\u7684\u76f8\u5173\u5f20\u91cf\u4e0d\u8fdb\u884c\u6c42\u68af\u5ea6 with torch . no_grad (): # \u4f7f\u8f93\u5165\u7684\u540d\u5b57\u8f6c\u6362\u4e3a\u5f20\u91cf\u8868\u793a, \u5e76\u4f7f\u7528evaluate\u51fd\u6570\u83b7\u5f97\u9884\u6d4b\u8f93\u51fa output = evaluate ( lineToTensor ( input_line )) # \u4ece\u9884\u6d4b\u7684\u8f93\u51fa\u4e2d\u53d6\u524d3\u4e2a\u6700\u5927\u7684\u503c\u53ca\u5176\u7d22\u5f15 topv , topi = output . topk ( n_predictions , 1 , True ) # \u521b\u5efa\u76db\u88c5\u7ed3\u679c\u7684\u5217\u8868 predictions = [] # \u904d\u5386n_predictions for i in range ( n_predictions ): # \u4ecetopv\u4e2d\u53d6\u51fa\u7684output\u503c value = topv [ 0 ][ i ] . item () # \u53d6\u51fa\u7d22\u5f15\u5e76\u627e\u5230\u5bf9\u5e94\u7684\u7c7b\u522b category_index = topi [ 0 ][ i ] . item () # \u6253\u5370ouput\u7684\u503c, \u548c\u5bf9\u5e94\u7684\u7c7b\u522b print ( '( %.2f ) %s ' % ( value , all_categories [ category_index ])) # \u5c06\u7ed3\u679c\u88c5\u8fdbpredictions\u4e2d predictions . append ([ value , all_categories [ category_index ]]) \u8c03\u7528: for evaluate_fn in [ evaluateRNN , evaluateLSTM , evaluateGRU ]: print ( \"-\" * 18 ) predict ( 'Dovesky' , evaluate_fn ) predict ( 'Jackson' , evaluate_fn ) predict ( 'Satoshi' , evaluate_fn ) \u8f93\u51fa\u6548\u679c ------------------ > Dovesky (-0.58) Russian (-1.40) Czech (-2.52) Scottish > Jackson (-0.27) Scottish (-1.71) English (-4.14) French > Satoshi (-0.02) Japanese (-5.10) Polish (-5.42) Arabic ------------------ > Dovesky (-1.03) Russian (-1.12) Czech (-2.22) Polish > Jackson (-0.37) Scottish (-2.17) English (-2.81) Czech > Satoshi (-0.29) Japanese (-1.90) Arabic (-3.20) Polish ------------------ > Dovesky (-0.44) Russian (-1.55) Czech (-3.06) Polish > Jackson (-0.39) Scottish (-1.91) English (-3.10) Polish > Satoshi (-0.43) Japanese (-1.22) Arabic (-3.85) Italian \u5c0f\u8282\u603b\u7ed3: \u5b66\u4e60\u4e86\u5173\u4e8e\u4eba\u540d\u5206\u7c7b\u95ee\u9898: \u4ee5\u4e00\u4e2a\u4eba\u540d\u4e3a\u8f93\u5165, \u4f7f\u7528\u6a21\u578b\u5e2e\u52a9\u6211\u4eec\u5224\u65ad\u5b83\u6700\u6709\u53ef\u80fd\u662f\u6765\u81ea\u54ea\u4e00\u4e2a\u56fd\u5bb6\u7684\u4eba\u540d, \u8fd9\u5728\u67d0\u4e9b\u56fd\u9645\u5316\u516c\u53f8\u7684\u4e1a\u52a1\u4e2d\u5177\u6709\u91cd\u8981\u610f\u4e49, \u5728\u7528\u6237\u6ce8\u518c\u8fc7\u7a0b\u4e2d, \u4f1a\u6839\u636e\u7528\u6237\u586b\u5199\u7684\u540d\u5b57\u76f4\u63a5\u7ed9\u4ed6\u5206\u914d\u53ef\u80fd\u7684\u56fd\u5bb6\u6216\u5730\u533a\u9009\u9879, \u4ee5\u53ca\u8be5\u56fd\u5bb6\u6216\u5730\u533a\u7684\u56fd\u65d7, \u9650\u5236\u624b\u673a\u53f7\u7801\u4f4d\u6570\u7b49\u7b49. \u4eba\u540d\u5206\u7c7b\u5668\u7684\u5b9e\u73b0\u53ef\u5206\u4e3a\u4ee5\u4e0b\u4e94\u4e2a\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305. \u7b2c\u4e8c\u6b65: \u5bf9data\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u6ee1\u8db3\u8bad\u7ec3\u8981\u6c42. \u7b2c\u4e09\u6b65: \u6784\u5efaRNN\u6a21\u578b(\u5305\u62ec\u4f20\u7edfRNN, LSTM\u4ee5\u53caGRU). \u7b2c\u56db\u6b65: \u6784\u5efa\u8bad\u7ec3\u51fd\u6570\u5e76\u8fdb\u884c\u8bad\u7ec3. \u7b2c\u4e94\u6b65: \u6784\u5efa\u8bc4\u4f30\u51fd\u6570\u5e76\u8fdb\u884c\u9884\u6d4b. \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 python\u7248\u672c\u4f7f\u75283.6.x, pytorch\u7248\u672c\u4f7f\u75281.3.1 \u7b2c\u4e8c\u6b65: \u5bf9data\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u6ee1\u8db3\u8bad\u7ec3\u8981\u6c42 \u5b9a\u4e49\u6570\u636e\u96c6\u8def\u5f84\u5e76\u83b7\u53d6\u5e38\u7528\u7684\u5b57\u7b26\u6570\u91cf. \u5b57\u7b26\u89c4\u8303\u5316\u4e4bunicode\u8f6cAscii\u51fd\u6570unicodeToAscii. \u6784\u5efa\u4e00\u4e2a\u4ece\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5185\u5bb9\u5230\u5185\u5b58\u7684\u51fd\u6570readLines. \u6784\u5efa\u4eba\u540d\u7c7b\u522b\uff08\u6240\u5c5e\u7684\u8bed\u8a00\uff09\u5217\u8868\u4e0e\u4eba\u540d\u5bf9\u5e94\u5173\u7cfb\u5b57\u5178 \u5c06\u4eba\u540d\u8f6c\u5316\u4e3a\u5bf9\u5e94onehot\u5f20\u91cf\u8868\u793a\u51fd\u6570lineToTensor \u7b2c\u4e09\u6b65: \u6784\u5efaRNN\u6a21\u578b \u6784\u5efa\u4f20\u7edf\u7684RNN\u6a21\u578b\u7684\u7c7bclass RNN. \u6784\u5efaLSTM\u6a21\u578b\u7684\u7c7bclass LSTM. \u6784\u5efaGRU\u6a21\u578b\u7684\u7c7bclass GRU. \u7b2c\u56db\u6b65: \u6784\u5efa\u8bad\u7ec3\u51fd\u6570\u5e76\u8fdb\u884c\u8bad\u7ec3 \u4ece\u8f93\u51fa\u7ed3\u679c\u4e2d\u83b7\u5f97\u6307\u5b9a\u7c7b\u522b\u51fd\u6570categoryFromOutput. \u968f\u673a\u751f\u6210\u8bad\u7ec3\u6570\u636e\u51fd\u6570randomTrainingExample. \u6784\u5efa\u4f20\u7edfRNN\u8bad\u7ec3\u51fd\u6570trainRNN. \u6784\u5efaLSTM\u8bad\u7ec3\u51fd\u6570trainLSTM. \u6784\u5efaGRU\u8bad\u7ec3\u51fd\u6570trainGRU. \u6784\u5efa\u65f6\u95f4\u8ba1\u7b97\u51fd\u6570timeSince. \u6784\u5efa\u8bad\u7ec3\u8fc7\u7a0b\u7684\u65e5\u5fd7\u6253\u5370\u51fd\u6570train.\u5f97\u5230\u635f\u5931\u5bf9\u6bd4\u66f2\u7ebf\u548c\u8bad\u7ec3\u8017\u65f6\u5bf9\u6bd4\u56fe. \u635f\u5931\u5bf9\u6bd4\u66f2\u7ebf\u5206\u6790: \u6a21\u578b\u8bad\u7ec3\u7684\u635f\u5931\u964d\u4f4e\u5feb\u6162\u4ee3\u8868\u6a21\u578b\u6536\u655b\u7a0b\u5ea6, \u7531\u56fe\u53ef\u77e5, \u4f20\u7edfRNN\u7684\u6a21\u578b\u6536\u655b\u60c5\u51b5\u6700\u597d, \u7136\u540e\u662fGRU, \u6700\u540e\u662fLSTM, \u8fd9\u662f\u56e0\u4e3a: \u6211\u4eec\u5f53\u524d\u5904\u7406\u7684\u6587\u672c\u6570\u636e\u662f\u4eba\u540d, \u4ed6\u4eec\u7684\u957f\u5ea6\u6709\u9650, \u4e14\u957f\u8ddd\u79bb\u5b57\u6bcd\u95f4\u57fa\u672c\u65e0\u7279\u5b9a\u5173\u8054, \u56e0\u6b64\u65e0\u6cd5\u53d1\u6325\u6539\u8fdb\u6a21\u578bLSTM\u548cGRU\u7684\u957f\u8ddd\u79bb\u6355\u6349\u8bed\u4e49\u5173\u8054\u7684\u4f18\u52bf. \u6240\u4ee5\u5728\u4ee5\u540e\u7684\u6a21\u578b\u9009\u7528\u65f6, \u8981\u901a\u8fc7\u5bf9\u4efb\u52a1\u7684\u5206\u6790\u4ee5\u53ca\u5b9e\u9a8c\u5bf9\u6bd4, \u9009\u62e9\u6700\u9002\u5408\u7684\u6a21\u578b. \u8bad\u7ec3\u8017\u65f6\u5bf9\u6bd4\u56fe\u5206\u6790: \u6a21\u578b\u8bad\u7ec3\u7684\u8017\u65f6\u957f\u77ed\u4ee3\u8868\u6a21\u578b\u7684\u8ba1\u7b97\u590d\u6742\u5ea6, \u7531\u56fe\u53ef\u77e5, \u4e5f\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u7684\u7406\u8bba\u5206\u6790, \u4f20\u7edfRNN\u590d\u6742\u5ea6\u6700\u4f4e, \u8017\u65f6\u51e0\u4e4e\u53ea\u662f\u540e\u4e24\u8005\u7684\u4e00\u534a, \u7136\u540e\u662fGRU, \u6700\u540e\u662f\u590d\u6742\u5ea6\u6700\u9ad8\u7684LSTM. \u7ed3\u8bba: \u6a21\u578b\u9009\u7528\u4e00\u822c\u5e94\u901a\u8fc7\u5b9e\u9a8c\u5bf9\u6bd4, \u5e76\u975e\u8d8a\u590d\u6742\u6216\u8d8a\u5148\u8fdb\u7684\u6a21\u578b\u8868\u73b0\u8d8a\u597d, \u800c\u662f\u9700\u8981\u7ed3\u5408\u81ea\u5df1\u7684\u7279\u5b9a\u4efb\u52a1, \u4ece\u5bf9\u6570\u636e\u7684\u5206\u6790\u548c\u5b9e\u9a8c\u7ed3\u679c\u4e2d\u83b7\u5f97\u6700\u4f73\u7b54\u6848. \u7b2c\u4e94\u6b65: \u6784\u5efa\u8bc4\u4f30\u51fd\u6570\u5e76\u8fdb\u884c\u9884\u6d4b \u6784\u5efa\u4f20\u7edfRNN\u8bc4\u4f30\u51fd\u6570evaluateRNN. \u6784\u5efaLSTM\u8bc4\u4f30\u51fd\u6570evaluateLSTM. \u6784\u5efaGRU\u8bc4\u4f30\u51fd\u6570evaluateGRU. \u6784\u5efa\u9884\u6d4b\u51fd\u6570predict. 2.2 \u4f7f\u7528seq2seq\u6a21\u578b\u67b6\u6784\u5b9e\u73b0\u82f1\u8bd1\u6cd5\u4efb\u52a1 \u5b66\u4e60\u76ee\u6807: \u66f4\u6df1\u4e00\u6b65\u4e86\u89e3seq2seq\u6a21\u578b\u67b6\u6784\u548c\u7ffb\u8bd1\u6570\u636e\u96c6. \u638c\u63e1\u4f7f\u7528\u57fa\u4e8eGRU\u7684seq2seq\u6a21\u578b\u67b6\u6784\u5b9e\u73b0\u7ffb\u8bd1\u7684\u8fc7\u7a0b. \u638c\u63e1Attention\u673a\u5236\u5728\u89e3\u7801\u5668\u7aef\u7684\u5b9e\u73b0\u8fc7\u7a0b. seq2seq\u6a21\u578b\u67b6\u6784: seq2seq\u6a21\u578b\u67b6\u6784\u5206\u6790: \u4ece\u56fe\u4e2d\u53ef\u77e5, seq2seq\u6a21\u578b\u67b6\u6784, \u5305\u62ec\u4e24\u90e8\u5206\u5206\u522b\u662fencoder(\u7f16\u7801\u5668)\u548cdecoder(\u89e3\u7801\u5668), \u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u7684\u5185\u90e8\u5b9e\u73b0\u90fd\u4f7f\u7528\u4e86GRU\u6a21\u578b, \u8fd9\u91cc\u5b83\u8981\u5b8c\u6210\u7684\u662f\u4e00\u4e2a\u4e2d\u6587\u5230\u82f1\u6587\u7684\u7ffb\u8bd1: \u6b22\u8fce \u6765 \u5317\u4eac --> welcome to BeiJing. \u7f16\u7801\u5668\u9996\u5148\u5904\u7406\u4e2d\u6587\u8f93\u5165\"\u6b22\u8fce \u6765 \u5317\u4eac\", \u901a\u8fc7GRU\u6a21\u578b\u83b7\u5f97\u6bcf\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u5f20\u91cf\uff0c\u6700\u540e\u5c06\u5b83\u4eec\u62fc\u63a5\u6210\u4e00\u4e2a\u4e2d\u95f4\u8bed\u4e49\u5f20\u91cfc, \u63a5\u7740\u89e3\u7801\u5668\u5c06\u4f7f\u7528\u8fd9\u4e2a\u4e2d\u95f4\u8bed\u4e49\u5f20\u91cfc\u4ee5\u53ca\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u9690\u5c42\u5f20\u91cf, \u9010\u4e2a\u751f\u6210\u5bf9\u5e94\u7684\u7ffb\u8bd1\u8bed\u8a00. \u7ffb\u8bd1\u6570\u636e\u96c6: \u4e0b\u8f7d\u5730\u5740: https://download.pytorch.org/tutorial/data.zip \u6570\u636e\u6587\u4ef6\u9884\u89c8: - data/ - eng-fra.txt She feeds her dog a meat - free diet . Elle fait suivre \u00e0 son chien un r\u00e9gime sans viande . She feeds her dog a meat - free diet . Elle fait suivre \u00e0 son chien un r\u00e9gime non carn\u00e9 . She folded her handkerchief neatly . Elle plia soigneusement son mouchoir . She folded her handkerchief neatly . Elle a soigneusement pli\u00e9 son mouchoir . She found a need and she filled it . Elle trouva un besoin et le remplit . She gave birth to twins a week ago . Elle a donn\u00e9 naissance \u00e0 des jumeaux il y a une semaine . She gave him money as well as food . Elle lui donna de l ' argent aussi bien que de la nourriture . She gave it her personal attention . Elle y a pr\u00eat\u00e9 son attention personnelle . She gave me a smile of recognition . Elle m ' adressa un sourire indiquant qu ' elle me reconnaissait . She glanced shyly at the young man . Elle a timidement jet\u00e9 un regard au jeune homme . She goes to the movies once a week . Elle va au cin\u00e9ma une fois par semaine . She got into the car and drove off . Elle s ' introduisit dans la voiture et partit . \u57fa\u4e8eGRU\u7684seq2seq\u6a21\u578b\u67b6\u6784\u5b9e\u73b0\u7ffb\u8bd1\u7684\u8fc7\u7a0b: \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305. \u7b2c\u4e8c\u6b65: \u5bf9\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u6570\u636e\u8fdb\u884c\u5904\u7406, \u4ee5\u6ee1\u8db3\u6a21\u578b\u8bad\u7ec3\u8981\u6c42. \u7b2c\u4e09\u6b65: \u6784\u5efa\u57fa\u4e8eGRU\u7684\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668. \u7b2c\u56db\u6b65: \u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570, \u5e76\u8fdb\u884c\u8bad\u7ec3. \u7b2c\u4e94\u6b65: \u6784\u5efa\u6a21\u578b\u8bc4\u4f30\u51fd\u6570, \u5e76\u8fdb\u884c\u6d4b\u8bd5\u4ee5\u53caAttention\u6548\u679c\u5206\u6790. \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 python\u7248\u672c\u4f7f\u75283.6.x, pytorch\u7248\u672c\u4f7f\u75281.3.1 pip install torch==1.3.1 # \u4eceio\u5de5\u5177\u5305\u5bfc\u5165open\u65b9\u6cd5 from io import open # \u7528\u4e8e\u5b57\u7b26\u89c4\u8303\u5316 import unicodedata # \u7528\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f import re # \u7528\u4e8e\u968f\u673a\u751f\u6210\u6570\u636e import random # \u7528\u4e8e\u6784\u5efa\u7f51\u7edc\u7ed3\u6784\u548c\u51fd\u6570\u7684torch\u5de5\u5177\u5305 import torch import torch.nn as nn import torch.nn.functional as F # torch\u4e2d\u9884\u5b9a\u4e49\u7684\u4f18\u5316\u65b9\u6cd5\u5de5\u5177\u5305 from torch import optim # \u8bbe\u5907\u9009\u62e9, \u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5728cuda\u6216\u8005cpu\u4e0a\u8fd0\u884c\u4f60\u7684\u4ee3\u7801 device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) \u7b2c\u4e8c\u6b65: \u5bf9\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u6570\u636e\u8fdb\u884c\u5904\u7406, \u4ee5\u6ee1\u8db3\u6a21\u578b\u8bad\u7ec3\u8981\u6c42 \u5c06\u6307\u5b9a\u8bed\u8a00\u4e2d\u7684\u8bcd\u6c47\u6620\u5c04\u6210\u6570\u503c: # \u8d77\u59cb\u6807\u5fd7 SOS_token = 0 # \u7ed3\u675f\u6807\u5fd7 EOS_token = 1 class Lang : def __init__ ( self , name ) : \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u53c2\u6570name\u4ee3\u8868\u4f20\u5165\u67d0\u79cd\u8bed\u8a00\u7684\u540d\u5b57\"\"\" # \u5c06name\u4f20\u5165\u7c7b\u4e2d self . name = name # \u521d\u59cb\u5316\u8bcd\u6c47\u5bf9\u5e94\u81ea\u7136\u6570\u503c\u7684\u5b57\u5178 self . word2index = {} # \u521d\u59cb\u5316\u81ea\u7136\u6570\u503c\u5bf9\u5e94\u8bcd\u6c47\u7684\u5b57\u5178 , \u5176\u4e2d0 \uff0c 1 \u5bf9\u5e94\u7684SOS\u548cEOS\u5df2\u7ecf\u5728\u91cc\u9762\u4e86 self . index2word = { 0 : \"SOS\" , 1 : \"EOS\" } # \u521d\u59cb\u5316\u8bcd\u6c47\u5bf9\u5e94\u7684\u81ea\u7136\u6570\u7d22\u5f15 \uff0c \u8fd9\u91cc\u4ece2\u5f00\u59cb \uff0c \u56e0\u4e3a0 \uff0c 1 \u5df2\u7ecf\u88ab\u5f00\u59cb\u548c\u7ed3\u675f\u6807\u5fd7\u5360\u7528\u4e86 self . n_words = 2 def addSentence ( self , sentence ) : \"\"\"\u6dfb\u52a0\u53e5\u5b50\u51fd\u6570, \u5373\u5c06\u53e5\u5b50\u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684\u6570\u503c\u5e8f\u5217, \u8f93\u5165\u53c2\u6570sentence\u662f\u4e00\u6761\u53e5\u5b50\"\"\" # \u6839\u636e\u4e00\u822c\u56fd\u5bb6\u7684\u8bed\u8a00\u7279\u6027 ( \u6211\u4eec\u8fd9\u91cc\u7814\u7a76\u7684\u8bed\u8a00\u90fd\u662f\u4ee5\u7a7a\u683c\u5206\u4e2a\u5355\u8bcd ) # \u5bf9\u53e5\u5b50\u8fdb\u884c\u5206\u5272 \uff0c \u5f97\u5230\u5bf9\u5e94\u7684\u8bcd\u6c47\u5217\u8868 for word in sentence . split ( ' ' ) : # \u7136\u540e\u8c03\u7528addWord\u8fdb\u884c\u5904\u7406 self . addWord ( word ) def addWord ( self , word ) : \"\"\"\u6dfb\u52a0\u8bcd\u6c47\u51fd\u6570, \u5373\u5c06\u8bcd\u6c47\u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684\u6570\u503c, \u8f93\u5165\u53c2\u6570word\u662f\u4e00\u4e2a\u5355\u8bcd\"\"\" # \u9996\u5148\u5224\u65adword\u662f\u5426\u5df2\u7ecf\u5728self . word2index\u5b57\u5178\u7684key\u4e2d if word not in self . word2index : # \u5982\u679c\u4e0d\u5728 , \u5219\u5c06\u8fd9\u4e2a\u8bcd\u52a0\u5165\u5176\u4e2d , \u5e76\u4e3a\u5b83\u5bf9\u5e94\u4e00\u4e2a\u6570\u503c \uff0c \u5373self . n_words self . word2index [ word ] = self . n_words # \u540c\u65f6\u4e5f\u5c06\u5b83\u7684\u53cd\u8f6c\u5f62\u5f0f\u52a0\u5165\u5230self . index2word\u4e2d self . index2word [ self.n_words ] = word # self . n_words\u4e00\u65e6\u88ab\u5360\u7528\u4e4b\u540e \uff0c \u9010\u6b21\u52a01 , \u53d8\u6210\u65b0\u7684self . n_words self . n_words += 1 \u5b9e\u4f8b\u5316\u53c2\u6570: name = \"eng\" \u8f93\u5165\u53c2\u6570: sentence = \"hello I am Jay\" \u8c03\u7528: engl = Lang(name) engl.addSentence(sentence) print(\"word2index:\", engl.word2index) print(\"index2word:\", engl.index2word) print(\"n_words:\", engl.n_words) \u8f93\u51fa\u6548\u679c: word2index: {'hello': 2, 'I': 3, 'am': 4, 'Jay': 5} index2word: {0: 'SOS', 1: 'EOS', 2: 'hello', 3: 'I', 4: 'am', 5: 'Jay'} n_words: 6 \u5b57\u7b26\u89c4\u8303\u5316: # \u5c06 unicode \u8f6c\u4e3a Ascii , \u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u662f\u53bb\u6389\u4e00\u4e9b\u8bed\u8a00\u4e2d\u7684\u91cd\u97f3\u6807\u8bb0\uff1a\u015a lus \u00e0 rski def unicodeToAscii ( s ) : return '' . join ( c for c in unicodedata . normalize ( ' NFD ' , s ) if unicodedata . category ( c ) != ' Mn ' ) def normalizeString ( s ) : \"\"\" \u5b57\u7b26\u4e32\u89c4\u8303\u5316\u51fd\u6570, \u53c2\u6570s\u4ee3\u8868\u4f20\u5165\u7684\u5b57\u7b26\u4e32 \"\"\" # \u4f7f\u5b57\u7b26\u53d8\u4e3a\u5c0f\u5199\u5e76\u53bb\u9664\u4e24\u4fa7\u7a7a\u767d\u7b26, z \u518d\u4f7f\u7528 unicodeToAscii \u53bb\u6389\u91cd\u97f3\u6807\u8bb0 s = unicodeToAscii ( s . lower () . strip ()) # \u5728. ! ?\u524d\u52a0\u4e00\u4e2a\u7a7a\u683c s = re . sub ( r \" ([.!?]) \" , r \" \\1 \" , s ) # \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5c06\u5b57\u7b26\u4e32\u4e2d\u4e0d\u662f\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u6b63\u5e38\u6807\u70b9\u7684\u90fd\u66ff\u6362\u6210\u7a7a\u683c s = re . sub ( r \" [^a-zA-Z.!?]+ \" , r \" \" , s ) return s \u8f93\u5165\u53c2\u6570: s = \"Are you kidding me?\" \u8c03\u7528: nsr = normalizeString(s) print(nsr) \u8f93\u51fa\u6548\u679c: are you kidding me ? \u5c06\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58, \u5e76\u5b9e\u4f8b\u5316\u7c7bLang data_path = '../Downloads/data/eng-fra.txt' def readLangs ( lang1 , lang2 ): \"\"\"\u8bfb\u53d6\u8bed\u8a00\u51fd\u6570, \u53c2\u6570lang1\u662f\u6e90\u8bed\u8a00\u7684\u540d\u5b57, \u53c2\u6570lang2\u662f\u76ee\u6807\u8bed\u8a00\u7684\u540d\u5b57 \u8fd4\u56de\u5bf9\u5e94\u7684class Lang\u5bf9\u8c61, \u4ee5\u53ca\u8bed\u8a00\u5bf9\u5217\u8868\"\"\" # \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u8bed\u8a00\u5bf9\u5e76\u4ee5/n\u5212\u5206\u5b58\u5230\u5217\u8868lines\u4e2d lines = open ( data_path , encoding = 'utf-8' ) . \\ read () . strip () . split ( ' \\n ' ) # \u5bf9lines\u5217\u8868\u4e2d\u7684\u53e5\u5b50\u8fdb\u884c\u6807\u51c6\u5316\u5904\u7406\uff0c\u5e76\u4ee5\\t\u8fdb\u884c\u518d\u6b21\u5212\u5206, \u5f62\u6210\u5b50\u5217\u8868, \u4e5f\u5c31\u662f\u8bed\u8a00\u5bf9 pairs = [[ normalizeString ( s ) for s in l . split ( ' \\t ' )] for l in lines ] # \u7136\u540e\u5206\u522b\u5c06\u8bed\u8a00\u540d\u5b57\u4f20\u5165Lang\u7c7b\u4e2d, \u83b7\u5f97\u5bf9\u5e94\u7684\u8bed\u8a00\u5bf9\u8c61, \u8fd4\u56de\u7ed3\u679c input_lang = Lang ( lang1 ) output_lang = Lang ( lang2 ) return input_lang , output_lang , pairs \u8f93\u5165\u53c2\u6570: lang1 = \"eng\" lang2 = \"fra\" \u8c03\u7528: input_lang, output_lang, pairs = readLangs(lang1, lang2) print(\"input_lang:\", input_lang) print(\"output_lang:\", output_lang) print(\"pairs\u4e2d\u7684\u524d\u4e94\u4e2a:\", pairs[:5]) \u8f93\u51fa\u6548\u679c: input_lang : < __main__ . Lang object at 0x11ecf0828 > output_lang : < __main__ . Lang object at 0x12d420d68 > pairs\u4e2d\u7684\u524d\u4e94\u4e2a : [ ['go .', 'va !' ] , [ 'run !', 'cours !' ] , [ 'run !', 'courez !' ] , [ 'wow !', 'ca alors !' ] , [ 'fire !', 'au feu !' ] ] \u8fc7\u6ee4\u51fa\u7b26\u5408\u6211\u4eec\u8981\u6c42\u7684\u8bed\u8a00\u5bf9: # \u8bbe\u7f6e\u7ec4\u6210\u53e5\u5b50\u4e2d\u5355\u8bcd\u6216\u6807\u70b9\u7684\u6700\u591a\u4e2a\u6570 MAX_LENGTH = 10 # \u9009\u62e9\u5e26\u6709\u6307\u5b9a\u524d\u7f00\u7684\u8bed\u8a00\u7279\u5f81\u6570\u636e\u4f5c\u4e3a\u8bad\u7ec3\u6570\u636e eng_prefixes = ( \" i am \" , \" i m \" , \" he is \" , \" he s \" , \" she is \" , \" she s \" , \" you are \" , \" you re \" , \" we are \" , \" we re \" , \" they are \" , \" they re \" ) def filterPair ( p ) : \"\"\" \u8bed\u8a00\u5bf9\u8fc7\u6ee4\u51fd\u6570, \u53c2\u6570p\u4ee3\u8868\u8f93\u5165\u7684\u8bed\u8a00\u5bf9, \u5982['she is afraid.', 'elle malade.'] \"\"\" # p [ 0 ]\u4ee3\u8868\u82f1\u8bed\u53e5\u5b50\uff0c\u5bf9\u5b83\u8fdb\u884c\u5212\u5206\uff0c\u5b83\u7684\u957f\u5ea6\u5e94\u5c0f\u4e8e\u6700\u5927\u957f\u5ea6 MAX_LENGTH \u5e76\u4e14\u8981\u4ee5\u6307\u5b9a\u7684\u524d\u7f00\u5f00\u5934 # p [ 1 ]\u4ee3\u8868\u6cd5\u6587\u53e5\u5b50, \u5bf9\u5b83\u8fdb\u884c\u5212\u5206\uff0c\u5b83\u7684\u957f\u5ea6\u5e94\u5c0f\u4e8e\u6700\u5927\u957f\u5ea6 MAX_LENGTH return len ( p [ 0 ]. split ( ' ' )) < MAX_LENGTH and \\ p [ 0 ]. startswith ( eng_prefixes ) and \\ len ( p [ 1 ]. split ( ' ' )) < MAX_LENGTH def filterPairs ( pairs ) : \"\"\" \u5bf9\u591a\u4e2a\u8bed\u8a00\u5bf9\u5217\u8868\u8fdb\u884c\u8fc7\u6ee4, \u53c2\u6570pairs\u4ee3\u8868\u8bed\u8a00\u5bf9\u7ec4\u6210\u7684\u5217\u8868, \u7b80\u79f0\u8bed\u8a00\u5bf9\u5217\u8868 \"\"\" # \u51fd\u6570\u4e2d\u76f4\u63a5\u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u8bed\u8a00\u5bf9\u5e76\u8c03\u7528 filterPair \u5373\u53ef return [ pair for pair in pairs if filterPair ( pair ) ] \u8f93\u5165\u53c2\u6570: # \u8f93\u5165\u53c2\u6570pairs\u4f7f\u7528readLangs\u51fd\u6570\u7684\u8f93\u51fa\u7ed3\u679cpairs \u8c03\u7528: fpairs = filterPairs(pairs) print(\"\u8fc7\u6ee4\u540e\u7684pairs\u524d\u4e94\u4e2a:\", fpairs[:5]) \u8f93\u51fa\u6548\u679c: \u8fc7\u6ee4\u540e\u7684pairs\u524d\u4e94\u4e2a: [['i m .', 'j ai ans .'], ['i m ok .', 'je vais bien .'], ['i m ok .', 'ca va .'], ['i m fat .', 'je suis gras .'], ['i m fat .', 'je suis gros .']] \u5bf9\u4ee5\u4e0a\u6570\u636e\u51c6\u5907\u51fd\u6570\u8fdb\u884c\u6574\u5408, \u5e76\u4f7f\u7528\u7c7bLang\u5bf9\u8bed\u8a00\u5bf9\u8fdb\u884c\u6570\u503c\u6620\u5c04: def prepareData ( lang1 , lang2 ) : \"\"\" \u6570\u636e\u51c6\u5907\u51fd\u6570, \u5b8c\u6210\u5c06\u6240\u6709\u5b57\u7b26\u4e32\u6570\u636e\u5411\u6570\u503c\u578b\u6570\u636e\u7684\u6620\u5c04\u4ee5\u53ca\u8fc7\u6ee4\u8bed\u8a00\u5bf9 \u53c2\u6570 lang1 , lang2 \u5206\u522b\u4ee3\u8868\u6e90\u8bed\u8a00\u548c\u76ee\u6807\u8bed\u8a00\u7684\u540d\u5b57 \"\"\" # \u9996\u5148\u901a\u8fc7 readLangs \u51fd\u6570\u83b7\u5f97 input_lang , output_lang \u5bf9\u8c61\uff0c\u4ee5\u53ca\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u8bed\u8a00\u5bf9\u5217\u8868 input_lang , output_lang , pairs = readLangs ( lang1 , lang2 ) # \u5bf9\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u8bed\u8a00\u5bf9\u5217\u8868\u8fdb\u884c\u8fc7\u6ee4\u64cd\u4f5c pairs = filterPairs ( pairs ) # \u5bf9\u8fc7\u6ee4\u540e\u7684\u8bed\u8a00\u5bf9\u5217\u8868\u8fdb\u884c\u904d\u5386 for pair in pairs : # \u5e76\u4f7f\u7528 input_lang \u548c output_lang \u7684 addSentence \u65b9\u6cd5\u5bf9\u5176\u8fdb\u884c\u6570\u503c\u6620\u5c04 input_lang . addSentence ( pair [ 0 ] ) output_lang . addSentence ( pair [ 1 ] ) # \u8fd4\u56de\u6570\u503c\u6620\u5c04\u540e\u7684\u5bf9\u8c61, \u548c\u8fc7\u6ee4\u540e\u8bed\u8a00\u5bf9 return input_lang , output_lang , pairs \u8c03\u7528: input_lang , output_lang , pairs = prepareData ( ' eng ' , ' fra ' ) print ( \" input_n_words: \" , input_lang . n_words ) print ( \" output_n_words: \" , output_lang . n_words ) print ( random . choice ( pairs )) \u8f93\u51fa\u6548\u679c: input_n_words : 2803 output_n_words : 4345 pairs\u968f\u673a\u9009\u62e9\u4e00\u6761 : [ 'you re such an idiot !' , 'quelle idiote tu es !' ] \u5c06\u8bed\u8a00\u5bf9\u8f6c\u5316\u4e3a\u6a21\u578b\u8f93\u5165\u9700\u8981\u7684\u5f20\u91cf: def tensorFromSentence ( lang , sentence ) : \"\"\"\u5c06\u6587\u672c\u53e5\u5b50\u8f6c\u6362\u4e3a\u5f20\u91cf, \u53c2\u6570lang\u4ee3\u8868\u4f20\u5165\u7684Lang\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61, sentence\u662f\u9884\u8f6c\u6362\u7684\u53e5\u5b50\"\"\" # \u5bf9\u53e5\u5b50\u8fdb\u884c\u5206\u5272\u5e76\u904d\u5386\u6bcf\u4e00\u4e2a\u8bcd\u6c47 , \u7136\u540e\u4f7f\u7528lang\u7684word2index\u65b9\u6cd5\u627e\u5230\u5b83\u5bf9\u5e94\u7684\u7d22\u5f15 # \u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u8be5\u53e5\u5b50\u5bf9\u5e94\u7684\u6570\u503c\u5217\u8868 indexes = [ lang.word2index[word ] for word in sentence . split ( ' ' ) ] # \u7136\u540e\u52a0\u5165\u53e5\u5b50\u7ed3\u675f\u6807\u5fd7 indexes . append ( EOS_token ) # \u5c06\u5176\u4f7f\u7528torch . tensor\u5c01\u88c5\u6210\u5f20\u91cf , \u5e76\u6539\u53d8\u5b83\u7684\u5f62\u72b6\u4e3anx1 , \u4ee5\u65b9\u4fbf\u540e\u7eed\u8ba1\u7b97 return torch . tensor ( indexes , dtype = torch . long , device = device ). view ( - 1 , 1 ) def tensorsFromPair ( pair ) : \"\"\"\u5c06\u8bed\u8a00\u5bf9\u8f6c\u6362\u4e3a\u5f20\u91cf\u5bf9, \u53c2\u6570pair\u4e3a\u4e00\u4e2a\u8bed\u8a00\u5bf9\"\"\" # \u8c03\u7528tensorFromSentence\u5206\u522b\u5c06\u6e90\u8bed\u8a00\u548c\u76ee\u6807\u8bed\u8a00\u5206\u522b\u5904\u7406 \uff0c \u83b7\u5f97\u5bf9\u5e94\u7684\u5f20\u91cf\u8868\u793a input_tensor = tensorFromSentence ( input_lang , pair [ 0 ] ) target_tensor = tensorFromSentence ( output_lang , pair [ 1 ] ) # \u6700\u540e\u8fd4\u56de\u5b83\u4eec\u7ec4\u6210\u7684\u5143\u7ec4 return ( input_tensor , target_tensor ) \u8f93\u5165\u53c2\u6570: # \u53d6pairs\u7684\u7b2c\u4e00\u6761 pair = pairs[0] \u8c03\u7528: pair_tensor = tensorsFromPair(pair) print(pair_tensor) \u8f93\u51fa\u6548\u679c: (tensor([[2], [3], [4], [1]]), tensor([[2], [3], [4], [5], [1]])) \u7b2c\u4e09\u6b65: \u6784\u5efa\u57fa\u4e8eGRU\u7684\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668 \u6784\u5efa\u57fa\u4e8eGRU\u7684\u7f16\u7801\u5668 \u7f16\u7801\u5668\u7ed3\u6784\u56fe: class EncoderRNN ( nn . Module ): def __init__ ( self , input_size , hidden_size ): \"\"\"\u5b83\u7684\u521d\u59cb\u5316\u53c2\u6570\u6709\u4e24\u4e2a, input_size\u4ee3\u8868\u89e3\u7801\u5668\u7684\u8f93\u5165\u5c3a\u5bf8\u5373\u6e90\u8bed\u8a00\u7684 \u8bcd\u8868\u5927\u5c0f\uff0chidden_size\u4ee3\u8868GRU\u7684\u9690\u5c42\u8282\u70b9\u6570, \u4e5f\u4ee3\u8868\u8bcd\u5d4c\u5165\u7ef4\u5ea6, \u540c\u65f6\u53c8\u662fGRU\u7684\u8f93\u5165\u5c3a\u5bf8\"\"\" super ( EncoderRNN , self ). __init__ () # \u5c06\u53c2\u6570hidden_size\u4f20\u5165\u7c7b\u4e2d self . hidden_size = hidden_size # \u5b9e\u4f8b\u5316nn\u4e2d\u9884\u5b9a\u4e49\u7684Embedding\u5c42, \u5b83\u7684\u53c2\u6570\u5206\u522b\u662finput_size, hidden_size # \u8fd9\u91cc\u7684\u8bcd\u5d4c\u5165\u7ef4\u5ea6\u5373hidden_size # nn.Embedding\u7684\u6f14\u793a\u5728\u8be5\u4ee3\u7801\u4e0b\u65b9 self . embedding = nn . Embedding ( input_size , hidden_size ) # \u7136\u540e\u5b9e\u4f8b\u5316nn\u4e2d\u9884\u5b9a\u4e49\u7684GRU\u5c42, \u5b83\u7684\u53c2\u6570\u662fhidden_size # nn.GRU\u7684\u6f14\u793a\u5728\u8be5\u4ee3\u7801\u4e0b\u65b9 self . gru = nn . GRU ( hidden_size , hidden_size ) def forward ( self , input , hidden ): \"\"\"\u7f16\u7801\u5668\u524d\u5411\u903b\u8f91\u51fd\u6570\u4e2d\u53c2\u6570\u6709\u4e24\u4e2a, input\u4ee3\u8868\u6e90\u8bed\u8a00\u7684Embedding\u5c42\u8f93\u5165\u5f20\u91cf hidden\u4ee3\u8868\u7f16\u7801\u5668\u5c42gru\u7684\u521d\u59cb\u9690\u5c42\u5f20\u91cf\"\"\" # \u5c06\u8f93\u5165\u5f20\u91cf\u8fdb\u884cembedding\u64cd\u4f5c, \u5e76\u4f7f\u5176\u5f62\u72b6\u53d8\u4e3a(1,1,-1),-1\u4ee3\u8868\u81ea\u52a8\u8ba1\u7b97\u7ef4\u5ea6 # \u7406\u8bba\u4e0a\uff0c\u6211\u4eec\u7684\u7f16\u7801\u5668\u6bcf\u6b21\u53ea\u4ee5\u4e00\u4e2a\u8bcd\u4f5c\u4e3a\u8f93\u5165, \u56e0\u6b64\u8bcd\u6c47\u6620\u5c04\u540e\u7684\u5c3a\u5bf8\u5e94\u8be5\u662f[1, embedding] # \u800c\u8fd9\u91cc\u8f6c\u6362\u6210\u4e09\u7ef4\u7684\u539f\u56e0\u662f\u56e0\u4e3atorch\u4e2d\u9884\u5b9a\u4e49gru\u5fc5\u987b\u4f7f\u7528\u4e09\u7ef4\u5f20\u91cf\u4f5c\u4e3a\u8f93\u5165, \u56e0\u6b64\u6211\u4eec\u62d3\u5c55\u4e86\u4e00\u4e2a\u7ef4\u5ea6 output = self . embedding ( input ). view ( 1 , 1 , - 1 ) # \u7136\u540e\u5c06embedding\u5c42\u7684\u8f93\u51fa\u548c\u4f20\u5165\u7684\u521d\u59cbhidden\u4f5c\u4e3agru\u7684\u8f93\u5165\u4f20\u5165\u5176\u4e2d, # \u83b7\u5f97\u6700\u7ec8gru\u7684\u8f93\u51faoutput\u548c\u5bf9\u5e94\u7684\u9690\u5c42\u5f20\u91cfhidden\uff0c \u5e76\u8fd4\u56de\u7ed3\u679c output , hidden = self . gru ( output , hidden ) return output , hidden def initHidden ( self ): \"\"\"\u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf\u51fd\u6570\"\"\" # \u5c06\u9690\u5c42\u5f20\u91cf\u521d\u59cb\u5316\u6210\u4e3a1x1xself.hidden_size\u5927\u5c0f\u76840\u5f20\u91cf return torch . zeros ( 1 , 1 , self . hidden_size , device = device ) \u5b9e\u4f8b\u5316\u53c2\u6570: hidden_size = 25 input_size = 20 \u8f93\u5165\u53c2\u6570: # pair_tensor[0]\u4ee3\u8868\u6e90\u8bed\u8a00\u5373\u82f1\u6587\u7684\u53e5\u5b50\uff0cpair_tensor[0][0]\u4ee3\u8868\u53e5\u5b50\u4e2d \u7684\u7b2c\u4e00\u4e2a\u8bcd input = pair_tensor[0][0] # \u521d\u59cb\u5316\u7b2c\u4e00\u4e2a\u9690\u5c42\u5f20\u91cf\uff0c1x1xhidden_size\u76840\u5f20\u91cf hidden = torch.zeros(1, 1, hidden_size) \u8c03\u7528: encoder = EncoderRNN(input_size, hidden_size) encoder_output, hidden = encoder(input, hidden) print(encoder_output) \u8f93\u51fa\u6548\u679c: tensor([[[ 1.9149e-01, -2.0070e-01, -8.3882e-02, -3.3037e-02, -1.3491e-01, -8.8831e-02, -1.6626e-01, -1.9346e-01, -4.3996e-01, 1.8020e-02, 2.8854e-02, 2.2310e-01, 3.5153e-01, 2.9635e-01, 1.5030e-01, -8.5266e-02, -1.4909e-01, 2.4336e-04, -2.3522e-01, 1.1359e-01, 1.6439e-01, 1.4872e-01, -6.1619e-02, -1.0807e-02, 1.1216e-02]]], grad_fn=<StackBackward>) \u6784\u5efa\u57fa\u4e8eGRU\u7684\u89e3\u7801\u5668 \u89e3\u7801\u5668\u7ed3\u6784\u56fe: class DecoderRNN ( nn . Module ): def __init__ ( self , hidden_size , output_size ): \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u6709\u4e24\u4e2a\u53c2\u6570\uff0chidden_size\u4ee3\u8868\u89e3\u7801\u5668\u4e2dGRU\u7684\u8f93\u5165\u5c3a\u5bf8\uff0c\u4e5f\u662f\u5b83\u7684\u9690\u5c42\u8282\u70b9\u6570 output_size\u4ee3\u8868\u6574\u4e2a\u89e3\u7801\u5668\u7684\u8f93\u51fa\u5c3a\u5bf8, \u4e5f\u662f\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u6307\u5b9a\u5c3a\u5bf8\u5373\u76ee\u6807\u8bed\u8a00\u7684\u8bcd\u8868\u5927\u5c0f\"\"\" super ( DecoderRNN , self ). __init__ () # \u5c06hidden_size\u4f20\u5165\u5230\u7c7b\u4e2d self . hidden_size = hidden_size # \u5b9e\u4f8b\u5316\u4e00\u4e2ann\u4e2d\u7684Embedding\u5c42\u5bf9\u8c61, \u5b83\u7684\u53c2\u6570output\u8fd9\u91cc\u8868\u793a\u76ee\u6807\u8bed\u8a00\u7684\u8bcd\u8868\u5927\u5c0f # hidden_size\u8868\u793a\u76ee\u6807\u8bed\u8a00\u7684\u8bcd\u5d4c\u5165\u7ef4\u5ea6 self . embedding = nn . Embedding ( output_size , hidden_size ) # \u5b9e\u4f8b\u5316GRU\u5bf9\u8c61\uff0c\u8f93\u5165\u53c2\u6570\u90fd\u662fhidden_size\uff0c\u4ee3\u8868\u5b83\u7684\u8f93\u5165\u5c3a\u5bf8\u548c\u9690\u5c42\u8282\u70b9\u6570\u76f8\u540c self . gru = nn . GRU ( hidden_size , hidden_size ) # \u5b9e\u4f8b\u5316\u7ebf\u6027\u5c42, \u5bf9GRU\u7684\u8f93\u51fa\u505a\u7ebf\u6027\u53d8\u5316, \u83b7\u6211\u4eec\u5e0c\u671b\u7684\u8f93\u51fa\u5c3a\u5bf8output_size # \u56e0\u6b64\u5b83\u7684\u4e24\u4e2a\u53c2\u6570\u5206\u522b\u662fhidden_size, output_size self . out = nn . Linear ( hidden_size , output_size ) # \u6700\u540e\u4f7f\u7528softmax\u8fdb\u884c\u5904\u7406\uff0c\u4ee5\u4fbf\u4e8e\u5206\u7c7b self . softmax = nn . LogSoftmax ( dim = 1 ) def forward ( self , input , hidden ): \"\"\"\u89e3\u7801\u5668\u7684\u524d\u5411\u903b\u8f91\u51fd\u6570\u4e2d, \u53c2\u6570\u6709\u4e24\u4e2a, input\u4ee3\u8868\u76ee\u6807\u8bed\u8a00\u7684Embedding\u5c42\u8f93\u5165\u5f20\u91cf hidden\u4ee3\u8868\u89e3\u7801\u5668GRU\u7684\u521d\u59cb\u9690\u5c42\u5f20\u91cf\"\"\" # \u5c06\u8f93\u5165\u5f20\u91cf\u8fdb\u884cembedding\u64cd\u4f5c, \u5e76\u4f7f\u5176\u5f62\u72b6\u53d8\u4e3a(1,1,-1),-1\u4ee3\u8868\u81ea\u52a8\u8ba1\u7b97\u7ef4\u5ea6 # \u539f\u56e0\u548c\u89e3\u7801\u5668\u76f8\u540c\uff0c\u56e0\u4e3atorch\u9884\u5b9a\u4e49\u7684GRU\u5c42\u53ea\u63a5\u53d7\u4e09\u7ef4\u5f20\u91cf\u4f5c\u4e3a\u8f93\u5165 output = self . embedding ( input ). view ( 1 , 1 , - 1 ) # \u7136\u540e\u4f7f\u7528relu\u51fd\u6570\u5bf9\u8f93\u51fa\u8fdb\u884c\u5904\u7406\uff0c\u6839\u636erelu\u51fd\u6570\u7684\u7279\u6027, \u5c06\u4f7fEmbedding\u77e9\u9635\u66f4\u7a00\u758f\uff0c\u4ee5\u9632\u6b62\u8fc7\u62df\u5408 output = F . relu ( output ) # \u63a5\u4e0b\u6765, \u5c06\u628aembedding\u7684\u8f93\u51fa\u4ee5\u53ca\u521d\u59cb\u5316\u7684hidden\u5f20\u91cf\u4f20\u5165\u5230\u89e3\u7801\u5668gru\u4e2d output , hidden = self . gru ( output , hidden ) # \u56e0\u4e3aGRU\u8f93\u51fa\u7684output\u4e5f\u662f\u4e09\u7ef4\u5f20\u91cf\uff0c\u7b2c\u4e00\u7ef4\u6ca1\u6709\u610f\u4e49\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7output[0]\u6765\u964d\u7ef4 # \u518d\u4f20\u7ed9\u7ebf\u6027\u5c42\u505a\u53d8\u6362, \u6700\u540e\u7528softmax\u5904\u7406\u4ee5\u4fbf\u4e8e\u5206\u7c7b output = self . softmax ( self . out ( output [ 0 ])) return output , hidden def initHidden ( self ): \"\"\"\u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf\u51fd\u6570\"\"\" # \u5c06\u9690\u5c42\u5f20\u91cf\u521d\u59cb\u5316\u6210\u4e3a1x1xself.hidden_size\u5927\u5c0f\u76840\u5f20\u91cf return torch . zeros ( 1 , 1 , self . hidden_size , device = device ) \u5b9e\u4f8b\u5316\u53c2\u6570: hidden_size = 25 output_size = 10 \u8f93\u5165\u53c2\u6570: # pair_tensor[1]\u4ee3\u8868\u76ee\u6807\u8bed\u8a00\u5373\u6cd5\u6587\u7684\u53e5\u5b50\uff0cpair_tensor[1][0]\u4ee3\u8868\u53e5\u5b50\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8bcd input = pair_tensor[1][0] # \u521d\u59cb\u5316\u7b2c\u4e00\u4e2a\u9690\u5c42\u5f20\u91cf\uff0c1x1xhidden_size\u76840\u5f20\u91cf hidden = torch.zeros(1, 1, hidden_size) \u8c03\u7528: decoder = DecoderRNN(hidden_size, output_size) output, hidden = decoder(input, hidden) print(output) \u8f93\u51fa\u6548\u679c: tensor([[-2.3554, -2.3551, -2.4361, -2.2158, -2.2550, -2.6237, -2.2917, -2.2663, -2.2409, -2.0783]], grad_fn=<LogSoftmaxBackward>) \u6784\u5efa\u57fa\u4e8eGRU\u548cAttention\u7684\u89e3\u7801\u5668 \u89e3\u7801\u5668\u7ed3\u6784\u56fe: class AttnDecoderRNN ( nn . Module ): def __init__ ( self , hidden_size , output_size , dropout_p = 0.1 , max_length = MAX_LENGTH ): \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u67094\u4e2a, hidden_size\u4ee3\u8868\u89e3\u7801\u5668\u4e2dGRU\u7684\u8f93\u5165\u5c3a\u5bf8\uff0c\u4e5f\u662f\u5b83\u7684\u9690\u5c42\u8282\u70b9\u6570 output_size\u4ee3\u8868\u6574\u4e2a\u89e3\u7801\u5668\u7684\u8f93\u51fa\u5c3a\u5bf8, \u4e5f\u662f\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u6307\u5b9a\u5c3a\u5bf8\u5373\u76ee\u6807\u8bed\u8a00\u7684\u8bcd\u8868\u5927\u5c0f dropout_p\u4ee3\u8868\u6211\u4eec\u4f7f\u7528dropout\u5c42\u65f6\u7684\u7f6e\u96f6\u6bd4\u7387\uff0c\u9ed8\u8ba40.1, max_length\u4ee3\u8868\u53e5\u5b50\u7684\u6700\u5927\u957f\u5ea6\"\"\" super ( AttnDecoderRNN , self ). __init__ () # \u5c06\u4ee5\u4e0b\u53c2\u6570\u4f20\u5165\u7c7b\u4e2d self . hidden_size = hidden_size self . output_size = output_size self . dropout_p = dropout_p self . max_length = max_length # \u5b9e\u4f8b\u5316\u4e00\u4e2aEmbedding\u5c42, \u8f93\u5165\u53c2\u6570\u662fself.output_size\u548cself.hidden_size self . embedding = nn . Embedding ( self . output_size , self . hidden_size ) # \u6839\u636eattention\u7684QKV\u7406\u8bba\uff0cattention\u7684\u8f93\u5165\u53c2\u6570\u4e3a\u4e09\u4e2aQ\uff0cK\uff0cV\uff0c # \u7b2c\u4e00\u6b65\uff0c\u4f7f\u7528Q\u4e0eK\u8fdb\u884cattention\u6743\u503c\u8ba1\u7b97\u5f97\u5230\u6743\u91cd\u77e9\u9635, \u518d\u4e0eV\u505a\u77e9\u9635\u4e58\u6cd5, \u5f97\u5230V\u7684\u6ce8\u610f\u529b\u8868\u793a\u7ed3\u679c. # \u8fd9\u91cc\u5e38\u89c1\u7684\u8ba1\u7b97\u65b9\u5f0f\u6709\u4e09\u79cd: # 1\uff0c\u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5 # 2\uff0c\u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316\u540e\u518d\u4f7f\u7528tanh\u51fd\u6570\u6fc0\u6d3b, \u7136\u540e\u518d\u8fdb\u884c\u5185\u90e8\u6c42\u548c, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u518d\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5 # 3\uff0c\u5c06Q\u4e0eK\u7684\u8f6c\u7f6e\u505a\u70b9\u79ef\u8fd0\u7b97, \u7136\u540e\u9664\u4ee5\u4e00\u4e2a\u7f29\u653e\u7cfb\u6570, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5 # \u8bf4\u660e\uff1a\u5f53\u6ce8\u610f\u529b\u6743\u91cd\u77e9\u9635\u548cV\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\u4e14\u7b2c\u4e00\u7ef4\u4ee3\u8868\u4e3abatch\u6761\u6570\u65f6, \u5219\u505abmm\u8fd0\u7b97. # \u7b2c\u4e8c\u6b65, \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, \u5982\u679c\u662f\u62fc\u63a5\u65b9\u6cd5\uff0c\u5219\u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e8c\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5, # \u5982\u679c\u662f\u8f6c\u7f6e\u70b9\u79ef, \u4e00\u822c\u662f\u81ea\u6ce8\u610f\u529b, Q\u4e0eV\u76f8\u540c, \u5219\u4e0d\u9700\u8981\u8fdb\u884c\u4e0eQ\u7684\u62fc\u63a5.\u56e0\u6b64\u7b2c\u4e8c\u6b65\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e0e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u5168\u503c\u8ba1\u7b97\u65b9\u6cd5\u6709\u5173. # \u7b2c\u4e09\u6b65\uff0c\u6700\u540e\u4e3a\u4e86\u4f7f\u6574\u4e2aattention\u7ed3\u6784\u6309\u7167\u6307\u5b9a\u5c3a\u5bf8\u8f93\u51fa, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e8c\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362. \u5f97\u5230\u6700\u7ec8\u5bf9Q\u7684\u6ce8\u610f\u529b\u8868\u793a. # \u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u7b2c\u4e00\u6b65\u4e2d\u7684\u7b2c\u4e00\u79cd\u8ba1\u7b97\u65b9\u5f0f, \u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\u7684\u77e9\u9635, \u5b9e\u4f8b\u5316nn.Linear # \u56e0\u4e3a\u5b83\u7684\u8f93\u5165\u662fQ\uff0cK\u7684\u62fc\u63a5, \u6240\u4ee5\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fself.hidden_size * 2\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662fself.max_length # \u8fd9\u91cc\u7684Q\u662f\u89e3\u7801\u5668\u7684Embedding\u5c42\u7684\u8f93\u51fa, K\u662f\u89e3\u7801\u5668GRU\u7684\u9690\u5c42\u8f93\u51fa\uff0c\u56e0\u4e3a\u9996\u6b21\u9690\u5c42\u8fd8\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\uff0c\u4f1a\u4f7f\u7528\u7f16\u7801\u5668\u7684\u9690\u5c42\u8f93\u51fa # \u800c\u8fd9\u91cc\u7684V\u662f\u7f16\u7801\u5668\u5c42\u7684\u8f93\u51fa self . attn = nn . Linear ( self . hidden_size * 2 , self . max_length ) # \u63a5\u7740\u6211\u4eec\u5b9e\u4f8b\u5316\u53e6\u5916\u4e00\u4e2a\u7ebf\u6027\u5c42, \u5b83\u662fattention\u7406\u8bba\u4e2d\u7684\u7b2c\u56db\u6b65\u7684\u7ebf\u6027\u5c42\uff0c\u7528\u4e8e\u89c4\u8303\u8f93\u51fa\u5c3a\u5bf8 # \u8fd9\u91cc\u5b83\u7684\u8f93\u5165\u6765\u81ea\u7b2c\u4e09\u6b65\u7684\u7ed3\u679c, \u56e0\u4e3a\u7b2c\u4e09\u6b65\u7684\u7ed3\u679c\u662f\u5c06Q\u4e0e\u7b2c\u4e8c\u6b65\u7684\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5, \u56e0\u6b64\u8f93\u5165\u7ef4\u5ea6\u662fself.hidden_size * 2 self . attn_combine = nn . Linear ( self . hidden_size * 2 , self . hidden_size ) # \u63a5\u7740\u5b9e\u4f8b\u5316\u4e00\u4e2ann.Dropout\u5c42\uff0c\u5e76\u4f20\u5165self.dropout_p self . dropout = nn . Dropout ( self . dropout_p ) # \u4e4b\u540e\u5b9e\u4f8b\u5316nn.GRU, \u5b83\u7684\u8f93\u5165\u548c\u9690\u5c42\u5c3a\u5bf8\u90fd\u662fself.hidden_size self . gru = nn . GRU ( self . hidden_size , self . hidden_size ) # \u6700\u540e\u5b9e\u4f8b\u5316gru\u540e\u9762\u7684\u7ebf\u6027\u5c42\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u89e3\u7801\u5668\u8f93\u51fa\u5c42. self . out = nn . Linear ( self . hidden_size , self . output_size ) def forward ( self , input , hidden , encoder_outputs ): \"\"\"forward\u51fd\u6570\u7684\u8f93\u5165\u53c2\u6570\u6709\u4e09\u4e2a, \u5206\u522b\u662f\u6e90\u6570\u636e\u8f93\u5165\u5f20\u91cf, \u521d\u59cb\u7684\u9690\u5c42\u5f20\u91cf, \u4ee5\u53ca\u89e3\u7801\u5668\u7684\u8f93\u51fa\u5f20\u91cf\"\"\" # \u6839\u636e\u7ed3\u6784\u8ba1\u7b97\u56fe, \u8f93\u5165\u5f20\u91cf\u8fdb\u884cEmbedding\u5c42\u5e76\u6269\u5c55\u7ef4\u5ea6 embedded = self . embedding ( input ). view ( 1 , 1 , - 1 ) # \u4f7f\u7528dropout\u8fdb\u884c\u968f\u673a\u4e22\u5f03\uff0c\u9632\u6b62\u8fc7\u62df\u5408 embedded = self . dropout ( embedded ) # \u8fdb\u884cattention\u7684\u6743\u91cd\u8ba1\u7b97, \u54e6\u6211\u4eec\u5462\u4f7f\u7528\u7b2c\u4e00\u79cd\u8ba1\u7b97\u65b9\u5f0f\uff1a # \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c attn_weights = F . softmax ( self . attn ( torch . cat (( embedded [ 0 ], hidden [ 0 ]), 1 )), dim = 1 ) # \u7136\u540e\u8fdb\u884c\u7b2c\u4e00\u6b65\u7684\u540e\u534a\u90e8\u5206, \u5c06\u5f97\u5230\u7684\u6743\u91cd\u77e9\u9635\u4e0eV\u505a\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97, \u5f53\u4e8c\u8005\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\u4e14\u7b2c\u4e00\u7ef4\u4ee3\u8868\u4e3abatch\u6761\u6570\u65f6, \u5219\u505abmm\u8fd0\u7b97 attn_applied = torch . bmm ( attn_weights . unsqueeze ( 0 ), encoder_outputs . unsqueeze ( 0 )) # \u4e4b\u540e\u8fdb\u884c\u7b2c\u4e8c\u6b65, \u901a\u8fc7\u53d6[0]\u662f\u7528\u6765\u964d\u7ef4, \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, \u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e00\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5 output = torch . cat (( embedded [ 0 ], attn_applied [ 0 ]), 1 ) # \u6700\u540e\u662f\u7b2c\u4e09\u6b65, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e09\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\u5e76\u6269\u5c55\u7ef4\u5ea6\uff0c\u5f97\u5230\u8f93\u51fa output = self . attn_combine ( output ). unsqueeze ( 0 ) # attention\u7ed3\u6784\u7684\u7ed3\u679c\u4f7f\u7528relu\u6fc0\u6d3b output = F . relu ( output ) # \u5c06\u6fc0\u6d3b\u540e\u7684\u7ed3\u679c\u4f5c\u4e3agru\u7684\u8f93\u5165\u548chidden\u4e00\u8d77\u4f20\u5165\u5176\u4e2d output , hidden = self . gru ( output , hidden ) # \u6700\u540e\u5c06\u7ed3\u679c\u964d\u7ef4\u5e76\u4f7f\u7528softmax\u5904\u7406\u5f97\u5230\u6700\u7ec8\u7684\u7ed3\u679c output = F . log_softmax ( self . out ( output [ 0 ]), dim = 1 ) # \u8fd4\u56de\u89e3\u7801\u5668\u7ed3\u679c\uff0c\u6700\u540e\u7684\u9690\u5c42\u5f20\u91cf\u4ee5\u53ca\u6ce8\u610f\u529b\u6743\u91cd\u5f20\u91cf return output , hidden , attn_weights def initHidden ( self ): \"\"\"\u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf\u51fd\u6570\"\"\" # \u5c06\u9690\u5c42\u5f20\u91cf\u521d\u59cb\u5316\u6210\u4e3a1x1xself.hidden_size\u5927\u5c0f\u76840\u5f20\u91cf return torch . zeros ( 1 , 1 , self . hidden_size , device = device ) \u5b9e\u4f8b\u5316\u53c2\u6570: hidden_size = 25 output_size = 10 \u8f93\u5165\u53c2\u6570: input = pair_tensor[1][0] hidden = torch.zeros(1, 1, hidden_size) # encoder_outputs\u9700\u8981\u662fencoder\u4e2d\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u5806\u53e0\u800c\u6210 # \u5b83\u7684\u5f62\u72b6\u5e94\u8be5\u662f10x25, \u6211\u4eec\u8fd9\u91cc\u76f4\u63a5\u968f\u673a\u521d\u59cb\u5316\u4e00\u4e2a\u5f20\u91cf encoder_outputs = torch.randn(10, 25) \u8c03\u7528: decoder = AttnDecoderRNN(hidden_size, output_size) output, hidden, attn_weights= decoder(input, hidden, encoder_outputs) print(output) \u8f93\u51fa\u6548\u679c: tensor([[-2.3556, -2.1418, -2.2012, -2.5109, -2.4025, -2.2182, -2.2123, -2.4608, -2.2124, -2.3827]], grad_fn=<LogSoftmaxBackward>) \u7b2c\u56db\u6b65: \u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570, \u5e76\u8fdb\u884c\u8bad\u7ec3 \u4ec0\u4e48\u662fteacher_forcing? \u5b83\u662f\u4e00\u79cd\u7528\u4e8e\u5e8f\u5217\u751f\u6210\u4efb\u52a1\u7684\u8bad\u7ec3\u6280\u5de7, \u5728seq2seq\u67b6\u6784\u4e2d, \u6839\u636e\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\u7406\u8bba\uff0c\u89e3\u7801\u5668\u6bcf\u6b21\u5e94\u8be5\u4f7f\u7528\u4e0a\u4e00\u6b65\u7684\u7ed3\u679c\u4f5c\u4e3a\u8f93\u5165\u7684\u4e00\u90e8\u5206, \u4f46\u662f\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u65e6\u4e0a\u4e00\u6b65\u7684\u7ed3\u679c\u662f\u9519\u8bef\u7684\uff0c\u5c31\u4f1a\u5bfc\u81f4\u8fd9\u79cd\u9519\u8bef\u88ab\u7d2f\u79ef\uff0c\u65e0\u6cd5\u8fbe\u5230\u8bad\u7ec3\u6548\u679c, \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u673a\u5236\u6539\u53d8\u4e0a\u4e00\u6b65\u51fa\u9519\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u8bad\u7ec3\u65f6\u6211\u4eec\u662f\u5df2\u77e5\u6b63\u786e\u7684\u8f93\u51fa\u5e94\u8be5\u662f\u4ec0\u4e48\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f3a\u5236\u5c06\u4e0a\u4e00\u6b65\u7ed3\u679c\u8bbe\u7f6e\u6210\u6b63\u786e\u7684\u8f93\u51fa, \u8fd9\u79cd\u65b9\u5f0f\u5c31\u53eb\u505ateacher_forcing. teacher_forcing\u7684\u4f5c\u7528: \u80fd\u591f\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u77eb\u6b63\u6a21\u578b\u7684\u9884\u6d4b\uff0c\u907f\u514d\u5728\u5e8f\u5217\u751f\u6210\u7684\u8fc7\u7a0b\u4e2d\u8bef\u5dee\u8fdb\u4e00\u6b65\u653e\u5927. teacher_forcing\u80fd\u591f\u6781\u5927\u7684\u52a0\u5feb\u6a21\u578b\u7684\u6536\u655b\u901f\u5ea6\uff0c\u4ee4\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u66f4\u5feb\u66f4\u5e73\u7a33. \u6784\u5efa\u8bad\u7ec3\u51fd\u6570: # \u8bbe\u7f6eteacher_forcing\u6bd4\u7387\u4e3a0 .5 teacher_forcing_ratio = 0.5 def train ( input_tensor , target_tensor , encoder , decoder , encoder_optimizer , decoder_optimizer , criterion , max_length = MAX_LENGTH ) : \"\"\"\u8bad\u7ec3\u51fd\u6570, \u8f93\u5165\u53c2\u6570\u67098\u4e2a, \u5206\u522b\u4ee3\u8868input_tensor\uff1a\u6e90\u8bed\u8a00\u8f93\u5165\u5f20\u91cf\uff0ctarget_tensor\uff1a\u76ee\u6807\u8bed\u8a00\u8f93\u5165\u5f20\u91cf\uff0cencoder, decoder\uff1a\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5b9e\u4f8b\u5316\u5bf9\u8c61 encoder_optimizer, decoder_optimizer\uff1a\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u4f18\u5316\u65b9\u6cd5\uff0ccriterion\uff1a\u635f\u5931\u51fd\u6570\u8ba1\u7b97\u65b9\u6cd5\uff0cmax_length\uff1a\u53e5\u5b50\u7684\u6700\u5927\u957f\u5ea6\"\"\" # \u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf encoder_hidden = encoder . initHidden () # \u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u4f18\u5316\u5668\u68af\u5ea6\u5f520 encoder_optimizer . zero_grad () decoder_optimizer . zero_grad () # \u6839\u636e\u6e90\u6587\u672c\u548c\u76ee\u6807\u6587\u672c\u5f20\u91cf\u83b7\u5f97\u5bf9\u5e94\u7684\u957f\u5ea6 input_length = input_tensor . size ( 0 ) target_length = target_tensor . size ( 0 ) # \u521d\u59cb\u5316\u7f16\u7801\u5668\u8f93\u51fa\u5f20\u91cf \uff0c \u5f62\u72b6\u662fmax_lengthxencoder . hidden_size\u76840\u5f20\u91cf encoder_outputs = torch . zeros ( max_length , encoder . hidden_size , device = device ) # \u521d\u59cb\u8bbe\u7f6e\u635f\u5931\u4e3a0 loss = 0 # \u5faa\u73af\u904d\u5386\u8f93\u5165\u5f20\u91cf\u7d22\u5f15 for ei in range ( input_length ) : # \u6839\u636e\u7d22\u5f15\u4eceinput_tensor\u53d6\u51fa\u5bf9\u5e94\u7684\u5355\u8bcd\u7684\u5f20\u91cf\u8868\u793a \uff0c \u548c\u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf\u4e00\u540c\u4f20\u5165encoder\u5bf9\u8c61\u4e2d encoder_output , encoder_hidden = encoder ( input_tensor [ ei ] , encoder_hidden ) # \u5c06\u6bcf\u6b21\u83b7\u5f97\u7684\u8f93\u51faencoder_output ( \u4e09\u7ef4\u5f20\u91cf ), \u4f7f\u7528 [ 0, 0 ] \u964d\u4e24\u7ef4\u53d8\u6210\u5411\u91cf\u4f9d\u6b21\u5b58\u5165\u5230encoder_outputs # \u8fd9\u6837encoder_outputs\u6bcf\u4e00\u884c\u5b58\u7684\u90fd\u662f\u5bf9\u5e94\u7684\u53e5\u5b50\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u901a\u8fc7\u7f16\u7801\u5668\u7684\u8f93\u51fa\u7ed3\u679c encoder_outputs [ ei ] = encoder_output [ 0, 0 ] # \u521d\u59cb\u5316\u89e3\u7801\u5668\u7684\u7b2c\u4e00\u4e2a\u8f93\u5165 \uff0c \u5373\u8d77\u59cb\u7b26 decoder_input = torch . tensor ( [ [SOS_token ] ] , device = device ) # \u521d\u59cb\u5316\u89e3\u7801\u5668\u7684\u9690\u5c42\u5f20\u91cf\u5373\u7f16\u7801\u5668\u7684\u9690\u5c42\u8f93\u51fa decoder_hidden = encoder_hidden # \u6839\u636e\u968f\u673a\u6570\u4e0eteacher_forcing_ratio\u5bf9\u6bd4\u5224\u65ad\u662f\u5426\u4f7f\u7528teacher_forcing use_teacher_forcing = True if random . random () < teacher_forcing_ratio else False # \u5982\u679c\u4f7f\u7528teacher_forcing if use_teacher_forcing : # \u5faa\u73af\u904d\u5386\u76ee\u6807\u5f20\u91cf\u7d22\u5f15 for di in range ( target_length ) : # \u5c06decoder_input , decoder_hidden , encoder_outputs\u5373attention\u4e2d\u7684QKV , # \u4f20\u5165\u89e3\u7801\u5668\u5bf9\u8c61 , \u83b7\u5f97decoder_output , decoder_hidden , decoder_attention decoder_output , decoder_hidden , decoder_attention = decoder ( decoder_input , decoder_hidden , encoder_outputs ) # \u56e0\u4e3a\u4f7f\u7528\u4e86teacher_forcing , \u65e0\u8bba\u89e3\u7801\u5668\u8f93\u51fa\u7684decoder_output\u662f\u4ec0\u4e48 , \u6211\u4eec\u90fd\u53ea # \u4f7f\u7528 \u2018 \u6b63\u786e\u7684\u7b54\u6848 \u2019\uff0c \u5373target_tensor [ di ] \u6765\u8ba1\u7b97\u635f\u5931 loss += criterion ( decoder_output , target_tensor [ di ] ) # \u5e76\u5f3a\u5236\u5c06\u4e0b\u4e00\u6b21\u7684\u89e3\u7801\u5668\u8f93\u5165\u8bbe\u7f6e\u4e3a \u2018 \u6b63\u786e\u7684\u7b54\u6848 \u2019 decoder_input = target_tensor [ di ] else : # \u5982\u679c\u4e0d\u4f7f\u7528teacher_forcing # \u4ecd\u7136\u904d\u5386\u76ee\u6807\u5f20\u91cf\u7d22\u5f15 for di in range ( target_length ) : # \u5c06decoder_input , decoder_hidden , encoder_outputs\u4f20\u5165\u89e3\u7801\u5668\u5bf9\u8c61 # \u83b7\u5f97decoder_output , decoder_hidden , decoder_attention decoder_output , decoder_hidden , decoder_attention = decoder ( decoder_input , decoder_hidden , encoder_outputs ) # \u53ea\u4e0d\u8fc7\u8fd9\u91cc\u6211\u4eec\u5c06\u4ecedecoder_output\u53d6\u51fa\u7b54\u6848 topv , topi = decoder_output . topk ( 1 ) # \u635f\u5931\u8ba1\u7b97\u4ecd\u7136\u4f7f\u7528decoder_output\u548ctarget_tensor [ di ] loss += criterion ( decoder_output , target_tensor [ di ] ) # \u6700\u540e\u5982\u679c\u8f93\u51fa\u503c\u662f\u7ec8\u6b62\u7b26 \uff0c \u5219\u5faa\u73af\u505c\u6b62 if topi . squeeze (). item () == EOS_token : break # \u5426\u5219 \uff0c \u5e76\u5bf9topi\u964d\u7ef4\u5e76\u5206\u79bb\u8d4b\u503c\u7ed9decoder_input\u4ee5\u4fbf\u8fdb\u884c\u4e0b\u6b21\u8fd0\u7b97 # \u8fd9\u91cc\u7684detach\u7684\u5206\u79bb\u4f5c\u7528\u4f7f\u5f97\u8fd9\u4e2adecoder_input\u4e0e\u6a21\u578b\u6784\u5efa\u7684\u5f20\u91cf\u56fe\u65e0\u5173 \uff0c \u76f8\u5f53\u4e8e\u5168\u65b0\u7684\u5916\u754c\u8f93\u5165 decoder_input = topi . squeeze (). detach () # \u8bef\u5dee\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u8fdb\u884c\u4f18\u5316\u5373\u53c2\u6570\u66f4\u65b0 encoder_optimizer . step () decoder_optimizer . step () # \u6700\u540e\u8fd4\u56de\u5e73\u5747\u635f\u5931 return loss . item () / target_length \u6784\u5efa\u65f6\u95f4\u8ba1\u7b97\u51fd\u6570: # \u5bfc\u5165\u65f6\u95f4\u548c\u6570\u5b66\u5de5\u5177\u5305 import time import math def timeSince ( since ): \"\u83b7\u5f97\u6bcf\u6b21\u6253\u5370\u7684\u8bad\u7ec3\u8017\u65f6, since\u662f\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\" # \u83b7\u5f97\u5f53\u524d\u65f6\u95f4 now = time . time () # \u83b7\u5f97\u65f6\u95f4\u5dee\uff0c\u5c31\u662f\u8bad\u7ec3\u8017\u65f6 s = now - since # \u5c06\u79d2\u8f6c\u5316\u4e3a\u5206\u949f, \u5e76\u53d6\u6574 m = math . floor ( s / 60 ) # \u8ba1\u7b97\u5269\u4e0b\u4e0d\u591f\u51d1\u62101\u5206\u949f\u7684\u79d2\u6570 s -= m * 60 # \u8fd4\u56de\u6307\u5b9a\u683c\u5f0f\u7684\u8017\u65f6 return ' %d m %d s' % ( m , s ) \u8f93\u5165\u53c2\u6570: # \u5047\u5b9a\u6a21\u578b\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\u662f10min\u4e4b\u524d since = time.time() - 10*60 \u8c03\u7528: period = timeSince(since) print(period) \u8f93\u51fa\u6548\u679c: 10 m 0 s \u8c03\u7528\u8bad\u7ec3\u51fd\u6570\u5e76\u6253\u5370\u65e5\u5fd7\u548c\u5236\u56fe: # \u5bfc\u5165plt\u4ee5\u4fbf\u7ed8\u5236\u635f\u5931\u66f2\u7ebf import matplotlib.pyplot as plt def trainIters ( encoder , decoder , n_iters , print_every = 1000 , plot_every = 100 , learning_rate = 0.01 ): \"\"\"\u8bad\u7ec3\u8fed\u4ee3\u51fd\u6570, \u8f93\u5165\u53c2\u6570\u67096\u4e2a\uff0c\u5206\u522b\u662fencoder, decoder: \u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5bf9\u8c61\uff0c n_iters: \u603b\u8fed\u4ee3\u6b65\u6570, print_every:\u6253\u5370\u65e5\u5fd7\u95f4\u9694, plot_every:\u7ed8\u5236\u635f\u5931\u66f2\u7ebf\u95f4\u9694, learning_rate\u5b66\u4e60\u7387\"\"\" # \u83b7\u5f97\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\u6233 start = time . time () # \u6bcf\u4e2a\u635f\u5931\u95f4\u9694\u7684\u5e73\u5747\u635f\u5931\u4fdd\u5b58\u5217\u8868\uff0c\u7528\u4e8e\u7ed8\u5236\u635f\u5931\u66f2\u7ebf plot_losses = [] # \u6bcf\u4e2a\u6253\u5370\u65e5\u5fd7\u95f4\u9694\u7684\u603b\u635f\u5931\uff0c\u521d\u59cb\u4e3a0 print_loss_total = 0 # \u6bcf\u4e2a\u7ed8\u5236\u635f\u5931\u95f4\u9694\u7684\u603b\u635f\u5931\uff0c\u521d\u59cb\u4e3a0 plot_loss_total = 0 # \u4f7f\u7528\u9884\u5b9a\u4e49\u7684SGD\u4f5c\u4e3a\u4f18\u5316\u5668\uff0c\u5c06\u53c2\u6570\u548c\u5b66\u4e60\u7387\u4f20\u5165\u5176\u4e2d encoder_optimizer = optim . SGD ( encoder . parameters (), lr = learning_rate ) decoder_optimizer = optim . SGD ( decoder . parameters (), lr = learning_rate ) # \u9009\u62e9\u635f\u5931\u51fd\u6570 criterion = nn . NLLLoss () # \u6839\u636e\u8bbe\u7f6e\u8fed\u4ee3\u6b65\u8fdb\u884c\u5faa\u73af for iter in range ( 1 , n_iters + 1 ): # \u6bcf\u6b21\u4ece\u8bed\u8a00\u5bf9\u5217\u8868\u4e2d\u968f\u673a\u53d6\u51fa\u4e00\u6761\u4f5c\u4e3a\u8bad\u7ec3\u8bed\u53e5 training_pair = tensorsFromPair ( random . choice ( pairs )) # \u5206\u522b\u4ecetraining_pair\u4e2d\u53d6\u51fa\u8f93\u5165\u5f20\u91cf\u548c\u76ee\u6807\u5f20\u91cf input_tensor = training_pair [ 0 ] target_tensor = training_pair [ 1 ] # \u901a\u8fc7train\u51fd\u6570\u83b7\u5f97\u6a21\u578b\u8fd0\u884c\u7684\u635f\u5931 loss = train ( input_tensor , target_tensor , encoder , decoder , encoder_optimizer , decoder_optimizer , criterion ) # \u5c06\u635f\u5931\u8fdb\u884c\u7d2f\u548c print_loss_total += loss plot_loss_total += loss # \u5f53\u8fed\u4ee3\u6b65\u8fbe\u5230\u65e5\u5fd7\u6253\u5370\u95f4\u9694\u65f6 if iter % print_every == 0 : # \u901a\u8fc7\u603b\u635f\u5931\u9664\u4ee5\u95f4\u9694\u5f97\u5230\u5e73\u5747\u635f\u5931 print_loss_avg = print_loss_total / print_every # \u5c06\u603b\u635f\u5931\u5f520 print_loss_total = 0 # \u6253\u5370\u65e5\u5fd7\uff0c\u65e5\u5fd7\u5185\u5bb9\u5206\u522b\u662f\uff1a\u8bad\u7ec3\u8017\u65f6\uff0c\u5f53\u524d\u8fed\u4ee3\u6b65\uff0c\u5f53\u524d\u8fdb\u5ea6\u767e\u5206\u6bd4\uff0c\u5f53\u524d\u5e73\u5747\u635f\u5931 print ( ' %s ( %d %d%% ) %.4f ' % ( timeSince ( start ), iter , iter / n_iters * 100 , print_loss_avg )) # \u5f53\u8fed\u4ee3\u6b65\u8fbe\u5230\u635f\u5931\u7ed8\u5236\u95f4\u9694\u65f6 if iter % plot_every == 0 : # \u901a\u8fc7\u603b\u635f\u5931\u9664\u4ee5\u95f4\u9694\u5f97\u5230\u5e73\u5747\u635f\u5931 plot_loss_avg = plot_loss_total / plot_every # \u5c06\u5e73\u5747\u635f\u5931\u88c5\u8fdbplot_losses\u5217\u8868 plot_losses . append ( plot_loss_avg ) # \u603b\u635f\u5931\u5f520 plot_loss_total = 0 # \u7ed8\u5236\u635f\u5931\u66f2\u7ebf plt . figure () plt . plot ( plot_losses ) # \u4fdd\u5b58\u5230\u6307\u5b9a\u8def\u5f84 plt . savefig ( \"./s2s_loss.png\" ) \u8f93\u5165\u53c2\u6570: # \u8bbe\u7f6e\u9690\u5c42\u5927\u5c0f\u4e3a256 \uff0c\u4e5f\u662f\u8bcd\u5d4c\u5165\u7ef4\u5ea6 hidden_size = 256 # \u901a\u8fc7input_lang.n_words\u83b7\u53d6\u8f93\u5165\u8bcd\u6c47\u603b\u6570\uff0c\u4e0ehidden_size\u4e00\u540c\u4f20\u5165EncoderRNN\u7c7b\u4e2d # \u5f97\u5230\u7f16\u7801\u5668\u5bf9\u8c61encoder1 encoder1 = EncoderRNN(input_lang.n_words, hidden_size).to(device) # \u901a\u8fc7output_lang.n_words\u83b7\u53d6\u76ee\u6807\u8bcd\u6c47\u603b\u6570\uff0c\u4e0ehidden_size\u548cdropout_p\u4e00\u540c\u4f20\u5165AttnDecoderRNN\u7c7b\u4e2d # \u5f97\u5230\u89e3\u7801\u5668\u5bf9\u8c61attn_decoder1 attn_decoder1 = AttnDecoderRNN(hidden_size, output_lang.n_words, dropout_p=0.1).to(device) # \u8bbe\u7f6e\u8fed\u4ee3\u6b65\u6570 n_iters = 75000 # \u8bbe\u7f6e\u65e5\u5fd7\u6253\u5370\u95f4\u9694 print_every = 5000 \u8c03\u7528: # \u8c03\u7528trainIters\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\uff0c\u5c06\u7f16\u7801\u5668\u5bf9\u8c61encoder1\uff0c\u7801\u5668\u5bf9\u8c61attn_decoder1\uff0c\u8fed\u4ee3\u6b65\u6570\uff0c\u65e5\u5fd7\u6253\u5370\u95f4\u9694\u4f20\u5165\u5176\u4e2d trainIters(encoder1, attn_decoder1, n_iters, print_every=print_every) \u8f93\u51fa\u6548\u679c: 3 m 35 s ( 5000 6 % ) 3.4159 7 m 12 s ( 10000 13 % ) 2.7805 10 m 46 s ( 15000 20 % ) 2.4663 14 m 23 s ( 20000 26 % ) 2.1693 18 m 6 s ( 25000 33 % ) 1.9303 21 m 44 s ( 30000 40 % ) 1.7601 25 m 23 s ( 35000 46 % ) 1.6207 29 m 8 s ( 40000 53 % ) 1.4973 32 m 44 s ( 45000 60 % ) 1.3832 36 m 22 s ( 50000 66 % ) 1.2694 40 m 6 s ( 55000 73 % ) 1.1813 43 m 51 s ( 60000 80 % ) 1.0907 47 m 29 s ( 65000 86 % ) 1.0425 51 m 10 s ( 70000 93 % ) 0.9955 54 m 48 s ( 75000 100 % ) 0.9158 \u635f\u5931\u4e0b\u964d\u66f2\u7ebf: \u635f\u5931\u66f2\u7ebf\u5206\u6790: \u4e00\u76f4\u4e0b\u964d\u7684\u635f\u5931\u66f2\u7ebf, \u8bf4\u660e\u6a21\u578b\u6b63\u5728\u6536\u655b, \u80fd\u591f\u4ece\u6570\u636e\u4e2d\u627e\u5230\u4e00\u4e9b\u89c4\u5f8b\u5e94\u7528\u4e8e\u6570\u636e. \u7b2c\u4e94\u6b65: \u6784\u5efa\u6a21\u578b\u8bc4\u4f30\u51fd\u6570, \u5e76\u8fdb\u884c\u6d4b\u8bd5\u4ee5\u53caAttention\u6548\u679c\u5206\u6790. \u6784\u5efa\u6a21\u578b\u8bc4\u4f30\u51fd\u6570: def evaluate ( encoder , decoder , sentence , max_length = MAX_LENGTH ) : \"\"\"\u8bc4\u4f30\u51fd\u6570\uff0c\u8f93\u5165\u53c2\u6570\u67094\u4e2a\uff0c\u5206\u522b\u662fencoder, decoder: \u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5bf9\u8c61\uff0c sentence:\u9700\u8981\u8bc4\u4f30\u7684\u53e5\u5b50\uff0cmax_length:\u53e5\u5b50\u7684\u6700\u5927\u957f\u5ea6\"\"\" # \u8bc4\u4f30\u9636\u6bb5\u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad () : # \u5bf9\u8f93\u5165\u7684\u53e5\u5b50\u8fdb\u884c\u5f20\u91cf\u8868\u793a input_tensor = tensorFromSentence ( input_lang , sentence ) # \u83b7\u5f97\u8f93\u5165\u7684\u53e5\u5b50\u957f\u5ea6 input_length = input_tensor . size () [ 0 ] # \u521d\u59cb\u5316\u7f16\u7801\u5668\u9690\u5c42\u5f20\u91cf encoder_hidden = encoder . initHidden () # \u521d\u59cb\u5316\u7f16\u7801\u5668\u8f93\u51fa\u5f20\u91cf \uff0c \u662fmax_lengthxencoder . hidden_size\u76840\u5f20\u91cf encoder_outputs = torch . zeros ( max_length , encoder . hidden_size , device = device ) # \u5faa\u73af\u904d\u5386\u8f93\u5165\u5f20\u91cf\u7d22\u5f15 for ei in range ( input_length ) : # \u6839\u636e\u7d22\u5f15\u4eceinput_tensor\u53d6\u51fa\u5bf9\u5e94\u7684\u5355\u8bcd\u7684\u5f20\u91cf\u8868\u793a \uff0c \u548c\u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf\u4e00\u540c\u4f20\u5165encoder\u5bf9\u8c61\u4e2d encoder_output , encoder_hidden = encoder ( input_tensor [ ei ] , encoder_hidden ) #\u5c06\u6bcf\u6b21\u83b7\u5f97\u7684\u8f93\u51faencoder_output ( \u4e09\u7ef4\u5f20\u91cf ), \u4f7f\u7528 [ 0, 0 ] \u964d\u4e24\u7ef4\u53d8\u6210\u5411\u91cf\u4f9d\u6b21\u5b58\u5165\u5230encoder_outputs # \u8fd9\u6837encoder_outputs\u6bcf\u4e00\u884c\u5b58\u7684\u90fd\u662f\u5bf9\u5e94\u7684\u53e5\u5b50\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u901a\u8fc7\u7f16\u7801\u5668\u7684\u8f93\u51fa\u7ed3\u679c encoder_outputs [ ei ] += encoder_output [ 0, 0 ] # \u521d\u59cb\u5316\u89e3\u7801\u5668\u7684\u7b2c\u4e00\u4e2a\u8f93\u5165 \uff0c \u5373\u8d77\u59cb\u7b26 decoder_input = torch . tensor ( [ [SOS_token ] ] , device = device ) # \u521d\u59cb\u5316\u89e3\u7801\u5668\u7684\u9690\u5c42\u5f20\u91cf\u5373\u7f16\u7801\u5668\u7684\u9690\u5c42\u8f93\u51fa decoder_hidden = encoder_hidden # \u521d\u59cb\u5316\u9884\u6d4b\u7684\u8bcd\u6c47\u5217\u8868 decoded_words = [] # \u521d\u59cb\u5316attention\u5f20\u91cf decoder_attentions = torch . zeros ( max_length , max_length ) # \u5f00\u59cb\u5faa\u73af\u89e3\u7801 for di in range ( max_length ) : # \u5c06decoder_input , decoder_hidden , encoder_outputs\u4f20\u5165\u89e3\u7801\u5668\u5bf9\u8c61 # \u83b7\u5f97decoder_output , decoder_hidden , decoder_attention decoder_output , decoder_hidden , decoder_attention = decoder ( decoder_input , decoder_hidden , encoder_outputs ) # \u53d6\u6240\u6709\u7684attention\u7ed3\u679c\u5b58\u5165\u521d\u59cb\u5316\u7684attention\u5f20\u91cf\u4e2d decoder_attentions [ di ] = decoder_attention . data # \u4ece\u89e3\u7801\u5668\u8f93\u51fa\u4e2d\u83b7\u5f97\u6982\u7387\u6700\u9ad8\u7684\u503c\u53ca\u5176\u7d22\u5f15\u5bf9\u8c61 topv , topi = decoder_output . data . topk ( 1 ) # \u4ece\u7d22\u5f15\u5bf9\u8c61\u4e2d\u53d6\u51fa\u5b83\u7684\u503c\u4e0e\u7ed3\u675f\u6807\u5fd7\u503c\u4f5c\u5bf9\u6bd4 if topi . item () == EOS_token : # \u5982\u679c\u662f\u7ed3\u675f\u6807\u5fd7\u503c \uff0c \u5219\u5c06\u7ed3\u675f\u6807\u5fd7\u88c5\u8fdbdecoded_words\u5217\u8868 \uff0c \u4ee3\u8868\u7ffb\u8bd1\u7ed3\u675f decoded_words . append ( '<EOS>' ) # \u5faa\u73af\u9000\u51fa break else : # \u5426\u5219 \uff0c \u6839\u636e\u7d22\u5f15\u627e\u5230\u5b83\u5728\u8f93\u51fa\u8bed\u8a00\u7684index2word\u5b57\u5178\u4e2d\u5bf9\u5e94\u7684\u5355\u8bcd\u88c5\u8fdbdecoded_words decoded_words . append ( output_lang . index2word [ topi.item() ] ) # \u6700\u540e\u5c06\u672c\u6b21\u9884\u6d4b\u7684\u7d22\u5f15\u964d\u7ef4\u5e76\u5206\u79bb\u8d4b\u503c\u7ed9decoder_input \uff0c \u4ee5\u4fbf\u4e0b\u6b21\u8fdb\u884c\u9884\u6d4b decoder_input = topi . squeeze (). detach () # \u8fd4\u56de\u7ed3\u679cdecoded_words \uff0c \u4ee5\u53ca\u5b8c\u6574\u6ce8\u610f\u529b\u5f20\u91cf , \u628a\u6ca1\u6709\u7528\u5230\u7684\u90e8\u5206\u5207\u6389 return decoded_words , decoder_attentions [ :di + 1 ] \u968f\u673a\u9009\u62e9\u6307\u5b9a\u6570\u91cf\u7684\u6570\u636e\u8fdb\u884c\u8bc4\u4f30: def evaluateRandomly ( encoder , decoder , n = 6 ) : \"\"\" \u968f\u673a\u6d4b\u8bd5\u51fd\u6570, \u8f93\u5165\u53c2\u6570encoder, decoder\u4ee3\u8868\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5bf9\u8c61\uff0cn\u4ee3\u8868\u6d4b\u8bd5\u6570 \"\"\" # \u5bf9\u6d4b\u8bd5\u6570\u8fdb\u884c\u5faa\u73af for i in range ( n ) : # \u4ece pairs \u968f\u673a\u9009\u62e9\u8bed\u8a00\u5bf9 pair = random . choice ( pairs ) # > \u4ee3\u8868\u8f93\u5165 print ( ' > ' , pair [ 0 ] ) # = \u4ee3\u8868\u6b63\u786e\u7684\u8f93\u51fa print ( ' = ' , pair [ 1 ] ) # \u8c03\u7528 evaluate \u8fdb\u884c\u9884\u6d4b output_words , attentions = evaluate ( encoder , decoder , pair [ 0 ] ) # \u5c06\u7ed3\u679c\u8fde\u6210\u53e5\u5b50 output_sentence = ' ' . join ( output_words ) # < \u4ee3\u8868\u6a21\u578b\u7684\u8f93\u51fa print ( ' < ' , output_sentence ) print ( '' ) \u8c03\u7528: # \u8c03\u7528evaluateRandomly\u8fdb\u884c\u6a21\u578b\u6d4b\u8bd5\uff0c\u5c06\u7f16\u7801\u5668\u5bf9\u8c61encoder1\uff0c\u7801\u5668\u5bf9\u8c61attn_decoder1\u4f20\u5165\u5176\u4e2d evaluateRandomly(encoder1, attn_decoder1) \u8f93\u51fa\u6548\u679c: > i m impressed with your french . = je suis impressionne par votre francais . < je suis impressionnee par votre francais . <EOS> > i m more than a friend . = je suis plus qu une amie . < je suis plus qu une amie . <EOS> > she is beautiful like her mother . = elle est belle comme sa mere . < elle est sa sa mere . <EOS> > you re winning aren t you ? = vous gagnez n est ce pas ? < tu restez n est ce pas ? <EOS> > he is angry with you . = il est en colere apres toi . < il est en colere apres toi . <EOS> > you re very timid . = vous etes tres craintifs . < tu es tres craintive . <EOS> Attention\u5f20\u91cf\u5236\u56fe: sentence = \"we re both teachers .\" # \u8c03\u7528\u8bc4\u4f30\u51fd\u6570 output_words, attentions = evaluate( encoder1, attn_decoder1, sentence) print(output_words) # \u5c06attention\u5f20\u91cf\u8f6c\u5316\u6210numpy, \u4f7f\u7528matshow\u7ed8\u5236 plt.matshow(attentions.numpy()) # \u4fdd\u5b58\u56fe\u50cf plt.savefig(\"./s2s_attn.png\") \u8f93\u51fa\u6548\u679c: ['nous', 'sommes', 'toutes', 'deux', 'enseignantes', '.', '<EOS>'] Attention\u53ef\u89c6\u5316: \u5206\u6790: Attention\u56fe\u50cf\u7684\u7eb5\u5750\u6807\u4ee3\u8868\u8f93\u5165\u7684\u6e90\u8bed\u8a00\u5404\u4e2a\u8bcd\u6c47\u5bf9\u5e94\u7684\u7d22\u5f15, 0-6\u5206\u522b\u5bf9\u5e94[\"we\", \"re\", \"both\", \"teachers\", \".\", \" \"], \u7eb5\u5750\u6807\u4ee3\u8868\u751f\u6210\u7684\u76ee\u6807\u8bed\u8a00\u5404\u4e2a\u8bcd\u6c47\u5bf9\u5e94\u7684\u7d22\u5f15, 0-7\u4ee3\u8868['nous', 'sommes', 'toutes', 'deux', 'enseignantes', '.', ' '], \u56fe\u4e2d\u6d45\u8272\u5c0f\u65b9\u5757(\u989c\u8272\u8d8a\u6d45\u8bf4\u660e\u5f71\u54cd\u8d8a\u5927)\u4ee3\u8868\u8bcd\u6c47\u4e4b\u95f4\u7684\u5f71\u54cd\u5173\u7cfb, \u6bd4\u5982\u6e90\u8bed\u8a00\u7684\u7b2c1\u4e2a\u8bcd\u6c47\u5bf9\u751f\u6210\u76ee\u6807\u8bed\u8a00\u7684\u7b2c1\u4e2a\u8bcd\u6c47\u5f71\u54cd\u6700\u5927, \u6e90\u8bed\u8a00\u7684\u7b2c4\uff0c5\u4e2a\u8bcd\u5bf9\u751f\u6210\u76ee\u6807\u8bed\u8a00\u7684\u7b2c5\u4e2a\u8bcd\u4f1a\u5f71\u54cd\u6700\u5927, \u901a\u8fc7\u8fd9\u6837\u7684\u53ef\u89c6\u5316\u56fe\u50cf, \u6211\u4eec\u53ef\u4ee5\u77e5\u9053Attention\u7684\u6548\u679c\u597d\u574f, \u4e0e\u6211\u4eec\u4eba\u4e3a\u53bb\u5224\u5b9a\u5230\u5e95\u8fd8\u6709\u591a\u5927\u7684\u5dee\u8ddd. \u8fdb\u800c\u8861\u91cf\u6211\u4eec\u8bad\u7ec3\u6a21\u578b\u7684\u53ef\u7528\u6027. \u5c0f\u8282\u603b\u7ed3: seq2seq\u6a21\u578b\u67b6\u6784\u5206\u6790: \u4ece\u56fe\u4e2d\u53ef\u77e5, seq2seq\u6a21\u578b\u67b6\u6784, \u5305\u62ec\u4e24\u90e8\u5206\u5206\u522b\u662fencoder(\u7f16\u7801\u5668)\u548cdecoder(\u89e3\u7801\u5668), \u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u7684\u5185\u90e8\u5b9e\u73b0\u90fd\u4f7f\u7528\u4e86GRU\u6a21\u578b, \u8fd9\u91cc\u5b83\u8981\u5b8c\u6210\u7684\u662f\u4e00\u4e2a\u4e2d\u6587\u5230\u82f1\u6587\u7684\u7ffb\u8bd1: \u6b22\u8fce \u6765 \u5317\u4eac --> welcome to BeiJing. \u7f16\u7801\u5668\u9996\u5148\u5904\u7406\u4e2d\u6587\u8f93\u5165\"\u6b22\u8fce \u6765 \u5317\u4eac\", \u901a\u8fc7GRU\u6a21\u578b\u83b7\u5f97\u6bcf\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u5f20\u91cf\uff0c\u6700\u540e\u5c06\u5b83\u4eec\u62fc\u63a5\u6210\u4e00\u4e2a\u4e2d\u95f4\u8bed\u4e49\u5f20\u91cfc, \u63a5\u7740\u89e3\u7801\u5668\u5c06\u4f7f\u7528\u8fd9\u4e2a\u4e2d\u95f4\u8bed\u4e49\u5f20\u91cfc\u4ee5\u53ca\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u9690\u5c42\u5f20\u91cf, \u9010\u4e2a\u751f\u6210\u5bf9\u5e94\u7684\u7ffb\u8bd1\u8bed\u8a00. \u57fa\u4e8eGRU\u7684seq2seq\u6a21\u578b\u67b6\u6784\u5b9e\u73b0\u7ffb\u8bd1\u7684\u8fc7\u7a0b: \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305. \u7b2c\u4e8c\u6b65: \u5bf9\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u6570\u636e\u8fdb\u884c\u5904\u7406, \u4ee5\u6ee1\u8db3\u6a21\u578b\u8bad\u7ec3\u8981\u6c42. \u7b2c\u4e09\u6b65: \u6784\u5efa\u57fa\u4e8eGRU\u7684\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668. \u7b2c\u56db\u6b65: \u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570, \u5e76\u8fdb\u884c\u8bad\u7ec3. \u7b2c\u4e94\u6b65: \u6784\u5efa\u6a21\u578b\u8bc4\u4f30\u51fd\u6570, \u5e76\u8fdb\u884c\u6d4b\u8bd5\u4ee5\u53caAttention\u6548\u679c\u5206\u6790. \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 python\u7248\u672c\u4f7f\u75283.6.x, pytorch\u7248\u672c\u4f7f\u75281.3.1 \u7b2c\u4e8c\u6b65: \u5bf9\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u6570\u636e\u8fdb\u884c\u5904\u7406, \u4ee5\u6ee1\u8db3\u6a21\u578b\u8bad\u7ec3\u8981\u6c42 \u5c06\u6307\u5b9a\u8bed\u8a00\u4e2d\u7684\u8bcd\u6c47\u6620\u5c04\u6210\u6570\u503c \u5b57\u7b26\u89c4\u8303\u5316 \u5c06\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58, \u5e76\u5b9e\u4f8b\u5316\u7c7bLang \u8fc7\u6ee4\u51fa\u7b26\u5408\u6211\u4eec\u8981\u6c42\u7684\u8bed\u8a00\u5bf9 \u5bf9\u4ee5\u4e0a\u6570\u636e\u51c6\u5907\u51fd\u6570\u8fdb\u884c\u6574\u5408, \u5e76\u4f7f\u7528\u7c7bLang\u5bf9\u8bed\u8a00\u5bf9\u8fdb\u884c\u6570\u503c\u6620\u5c04 \u5c06\u8bed\u8a00\u5bf9\u8f6c\u5316\u4e3a\u6a21\u578b\u8f93\u5165\u9700\u8981\u7684\u5f20\u91cf \u7b2c\u4e09\u6b65: \u6784\u5efa\u57fa\u4e8eGRU\u7684\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668 \u6784\u5efa\u57fa\u4e8eGRU\u7684\u7f16\u7801\u5668 \u6784\u5efa\u57fa\u4e8eGRU\u7684\u89e3\u7801\u5668 \u6784\u5efa\u57fa\u4e8eGRU\u548cAttention\u7684\u89e3\u7801\u5668 \u7b2c\u56db\u6b65: \u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570, \u5e76\u8fdb\u884c\u8bad\u7ec3 \u4ec0\u4e48\u662fteacher_forcing: \u5b83\u662f\u4e00\u79cd\u7528\u4e8e\u5e8f\u5217\u751f\u6210\u4efb\u52a1\u7684\u8bad\u7ec3\u6280\u5de7, \u5728seq2seq\u67b6\u6784\u4e2d, \u6839\u636e\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\u7406\u8bba\uff0c\u89e3\u7801\u5668\u6bcf\u6b21\u5e94\u8be5\u4f7f\u7528\u4e0a\u4e00\u6b65\u7684\u7ed3\u679c\u4f5c\u4e3a\u8f93\u5165\u7684\u4e00\u90e8\u5206, \u4f46\u662f\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u65e6\u4e0a\u4e00\u6b65\u7684\u7ed3\u679c\u662f\u9519\u8bef\u7684\uff0c\u5c31\u4f1a\u5bfc\u81f4\u8fd9\u79cd\u9519\u8bef\u88ab\u7d2f\u79ef\uff0c\u65e0\u6cd5\u8fbe\u5230\u8bad\u7ec3\u6548\u679c, \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u673a\u5236\u6539\u53d8\u4e0a\u4e00\u6b65\u51fa\u9519\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u8bad\u7ec3\u65f6\u6211\u4eec\u662f\u5df2\u77e5\u6b63\u786e\u7684\u8f93\u51fa\u5e94\u8be5\u662f\u4ec0\u4e48\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f3a\u5236\u5c06\u4e0a\u4e00\u6b65\u7ed3\u679c\u8bbe\u7f6e\u6210\u6b63\u786e\u7684\u8f93\u51fa, \u8fd9\u79cd\u65b9\u5f0f\u5c31\u53eb\u505ateacher_forcing. teacher_forcing\u7684\u4f5c\u7528: \u80fd\u591f\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u77eb\u6b63\u6a21\u578b\u7684\u9884\u6d4b\uff0c\u907f\u514d\u5728\u5e8f\u5217\u751f\u6210\u7684\u8fc7\u7a0b\u4e2d\u8bef\u5dee\u8fdb\u4e00\u6b65\u653e\u5927. \u53e6\u5916, teacher_forcing\u80fd\u591f\u6781\u5927\u7684\u52a0\u5feb\u6a21\u578b\u7684\u6536\u655b\u901f\u5ea6\uff0c\u4ee4\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u66f4\u5feb\u66f4\u5e73\u7a33. \u6784\u5efa\u8bad\u7ec3\u51fd\u6570train \u6784\u5efa\u65f6\u95f4\u8ba1\u7b97\u51fd\u6570timeSince \u8c03\u7528\u8bad\u7ec3\u51fd\u6570\u5e76\u6253\u5370\u65e5\u5fd7\u548c\u5236\u56fe \u635f\u5931\u66f2\u7ebf\u5206\u6790: \u4e00\u76f4\u4e0b\u964d\u7684\u635f\u5931\u66f2\u7ebf, \u8bf4\u660e\u6a21\u578b\u6b63\u5728\u6536\u655b, \u80fd\u591f\u4ece\u6570\u636e\u4e2d\u627e\u5230\u4e00\u4e9b\u89c4\u5f8b\u5e94\u7528\u4e8e\u6570\u636e \u7b2c\u4e94\u6b65: \u6784\u5efa\u6a21\u578b\u8bc4\u4f30\u51fd\u6570, \u5e76\u8fdb\u884c\u6d4b\u8bd5\u4ee5\u53caAttention\u6548\u679c\u5206\u6790 \u6784\u5efa\u6a21\u578b\u8bc4\u4f30\u51fd\u6570evaluate \u968f\u673a\u9009\u62e9\u6307\u5b9a\u6570\u91cf\u7684\u6570\u636e\u8fdb\u884c\u8bc4\u4f30 \u8fdb\u884c\u4e86Attention\u53ef\u89c6\u5316\u5206\u6790","title":"2. RNN\u7ecf\u5178\u6848\u4f8b"},{"location":"2.html#21-rnn","text":"\u5b66\u4e60\u76ee\u6807: \u4e86\u89e3\u6709\u5173\u4eba\u540d\u5206\u7c7b\u95ee\u9898\u548c\u6709\u5173\u6570\u636e. \u638c\u63e1\u4f7f\u7528RNN\u6784\u5efa\u4eba\u540d\u5206\u7c7b\u5668\u5b9e\u73b0\u8fc7\u7a0b. \u5173\u4e8e\u4eba\u540d\u5206\u7c7b\u95ee\u9898: \u4ee5\u4e00\u4e2a\u4eba\u540d\u4e3a\u8f93\u5165, \u4f7f\u7528\u6a21\u578b\u5e2e\u52a9\u6211\u4eec\u5224\u65ad\u5b83\u6700\u6709\u53ef\u80fd\u662f\u6765\u81ea\u54ea\u4e00\u4e2a\u56fd\u5bb6\u7684\u4eba\u540d, \u8fd9\u5728\u67d0\u4e9b\u56fd\u9645\u5316\u516c\u53f8\u7684\u4e1a\u52a1\u4e2d\u5177\u6709\u91cd\u8981\u610f\u4e49, \u5728\u7528\u6237\u6ce8\u518c\u8fc7\u7a0b\u4e2d, \u4f1a\u6839\u636e\u7528\u6237\u586b\u5199\u7684\u540d\u5b57\u76f4\u63a5\u7ed9\u4ed6\u5206\u914d\u53ef\u80fd\u7684\u56fd\u5bb6\u6216\u5730\u533a\u9009\u9879, \u4ee5\u53ca\u8be5\u56fd\u5bb6\u6216\u5730\u533a\u7684\u56fd\u65d7, \u9650\u5236\u624b\u673a\u53f7\u7801\u4f4d\u6570\u7b49\u7b49. \u4eba\u540d\u5206\u7c7b\u6570\u636e: \u6570\u636e\u4e0b\u8f7d\u5730\u5740: https://download.pytorch.org/tutorial/data.zip \u6570\u636e\u6587\u4ef6\u9884\u89c8: - data/ - names/ Arabic.txt Chinese.txt Czech.txt Dutch.txt English.txt French.txt German.txt Greek.txt Irish.txt Italian.txt Japanese.txt Korean.txt Polish.txt Portuguese.txt Russian.txt Scottish.txt Spanish.txt Vietnamese.txt Chiness.txt\u9884\u89c8: Ang Au-Yong Bai Ban Bao Bei Bian Bui Cai Cao Cen Chai Chaim Chan Chang Chao Che Chen Cheng \u6574\u4e2a\u6848\u4f8b\u7684\u5b9e\u73b0\u53ef\u5206\u4e3a\u4ee5\u4e0b\u4e94\u4e2a\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305. \u7b2c\u4e8c\u6b65: \u5bf9data\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u6ee1\u8db3\u8bad\u7ec3\u8981\u6c42. \u7b2c\u4e09\u6b65: \u6784\u5efaRNN\u6a21\u578b(\u5305\u62ec\u4f20\u7edfRNN, LSTM\u4ee5\u53caGRU). \u7b2c\u56db\u6b65: \u6784\u5efa\u8bad\u7ec3\u51fd\u6570\u5e76\u8fdb\u884c\u8bad\u7ec3. \u7b2c\u4e94\u6b65: \u6784\u5efa\u8bc4\u4f30\u51fd\u6570\u5e76\u8fdb\u884c\u9884\u6d4b. \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 python\u7248\u672c\u4f7f\u75283.6.x, pytorch\u7248\u672c\u4f7f\u75281.3.1 pip install torch==1.3.1 # \u4eceio\u4e2d\u5bfc\u5165\u6587\u4ef6\u6253\u5f00\u65b9\u6cd5 from io import open # \u5e2e\u52a9\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u5b50\u76ee\u5f55\u7684\u67e5\u8be2 import glob import os # \u7528\u4e8e\u83b7\u5f97\u5e38\u89c1\u5b57\u6bcd\u53ca\u5b57\u7b26\u89c4\u8303\u5316 import string import unicodedata # \u5bfc\u5165\u968f\u673a\u5de5\u5177random import random # \u5bfc\u5165\u65f6\u95f4\u548c\u6570\u5b66\u5de5\u5177\u5305 import time import math # \u5bfc\u5165torch\u5de5\u5177 import torch # \u5bfc\u5165nn\u51c6\u5907\u6784\u5efa\u6a21\u578b import torch.nn as nn # \u5f15\u5165\u5236\u56fe\u5de5\u5177\u5305 import matplotlib.pyplot as plt \u7b2c\u4e8c\u6b65: \u5bf9data\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u6ee1\u8db3\u8bad\u7ec3\u8981\u6c42. \u83b7\u53d6\u5e38\u7528\u7684\u5b57\u7b26\u6570\u91cf: # \u83b7\u53d6\u6240\u6709\u5e38\u7528\u5b57\u7b26\u5305\u62ec\u5b57\u6bcd\u548c\u5e38\u7528\u6807\u70b9 all_letters = string . ascii_letters + \" .,;'\" # \u83b7\u53d6\u5e38\u7528\u5b57\u7b26\u6570\u91cf n_letters = len ( all_letters ) print ( \"n_letter:\" , n_letters ) \u8f93\u51fa\u6548\u679c: n_letter : 57 \u5b57\u7b26\u89c4\u8303\u5316\u4e4bunicode\u8f6cAscii\u51fd\u6570: # \u5173\u4e8e\u7f16\u7801\u95ee\u9898\u6211\u4eec\u6682\u4e14\u4e0d\u53bb\u8003\u8651 # \u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u53bb\u6389\u4e00\u4e9b\u8bed\u8a00\u4e2d\u7684\u91cd\u97f3\u6807\u8bb0 # \u5982: \u015alus\u00e0rski ---> Slusarski def unicodeToAscii ( s ): return '' . join ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' and c in all_letters ) \u8c03\u7528: s = \"\u015alus\u00e0rski\" a = unicodeToAscii(s) print(a) \u8f93\u51fa\u6548\u679c: Slusarski \u6784\u5efa\u4e00\u4e2a\u4ece\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5185\u5bb9\u5230\u5185\u5b58\u7684\u51fd\u6570: data_path = \"./data/name/\" def readLines ( filename ): \"\"\"\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6bcf\u4e00\u884c\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5f62\u6210\u5217\u8868\"\"\" # \u6253\u5f00\u6307\u5b9a\u6587\u4ef6\u5e76\u8bfb\u53d6\u6240\u6709\u5185\u5bb9, \u4f7f\u7528strip()\u53bb\u9664\u4e24\u4fa7\u7a7a\u767d\u7b26, \u7136\u540e\u4ee5'\\n'\u8fdb\u884c\u5207\u5206 lines = open ( filename , encoding = 'utf-8' ) . read () . strip () . split ( ' \\n ' ) # \u5bf9\u5e94\u6bcf\u4e00\u4e2alines\u5217\u8868\u4e2d\u7684\u540d\u5b57\u8fdb\u884cAscii\u8f6c\u6362, \u4f7f\u5176\u89c4\u8303\u5316.\u6700\u540e\u8fd4\u56de\u4e00\u4e2a\u540d\u5b57\u5217\u8868 return [ unicodeToAscii ( line ) for line in lines ] \u8c03\u7528: # filename\u662f\u6570\u636e\u96c6\u4e2d\u67d0\u4e2a\u5177\u4f53\u7684\u6587\u4ef6, \u6211\u4eec\u8fd9\u91cc\u9009\u62e9Chinese.txt filename = data_path + \"Chinese.txt\" lines = readLines ( filename ) print ( lines ) \u8f93\u51fa\u6548\u679c: lines: ['Ang', 'AuYong', 'Bai', 'Ban', 'Bao', 'Bei', 'Bian', 'Bui', 'Cai', 'Cao', 'Cen', 'Chai', 'Chaim', 'Chan', 'Chang', 'Chao', 'Che', 'Chen', 'Cheng', 'Cheung', 'Chew', 'Chieu', 'Chin', 'Chong', 'Chou', 'Chu', 'Cui', 'Dai', 'Deng', 'Ding', 'Dong', 'Dou', 'Duan', 'Eng', 'Fan', 'Fei', 'Feng', 'Foong', 'Fung', 'Gan', 'Gauk', 'Geng', 'Gim', 'Gok', 'Gong', 'Guan', 'Guang', 'Guo', 'Gwock', 'Han', 'Hang', 'Hao', 'Hew', 'Hiu', 'Hong', 'Hor', 'Hsiao', 'Hua', 'Huan', 'Huang', 'Hui', 'Huie', 'Huo', 'Jia', 'Jiang', 'Jin', 'Jing', 'Joe', 'Kang', 'Kau', 'Khoo', 'Khu', 'Kong', 'Koo', 'Kwan', 'Kwei', 'Kwong', 'Lai', 'Lam', 'Lang', 'Lau', 'Law', 'Lew', 'Lian', 'Liao', 'Lim', 'Lin', 'Ling', 'Liu', 'Loh', 'Long', 'Loong', 'Luo', 'Mah', 'Mai', 'Mak', 'Mao', 'Mar', 'Mei', 'Meng', 'Miao', 'Min', 'Ming', 'Moy', 'Mui', 'Nie', 'Niu', 'OuYang', 'OwYang', 'Pan', 'Pang', 'Pei', 'Peng', 'Ping', 'Qian', 'Qin', 'Qiu', 'Quan', 'Que', 'Ran', 'Rao', 'Rong', 'Ruan', 'Sam', 'Seah', 'See ', 'Seow', 'Seto', 'Sha', 'Shan', 'Shang', 'Shao', 'Shaw', 'She', 'Shen', 'Sheng', 'Shi', 'Shu', 'Shuai', 'Shui', 'Shum', 'Siew', 'Siu', 'Song', 'Sum', 'Sun', 'Sze ', 'Tan', 'Tang', 'Tao', 'Teng', 'Teoh', 'Thean', 'Thian', 'Thien', 'Tian', 'Tong', 'Tow', 'Tsang', 'Tse', 'Tsen', 'Tso', 'Tze', 'Wan', 'Wang', 'Wei', 'Wen', 'Weng', 'Won', 'Wong', 'Woo', 'Xiang', 'Xiao', 'Xie', 'Xing', 'Xue', 'Xun', 'Yan', 'Yang', 'Yao', 'Yap', 'Yau', 'Yee', 'Yep', 'Yim', 'Yin', 'Ying', 'Yong', 'You', 'Yuan', 'Zang', 'Zeng', 'Zha', 'Zhan', 'Zhang', 'Zhao', 'Zhen', 'Zheng', 'Zhong', 'Zhou', 'Zhu', 'Zhuo', 'Zong', 'Zou', 'Bing', 'Chi', 'Chu', 'Cong', 'Cuan', 'Dan', 'Fei', 'Feng', 'Gai', 'Gao', 'Gou', 'Guan', 'Gui', 'Guo', 'Hong', 'Hou', 'Huan', 'Jian', 'Jiao', 'Jin', 'Jiu', 'Juan', 'Jue', 'Kan', 'Kuai', 'Kuang', 'Kui', 'Lao', 'Liang', 'Lu', 'Luo', 'Man', 'Nao', 'Pian', 'Qiao', 'Qing', 'Qiu', 'Rang', 'Rui', 'She', 'Shi', 'Shuo', 'Sui', 'Tai', 'Wan', 'Wei', 'Xian', 'Xie', 'Xin', 'Xing', 'Xiong', 'Xuan', 'Yan', 'Yin', 'Ying', 'Yuan', 'Yue', 'Yun', 'Zha', 'Zhai', 'Zhang', 'Zhi', 'Zhuan', 'Zhui'] \u6784\u5efa\u4eba\u540d\u7c7b\u522b\uff08\u6240\u5c5e\u7684\u8bed\u8a00\uff09\u5217\u8868\u4e0e\u4eba\u540d\u5bf9\u5e94\u5173\u7cfb\u5b57\u5178: # \u6784\u5efa\u7684category_lines\u5f62\u5982\uff1a{\"English\":[\"Lily\", \"Susan\", \"Kobe\"], \"Chinese\":[\"Zhang San\", \"Xiao Ming\"]} category_lines = {} # all_categories\u5f62\u5982\uff1a [\"English\",...,\"Chinese\"] all_categories = [] # \u8bfb\u53d6\u6307\u5b9a\u8def\u5f84\u4e0b\u7684txt\u6587\u4ef6\uff0c \u4f7f\u7528glob\uff0cpath\u4e2d\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f for filename in glob . glob ( data_path + '*.txt' ): # \u83b7\u53d6\u6bcf\u4e2a\u6587\u4ef6\u7684\u6587\u4ef6\u540d, \u5c31\u662f\u5bf9\u5e94\u7684\u540d\u5b57\u7c7b\u522b category = os . path . splitext ( os . path . basename ( filename ))[ 0 ] # \u5c06\u5176\u9010\u4e00\u88c5\u5230all_categories\u5217\u8868\u4e2d all_categories . append ( category ) # \u7136\u540e\u8bfb\u53d6\u6bcf\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u5f62\u6210\u540d\u5b57\u5217\u8868 lines = readLines ( filename ) # \u6309\u7167\u5bf9\u5e94\u7684\u7c7b\u522b\uff0c\u5c06\u540d\u5b57\u5217\u8868\u5199\u5165\u5230category_lines\u5b57\u5178\u4e2d category_lines [ category ] = lines # \u67e5\u770b\u7c7b\u522b\u603b\u6570 n_categories = len ( all_categories ) print ( \"n_categories:\" , n_categories ) # \u968f\u4fbf\u67e5\u770b\u5176\u4e2d\u7684\u4e00\u4e9b\u5185\u5bb9 print ( category_lines [ 'Italian' ][: 5 ]) \u8f93\u51fa\u6548\u679c: n_categories : 18 [ 'Abandonato' , 'Abatangelo' , 'Abatantuono' , 'Abate' , 'Abategiovanni' ] \u5c06\u4eba\u540d\u8f6c\u5316\u4e3a\u5bf9\u5e94onehot\u5f20\u91cf\u8868\u793a: # \u5c06\u5b57\u7b26\u4e32(\u5355\u8bcd\u7c92\u5ea6)\u8f6c\u5316\u4e3a\u5f20\u91cf\u8868\u793a\uff0c\u5982\uff1a\"ab\" ---> # tensor([[[1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 0., 0., 0., 0., 0., 0.]], # [[0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 0., 0., 0., 0., 0., 0.]]]) def lineToTensor ( line ): \"\"\"\u5c06\u4eba\u540d\u8f6c\u5316\u4e3a\u5bf9\u5e94onehot\u5f20\u91cf\u8868\u793a, \u53c2\u6570line\u662f\u8f93\u5165\u7684\u4eba\u540d\"\"\" # \u9996\u5148\u521d\u59cb\u5316\u4e00\u4e2a0\u5f20\u91cf, \u5b83\u7684\u5f62\u72b6(len(line), 1, n_letters) # \u4ee3\u8868\u4eba\u540d\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u7528\u4e00\u4e2a1 x n_letters\u7684\u5f20\u91cf\u8868\u793a. tensor = torch . zeros ( len ( line ), 1 , n_letters ) # \u904d\u5386\u8fd9\u4e2a\u4eba\u540d\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u7d22\u5f15\u548c\u5b57\u7b26 for li , letter in enumerate ( line ): # \u4f7f\u7528\u5b57\u7b26\u4e32\u65b9\u6cd5find\u627e\u5230\u6bcf\u4e2a\u5b57\u7b26\u5728all_letters\u4e2d\u7684\u7d22\u5f15 # \u5b83\u4e5f\u662f\u6211\u4eec\u751f\u6210onehot\u5f20\u91cf\u4e2d1\u7684\u7d22\u5f15\u4f4d\u7f6e tensor [ li ][ 0 ][ all_letters . find ( letter )] = 1 # \u8fd4\u56de\u7ed3\u679c return tensor \u8c03\u7528: line = \"Bai\" line_tensor = lineToTensor ( line ) print ( \"line_tensot:\" , line_tensor ) \u8f93\u51fa\u6548\u679c: line_tensot : tensor ([[[ 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 1 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 .]], [[ 1 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 .]], [[ 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 1 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 ., 0 .]]]) \u7b2c\u4e09\u6b65: \u6784\u5efaRNN\u6a21\u578b \u6784\u5efa\u4f20\u7edf\u7684RNN\u6a21\u578b: # \u4f7f\u7528nn.RNN\u6784\u5efa\u5b8c\u6210\u4f20\u7edfRNN\u4f7f\u7528\u7c7b class RNN ( nn . Module ): def __init__ ( self , input_size , hidden_size , output_size , num_layers = 1 ): \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u67094\u4e2a\u53c2\u6570, \u5206\u522b\u4ee3\u8868RNN\u8f93\u5165\u6700\u540e\u4e00\u7ef4\u5c3a\u5bf8, RNN\u7684\u9690\u5c42\u6700\u540e\u4e00\u7ef4\u5c3a\u5bf8, RNN\u5c42\u6570\"\"\" super ( RNN , self ) . __init__ () # \u5c06hidden_size\u4e0enum_layers\u4f20\u5165\u5176\u4e2d self . hidden_size = hidden_size self . num_layers = num_layers # \u5b9e\u4f8b\u5316\u9884\u5b9a\u4e49\u7684nn.RNN, \u5b83\u7684\u4e09\u4e2a\u53c2\u6570\u5206\u522b\u662finput_size, hidden_size, num_layers self . rnn = nn . RNN ( input_size , hidden_size , num_layers ) # \u5b9e\u4f8b\u5316nn.Linear, \u8fd9\u4e2a\u7ebf\u6027\u5c42\u7528\u4e8e\u5c06nn.RNN\u7684\u8f93\u51fa\u7ef4\u5ea6\u8f6c\u5316\u4e3a\u6307\u5b9a\u7684\u8f93\u51fa\u7ef4\u5ea6 self . linear = nn . Linear ( hidden_size , output_size ) # \u5b9e\u4f8b\u5316nn\u4e2d\u9884\u5b9a\u7684Softmax\u5c42, \u7528\u4e8e\u4ece\u8f93\u51fa\u5c42\u83b7\u5f97\u7c7b\u522b\u7ed3\u679c self . softmax = nn . LogSoftmax ( dim =- 1 ) def forward ( self , input , hidden ): \"\"\"\u5b8c\u6210\u4f20\u7edfRNN\u4e2d\u7684\u4e3b\u8981\u903b\u8f91, \u8f93\u5165\u53c2\u6570input\u4ee3\u8868\u8f93\u5165\u5f20\u91cf, \u5b83\u7684\u5f62\u72b6\u662f1 x n_letters hidden\u4ee3\u8868RNN\u7684\u9690\u5c42\u5f20\u91cf, \u5b83\u7684\u5f62\u72b6\u662fself.num_layers x 1 x self.hidden_size\"\"\" # \u56e0\u4e3a\u9884\u5b9a\u4e49\u7684nn.RNN\u8981\u6c42\u8f93\u5165\u7ef4\u5ea6\u4e00\u5b9a\u662f\u4e09\u7ef4\u5f20\u91cf, \u56e0\u6b64\u5728\u8fd9\u91cc\u4f7f\u7528unsqueeze(0)\u6269\u5c55\u4e00\u4e2a\u7ef4\u5ea6 input = input . unsqueeze ( 0 ) # \u5c06input\u548chidden\u8f93\u5165\u5230\u4f20\u7edfRNN\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e2d\uff0c\u5982\u679cnum_layers=1, rr\u6052\u7b49\u4e8ehn rr , hn = self . rnn ( input , hidden ) # \u5c06\u4eceRNN\u4e2d\u83b7\u5f97\u7684\u7ed3\u679c\u901a\u8fc7\u7ebf\u6027\u53d8\u6362\u548csoftmax\u8fd4\u56de\uff0c\u540c\u65f6\u8fd4\u56dehn\u4f5c\u4e3a\u540e\u7eedRNN\u7684\u8f93\u5165 return self . softmax ( self . linear ( rr )), hn def initHidden ( self ): \"\"\"\u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf\"\"\" # \u521d\u59cb\u5316\u4e00\u4e2a\uff08self.num_layers, 1, self.hidden_size\uff09\u5f62\u72b6\u76840\u5f20\u91cf return torch . zeros ( self . num_layers , 1 , self . hidden_size ) torch.unsqueeze\u6f14\u793a: >>> x = torch.tensor([1, 2, 3, 4]) >>> torch.unsqueeze(x, 0) tensor([[ 1, 2, 3, 4]]) >>> torch.unsqueeze(x, 1) tensor([[ 1], [ 2], [ 3], [ 4]]) \u6784\u5efaLSTM\u6a21\u578b: # \u4f7f\u7528nn.LSTM\u6784\u5efa\u5b8c\u6210LSTM\u4f7f\u7528\u7c7b class LSTM ( nn . Module ): def __init__ ( self , input_size , hidden_size , output_size , num_layers = 1 ): \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u7684\u53c2\u6570\u4e0e\u4f20\u7edfRNN\u76f8\u540c\"\"\" super ( LSTM , self ) . __init__ () # \u5c06hidden_size\u4e0enum_layers\u4f20\u5165\u5176\u4e2d self . hidden_size = hidden_size self . num_layers = num_layers # \u5b9e\u4f8b\u5316\u9884\u5b9a\u4e49\u7684nn.LSTM self . lstm = nn . LSTM ( input_size , hidden_size , num_layers ) # \u5b9e\u4f8b\u5316nn.Linear, \u8fd9\u4e2a\u7ebf\u6027\u5c42\u7528\u4e8e\u5c06nn.RNN\u7684\u8f93\u51fa\u7ef4\u5ea6\u8f6c\u5316\u4e3a\u6307\u5b9a\u7684\u8f93\u51fa\u7ef4\u5ea6 self . linear = nn . Linear ( hidden_size , output_size ) # \u5b9e\u4f8b\u5316nn\u4e2d\u9884\u5b9a\u7684Softmax\u5c42, \u7528\u4e8e\u4ece\u8f93\u51fa\u5c42\u83b7\u5f97\u7c7b\u522b\u7ed3\u679c self . softmax = nn . LogSoftmax ( dim =- 1 ) def forward ( self , input , hidden , c ): \"\"\"\u5728\u4e3b\u8981\u903b\u8f91\u51fd\u6570\u4e2d\u591a\u51fa\u4e00\u4e2a\u53c2\u6570c, \u4e5f\u5c31\u662fLSTM\u4e2d\u7684\u7ec6\u80de\u72b6\u6001\u5f20\u91cf\"\"\" # \u4f7f\u7528unsqueeze(0)\u6269\u5c55\u4e00\u4e2a\u7ef4\u5ea6 input = input . unsqueeze ( 0 ) # \u5c06input, hidden\u4ee5\u53ca\u521d\u59cb\u5316\u7684c\u4f20\u5165lstm\u4e2d rr , ( hn , c ) = self . lstm ( input , ( hidden , c )) # \u6700\u540e\u8fd4\u56de\u5904\u7406\u540e\u7684rr, hn, c return self . softmax ( self . linear ( rr )), hn , c def initHiddenAndC ( self ): \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u4e0d\u4ec5\u521d\u59cb\u5316hidden\u8fd8\u8981\u521d\u59cb\u5316\u7ec6\u80de\u72b6\u6001c, \u5b83\u4eec\u5f62\u72b6\u76f8\u540c\"\"\" c = hidden = torch . zeros ( self . num_layers , 1 , self . hidden_size ) return hidden , c \u6784\u5efaGRU\u6a21\u578b: # \u4f7f\u7528nn.GRU\u6784\u5efa\u5b8c\u6210\u4f20\u7edfRNN\u4f7f\u7528\u7c7b # GRU\u4e0e\u4f20\u7edfRNN\u7684\u5916\u90e8\u5f62\u5f0f\u76f8\u540c, \u90fd\u662f\u53ea\u4f20\u9012\u9690\u5c42\u5f20\u91cf, \u56e0\u6b64\u53ea\u9700\u8981\u66f4\u6539\u9884\u5b9a\u4e49\u5c42\u7684\u540d\u5b57 class GRU ( nn . Module ): def __init__ ( self , input_size , hidden_size , output_size , num_layers = 1 ): super ( GRU , self ) . __init__ () self . hidden_size = hidden_size self . num_layers = num_layers # \u5b9e\u4f8b\u5316\u9884\u5b9a\u4e49\u7684nn.GRU, \u5b83\u7684\u4e09\u4e2a\u53c2\u6570\u5206\u522b\u662finput_size, hidden_size, num_layers self . gru = nn . GRU ( input_size , hidden_size , num_layers ) self . linear = nn . Linear ( hidden_size , output_size ) self . softmax = nn . LogSoftmax ( dim =- 1 ) def forward ( self , input , hidden ): input = input . unsqueeze ( 0 ) rr , hn = self . gru ( input , hidden ) return self . softmax ( self . linear ( rr )), hn def initHidden ( self ): return torch . zeros ( self . num_layers , 1 , self . hidden_size ) \u5b9e\u4f8b\u5316\u53c2\u6570: # \u56e0\u4e3a\u662fonehot\u7f16\u7801, \u8f93\u5165\u5f20\u91cf\u6700\u540e\u4e00\u7ef4\u7684\u5c3a\u5bf8\u5c31\u662fn_letters input_size = n_letters # \u5b9a\u4e49\u9690\u5c42\u7684\u6700\u540e\u4e00\u7ef4\u5c3a\u5bf8\u5927\u5c0f n_hidden = 128 # \u8f93\u51fa\u5c3a\u5bf8\u4e3a\u8bed\u8a00\u7c7b\u522b\u603b\u6570n_categories output_size = n_categories # num_layer\u4f7f\u7528\u9ed8\u8ba4\u503c, num_layers = 1 \u8f93\u5165\u53c2\u6570: # \u5047\u5982\u6211\u4eec\u4ee5\u4e00\u4e2a\u5b57\u6bcdB\u4f5c\u4e3aRNN\u7684\u9996\u6b21\u8f93\u5165, \u5b83\u901a\u8fc7lineToTensor\u8f6c\u4e3a\u5f20\u91cf # \u56e0\u4e3a\u6211\u4eec\u7684lineToTensor\u8f93\u51fa\u662f\u4e09\u7ef4\u5f20\u91cf, \u800cRNN\u7c7b\u9700\u8981\u7684\u4e8c\u7ef4\u5f20\u91cf # \u56e0\u6b64\u9700\u8981\u4f7f\u7528squeeze(0)\u964d\u4f4e\u4e00\u4e2a\u7ef4\u5ea6 input = lineToTensor ( 'B' ) . squeeze ( 0 ) # \u521d\u59cb\u5316\u4e00\u4e2a\u4e09\u7ef4\u7684\u9690\u5c420\u5f20\u91cf, \u4e5f\u662f\u521d\u59cb\u7684\u7ec6\u80de\u72b6\u6001\u5f20\u91cf hidden = c = torch . zeros ( 1 , 1 , n_hidden ) \u8c03\u7528: rnn = RNN ( n_letters , n_hidden , n_categories ) lstm = LSTM ( n_letters , n_hidden , n_categories ) gru = GRU ( n_letters , n_hidden , n_categories ) rnn_output , next_hidden = rnn ( input , hidden ) print ( \"rnn:\" , rnn_output ) lstm_output , next_hidden , c = lstm ( input , hidden , c ) print ( \"lstm:\" , lstm_output ) gru_output , next_hidden = gru ( input , hidden ) print ( \"gru:\" , gru_output ) \u8f93\u51fa\u6548\u679c: rnn : tensor ([[[- 2.8822 , - 2.8615 , - 2.9488 , - 2.8898 , - 2.9205 , - 2.8113 , - 2.9328 , - 2.8239 , - 2.8678 , - 2.9474 , - 2.8724 , - 2.9703 , - 2.9019 , - 2.8871 , - 2.9340 , - 2.8436 , - 2.8442 , - 2.9047 ]]], grad_fn =< LogSoftmaxBackward >) lstm : tensor ([[[- 2.9427 , - 2.8574 , - 2.9175 , - 2.8492 , - 2.8962 , - 2.9276 , - 2.8500 , - 2.9306 , - 2.8304 , - 2.9559 , - 2.9751 , - 2.8071 , - 2.9138 , - 2.8196 , - 2.8575 , - 2.8416 , - 2.9395 , - 2.9384 ]]], grad_fn =< LogSoftmaxBackward >) gru : tensor ([[[- 2.8042 , - 2.8894 , - 2.8355 , - 2.8951 , - 2.8682 , - 2.9502 , - 2.9056 , - 2.8963 , - 2.8671 , - 2.9109 , - 2.9425 , - 2.8390 , - 2.9229 , - 2.8081 , - 2.8800 , - 2.9561 , - 2.9205 , - 2.9546 ]]], grad_fn =< LogSoftmaxBackward >) \u7b2c\u56db\u6b65: \u6784\u5efa\u8bad\u7ec3\u51fd\u6570\u5e76\u8fdb\u884c\u8bad\u7ec3 \u4ece\u8f93\u51fa\u7ed3\u679c\u4e2d\u83b7\u5f97\u6307\u5b9a\u7c7b\u522b\u51fd\u6570: def categoryFromOutput ( output ): \"\"\"\u4ece\u8f93\u51fa\u7ed3\u679c\u4e2d\u83b7\u5f97\u6307\u5b9a\u7c7b\u522b, \u53c2\u6570\u4e3a\u8f93\u51fa\u5f20\u91cfoutput\"\"\" # \u4ece\u8f93\u51fa\u5f20\u91cf\u4e2d\u8fd4\u56de\u6700\u5927\u7684\u503c\u548c\u7d22\u5f15\u5bf9\u8c61, \u6211\u4eec\u8fd9\u91cc\u4e3b\u8981\u9700\u8981\u8fd9\u4e2a\u7d22\u5f15 top_n , top_i = output . topk ( 1 ) # top_i\u5bf9\u8c61\u4e2d\u53d6\u51fa\u7d22\u5f15\u7684\u503c category_i = top_i [ 0 ] . item () # \u6839\u636e\u7d22\u5f15\u503c\u83b7\u5f97\u5bf9\u5e94\u8bed\u8a00\u7c7b\u522b, \u8fd4\u56de\u8bed\u8a00\u7c7b\u522b\u548c\u7d22\u5f15\u503c return all_categories [ category_i ], category_i torch.topk\u6f14\u793a: >>> x = torch.arange(1., 6.) >>> x tensor([ 1., 2., 3., 4., 5.]) >>> torch.topk(x, 3) torch.return_types.topk(values=tensor([5., 4., 3.]), indices=tensor([4, 3, 2])) \u8f93\u5165\u53c2\u6570: # \u5c06\u4e0a\u4e00\u6b65\u4e2dgru\u7684\u8f93\u51fa\u4f5c\u4e3a\u51fd\u6570\u7684\u8f93\u5165 output = gru_output # tensor([[[-2.8042, -2.8894, -2.8355, -2.8951, -2.8682, -2.9502, -2.9056, # -2.8963, -2.8671, -2.9109, -2.9425, -2.8390, -2.9229, -2.8081, # -2.8800, -2.9561, -2.9205, -2.9546]]], grad_fn=<LogSoftmaxBackward>) \u8c03\u7528: category , category_i = categoryFromOutput ( output ) print ( \"category:\" , category ) print ( \"category_i:\" , category_i ) \u8f93\u51fa\u6548\u679c: category : Portuguese category_i : 13 \u968f\u673a\u751f\u6210\u8bad\u7ec3\u6570\u636e: def randomTrainingExample (): \"\"\"\u8be5\u51fd\u6570\u7528\u4e8e\u968f\u673a\u4ea7\u751f\u8bad\u7ec3\u6570\u636e\"\"\" # \u9996\u5148\u4f7f\u7528random\u7684choice\u65b9\u6cd5\u4eceall_categories\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u7c7b\u522b category = random . choice ( all_categories ) # \u7136\u540e\u5728\u901a\u8fc7category_lines\u5b57\u5178\u53d6category\u7c7b\u522b\u5bf9\u5e94\u7684\u540d\u5b57\u5217\u8868 # \u4e4b\u540e\u518d\u4ece\u5217\u8868\u4e2d\u968f\u673a\u53d6\u4e00\u4e2a\u540d\u5b57 line = random . choice ( category_lines [ category ]) # \u63a5\u7740\u5c06\u8fd9\u4e2a\u7c7b\u522b\u5728\u6240\u6709\u7c7b\u522b\u5217\u8868\u4e2d\u7684\u7d22\u5f15\u5c01\u88c5\u6210tensor, \u5f97\u5230\u7c7b\u522b\u5f20\u91cfcategory_tensor category_tensor = torch . tensor ([ all_categories . index ( category )], dtype = torch . long ) # \u6700\u540e, \u5c06\u968f\u673a\u53d6\u5230\u7684\u540d\u5b57\u901a\u8fc7\u51fd\u6570lineToTensor\u8f6c\u5316\u4e3aonehot\u5f20\u91cf\u8868\u793a line_tensor = lineToTensor ( line ) return category , line , category_tensor , line_tensor \u8c03\u7528: # \u6211\u4eec\u968f\u673a\u53d6\u51fa\u5341\u4e2a\u8fdb\u884c\u7ed3\u679c\u67e5\u770b for i in range ( 10 ): category , line , category_tensor , line_tensor = randomTrainingExample () print ( 'category =' , category , '/ line =' , line , '/ category_tensor =' , category_tensor ) \u8f93\u51fa\u6548\u679c: category = French / line = Fontaine / category_tensor = tensor ([ 5 ]) category = Italian / line = Grimaldi / category_tensor = tensor ([ 9 ]) category = Chinese / line = Zha / category_tensor = tensor ([ 1 ]) category = Italian / line = Rapallino / category_tensor = tensor ([ 9 ]) category = Czech / line = Sherak / category_tensor = tensor ([ 2 ]) category = Arabic / line = Najjar / category_tensor = tensor ([ 0 ]) category = Scottish / line = Brown / category_tensor = tensor ([ 15 ]) category = Arabic / line = Sarraf / category_tensor = tensor ([ 0 ]) category = Japanese / line = Ibi / category_tensor = tensor ([ 10 ]) category = Chinese / line = Zha / category_tensor = tensor ([ 1 ]) \u6784\u5efa\u4f20\u7edfRNN\u8bad\u7ec3\u51fd\u6570: # \u5b9a\u4e49\u635f\u5931\u51fd\u6570\u4e3ann.NLLLoss\uff0c\u56e0\u4e3aRNN\u7684\u6700\u540e\u4e00\u5c42\u662fnn.LogSoftmax, \u4e24\u8005\u7684\u5185\u90e8\u8ba1\u7b97\u903b\u8f91\u6b63\u597d\u80fd\u591f\u543b\u5408. criterion = nn . NLLLoss () # \u8bbe\u7f6e\u5b66\u4e60\u7387\u4e3a0.005 learning_rate = 0.005 def trainRNN ( category_tensor , line_tensor ): \"\"\"\u5b9a\u4e49\u8bad\u7ec3\u51fd\u6570, \u5b83\u7684\u4e24\u4e2a\u53c2\u6570\u662fcategory_tensor\u7c7b\u522b\u7684\u5f20\u91cf\u8868\u793a, \u76f8\u5f53\u4e8e\u8bad\u7ec3\u6570\u636e\u7684\u6807\u7b7e, line_tensor\u540d\u5b57\u7684\u5f20\u91cf\u8868\u793a, \u76f8\u5f53\u4e8e\u5bf9\u5e94\u8bad\u7ec3\u6570\u636e\"\"\" # \u5728\u51fd\u6570\u4e2d, \u9996\u5148\u901a\u8fc7\u5b9e\u4f8b\u5316\u5bf9\u8c61rnn\u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf hidden = rnn . initHidden () # \u7136\u540e\u5c06\u6a21\u578b\u7ed3\u6784\u4e2d\u7684\u68af\u5ea6\u5f520 rnn . zero_grad () # \u4e0b\u9762\u5f00\u59cb\u8fdb\u884c\u8bad\u7ec3, \u5c06\u8bad\u7ec3\u6570\u636eline_tensor\u7684\u6bcf\u4e2a\u5b57\u7b26\u9010\u4e2a\u4f20\u5165rnn\u4e4b\u4e2d, \u5f97\u5230\u6700\u7ec8\u7ed3\u679c for i in range ( line_tensor . size ()[ 0 ]): output , hidden = rnn ( line_tensor [ i ], hidden ) # \u56e0\u4e3a\u6211\u4eec\u7684rnn\u5bf9\u8c61\u7531nn.RNN\u5b9e\u4f8b\u5316\u5f97\u5230, \u6700\u7ec8\u8f93\u51fa\u5f62\u72b6\u662f\u4e09\u7ef4\u5f20\u91cf, \u4e3a\u4e86\u6ee1\u8db3\u4e8ecategory_tensor # \u8fdb\u884c\u5bf9\u6bd4\u8ba1\u7b97\u635f\u5931, \u9700\u8981\u51cf\u5c11\u7b2c\u4e00\u4e2a\u7ef4\u5ea6, \u8fd9\u91cc\u4f7f\u7528squeeze()\u65b9\u6cd5 loss = criterion ( output . squeeze ( 0 ), category_tensor ) # \u635f\u5931\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u66f4\u65b0\u6a21\u578b\u4e2d\u6240\u6709\u7684\u53c2\u6570 for p in rnn . parameters (): # \u5c06\u53c2\u6570\u7684\u5f20\u91cf\u8868\u793a\u4e0e\u53c2\u6570\u7684\u68af\u5ea6\u4e58\u4ee5\u5b66\u4e60\u7387\u7684\u7ed3\u679c\u76f8\u52a0\u4ee5\u6b64\u6765\u66f4\u65b0\u53c2\u6570 p . data . add_ ( - learning_rate , p . grad . data ) # \u8fd4\u56de\u7ed3\u679c\u548c\u635f\u5931\u7684\u503c return output , loss . item () torch.add\u6f14\u793a: >>> a = torch.randn(4) >>> a tensor([-0.9732, -0.3497, 0.6245, 0.4022]) >>> b = torch.randn(4, 1) >>> b tensor([[ 0.3743], [-1.7724], [-0.5811], [-0.8017]]) >>> torch.add(a, b, alpha=10) tensor([[ 2.7695, 3.3930, 4.3672, 4.1450], [-18.6971, -18.0736, -17.0994, -17.3216], [ -6.7845, -6.1610, -5.1868, -5.4090], [ -8.9902, -8.3667, -7.3925, -7.6147]]) \u6784\u5efaLSTM\u8bad\u7ec3\u51fd\u6570: # \u4e0e\u4f20\u7edfRNN\u76f8\u6bd4\u591a\u51fa\u7ec6\u80de\u72b6\u6001c def trainLSTM ( category_tensor , line_tensor ): hidden , c = lstm . initHiddenAndC () lstm . zero_grad () for i in range ( line_tensor . size ()[ 0 ]): # \u8fd4\u56deoutput, hidden\u4ee5\u53ca\u7ec6\u80de\u72b6\u6001c output , hidden , c = lstm ( line_tensor [ i ], hidden , c ) loss = criterion ( output . squeeze ( 0 ), category_tensor ) loss . backward () for p in lstm . parameters (): p . data . add_ ( - learning_rate , p . grad . data ) return output , loss . item () \u6784\u5efaGRU\u8bad\u7ec3\u51fd\u6570: # \u4e0e\u4f20\u7edfRNN\u5b8c\u5168\u76f8\u540c, \u53ea\u4e0d\u8fc7\u540d\u5b57\u6539\u6210\u4e86GRU def trainGRU ( category_tensor , line_tensor ): hidden = gru . initHidden () gru . zero_grad () for i in range ( line_tensor . size ()[ 0 ]): output , hidden = gru ( line_tensor [ i ], hidden ) loss = criterion ( output . squeeze ( 0 ), category_tensor ) loss . backward () for p in gru . parameters (): p . data . add_ ( - learning_rate , p . grad . data ) return output , loss . item () \u6784\u5efa\u65f6\u95f4\u8ba1\u7b97\u51fd\u6570: def timeSince ( since ): \"\u83b7\u5f97\u6bcf\u6b21\u6253\u5370\u7684\u8bad\u7ec3\u8017\u65f6, since\u662f\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\" # \u83b7\u5f97\u5f53\u524d\u65f6\u95f4 now = time . time () # \u83b7\u5f97\u65f6\u95f4\u5dee\uff0c\u5c31\u662f\u8bad\u7ec3\u8017\u65f6 s = now - since # \u5c06\u79d2\u8f6c\u5316\u4e3a\u5206\u949f, \u5e76\u53d6\u6574 m = math . floor ( s / 60 ) # \u8ba1\u7b97\u5269\u4e0b\u4e0d\u591f\u51d1\u62101\u5206\u949f\u7684\u79d2\u6570 s -= m * 60 # \u8fd4\u56de\u6307\u5b9a\u683c\u5f0f\u7684\u8017\u65f6 return ' %d m %d s' % ( m , s ) \u8f93\u5165\u53c2\u6570: # \u5047\u5b9a\u6a21\u578b\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\u662f10min\u4e4b\u524d since = time . time () - 10 * 60 \u8c03\u7528: period = timeSince ( since ) print ( period ) \u8f93\u51fa\u6548\u679c: 10 m 0 s \u6784\u5efa\u8bad\u7ec3\u8fc7\u7a0b\u7684\u65e5\u5fd7\u6253\u5370\u51fd\u6570: # \u8bbe\u7f6e\u8bad\u7ec3\u8fed\u4ee3\u6b21\u6570 n_iters = 1000 # \u8bbe\u7f6e\u7ed3\u679c\u7684\u6253\u5370\u95f4\u9694 print_every = 50 # \u8bbe\u7f6e\u7ed8\u5236\u635f\u5931\u66f2\u7ebf\u4e0a\u7684\u5236\u56fe\u95f4\u9694 plot_every = 10 def train ( train_type_fn ): \"\"\"\u8bad\u7ec3\u8fc7\u7a0b\u7684\u65e5\u5fd7\u6253\u5370\u51fd\u6570, \u53c2\u6570train_type_fn\u4ee3\u8868\u9009\u62e9\u54ea\u79cd\u6a21\u578b\u8bad\u7ec3\u51fd\u6570, \u5982trainRNN\"\"\" # \u6bcf\u4e2a\u5236\u56fe\u95f4\u9694\u635f\u5931\u4fdd\u5b58\u5217\u8868 all_losses = [] # \u83b7\u5f97\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\u6233 start = time . time () # \u8bbe\u7f6e\u521d\u59cb\u95f4\u9694\u635f\u5931\u4e3a0 current_loss = 0 # \u4ece1\u5f00\u59cb\u8fdb\u884c\u8bad\u7ec3\u8fed\u4ee3, \u5171n_iters\u6b21 for iter in range ( 1 , n_iters + 1 ): # \u901a\u8fc7randomTrainingExample\u51fd\u6570\u968f\u673a\u83b7\u53d6\u4e00\u7ec4\u8bad\u7ec3\u6570\u636e\u548c\u5bf9\u5e94\u7684\u7c7b\u522b category , line , category_tensor , line_tensor = randomTrainingExample () # \u5c06\u8bad\u7ec3\u6570\u636e\u548c\u5bf9\u5e94\u7c7b\u522b\u7684\u5f20\u91cf\u8868\u793a\u4f20\u5165\u5230train\u51fd\u6570\u4e2d output , loss = train_type_fn ( category_tensor , line_tensor ) # \u8ba1\u7b97\u5236\u56fe\u95f4\u9694\u4e2d\u7684\u603b\u635f\u5931 current_loss += loss # \u5982\u679c\u8fed\u4ee3\u6570\u80fd\u591f\u6574\u9664\u6253\u5370\u95f4\u9694 if iter % print_every == 0 : # \u53d6\u8be5\u8fed\u4ee3\u6b65\u4e0a\u7684output\u901a\u8fc7categoryFromOutput\u51fd\u6570\u83b7\u5f97\u5bf9\u5e94\u7684\u7c7b\u522b\u548c\u7c7b\u522b\u7d22\u5f15 guess , guess_i = categoryFromOutput ( output ) # \u7136\u540e\u548c\u771f\u5b9e\u7684\u7c7b\u522bcategory\u505a\u6bd4\u8f83, \u5982\u679c\u76f8\u540c\u5219\u6253\u5bf9\u53f7, \u5426\u5219\u6253\u53c9\u53f7. correct = '\u2713' if guess == category else '\u2717 ( %s )' % category # \u6253\u5370\u8fed\u4ee3\u6b65, \u8fed\u4ee3\u6b65\u767e\u5206\u6bd4, \u5f53\u524d\u8bad\u7ec3\u8017\u65f6, \u635f\u5931, \u8be5\u6b65\u9884\u6d4b\u7684\u540d\u5b57, \u4ee5\u53ca\u662f\u5426\u6b63\u786e print ( ' %d %d%% ( %s ) %.4f %s / %s %s ' % ( iter , iter / n_iters * 100 , timeSince ( start ), loss , line , guess , correct )) # \u5982\u679c\u8fed\u4ee3\u6570\u80fd\u591f\u6574\u9664\u5236\u56fe\u95f4\u9694 if iter % plot_every == 0 : # \u5c06\u4fdd\u5b58\u8be5\u95f4\u9694\u4e2d\u7684\u5e73\u5747\u635f\u5931\u5230all_losses\u5217\u8868\u4e2d all_losses . append ( current_loss / plot_every ) # \u95f4\u9694\u635f\u5931\u91cd\u7f6e\u4e3a0 current_loss = 0 # \u8fd4\u56de\u5bf9\u5e94\u7684\u603b\u635f\u5931\u5217\u8868\u548c\u8bad\u7ec3\u8017\u65f6 return all_losses , int ( time . time () - start ) \u5f00\u59cb\u8bad\u7ec3\u4f20\u7edfRNN, LSTM, GRU\u6a21\u578b\u5e76\u5236\u4f5c\u5bf9\u6bd4\u56fe: # \u8c03\u7528train\u51fd\u6570, \u5206\u522b\u8fdb\u884cRNN, LSTM, GRU\u6a21\u578b\u7684\u8bad\u7ec3 # \u5e76\u8fd4\u56de\u5404\u81ea\u7684\u5168\u90e8\u635f\u5931, \u4ee5\u53ca\u8bad\u7ec3\u8017\u65f6\u7528\u4e8e\u5236\u56fe all_losses1 , period1 = train ( trainRNN ) all_losses2 , period2 = train ( trainLSTM ) all_losses3 , period3 = train ( trainGRU ) # \u7ed8\u5236\u635f\u5931\u5bf9\u6bd4\u66f2\u7ebf, \u8bad\u7ec3\u8017\u65f6\u5bf9\u6bd4\u67f1\u5f20\u56fe # \u521b\u5efa\u753b\u5e030 plt . figure ( 0 ) # \u7ed8\u5236\u635f\u5931\u5bf9\u6bd4\u66f2\u7ebf plt . plot ( all_losses1 , label = \"RNN\" ) plt . plot ( all_losses2 , color = \"red\" , label = \"LSTM\" ) plt . plot ( all_losses3 , color = \"orange\" , label = \"GRU\" ) plt . legend ( loc = 'upper left' ) # \u521b\u5efa\u753b\u5e031 plt . figure ( 1 ) x_data = [ \"RNN\" , \"LSTM\" , \"GRU\" ] y_data = [ period1 , period2 , period3 ] # \u7ed8\u5236\u8bad\u7ec3\u8017\u65f6\u5bf9\u6bd4\u67f1\u72b6\u56fe plt . bar ( range ( len ( x_data )), y_data , tick_label = x_data ) \u4f20\u7edfRNN\u8bad\u7ec3\u65e5\u5fd7\u8f93\u51fa: 5000 5 % ( 0 m 16 s ) 3.2264 Carr / Chinese \u2717 ( English ) 10000 10 % ( 0 m 30 s ) 1.2063 Biondi / Italian \u2713 15000 15 % ( 0 m 47 s ) 1.4010 Palmeiro / Italian \u2717 ( Portuguese ) 20000 20 % ( 1 m 0 s ) 3.8165 Konae / Fre nch \u2717 ( Japanese ) 25000 25 % ( 1 m 17 s ) 0.5420 Koo / Korean \u2713 30000 30 % ( 1 m 31 s ) 5.6180 Fergus / Portuguese \u2717 ( Irish ) 35000 35 % ( 1 m 45 s ) 0.6073 Meeuwessen / Dutch \u2713 40000 40 % ( 1 m 59 s ) 2.1356 Olan / Irish \u2717 ( English ) 45000 45 % ( 2 m 13 s ) 0.3352 Romijnders / Dutch \u2713 50000 50 % ( 2 m 26 s ) 1.1624 Flanagan / Irish \u2713 55000 55 % ( 2 m 40 s ) 0.4743 Dubhshlaine / Irish \u2713 60000 60 % ( 2 m 54 s ) 2.7260 Lee / Chinese \u2717 ( Korean ) 65000 65 % ( 3 m 8 s ) 1.2075 Rutherford / English \u2713 70000 70 % ( 3 m 23 s ) 3.6317 Han / Chinese \u2717 ( Vietnamese ) 75000 75 % ( 3 m 37 s ) 0.1779 Accorso / Italian \u2713 80000 80 % ( 3 m 52 s ) 0.1095 O ' Brien / Irish \u2713 85000 85 % ( 4 m 6 s ) 2.3845 Moran / Irish \u2717 ( English ) 90000 90 % ( 4 m 21 s ) 0.3871 Xuan / Chinese \u2713 95000 95 % ( 4 m 36 s ) 0.1104 Inoguchi / Japanese \u2713 100000 100 % ( 4 m 52 s ) 4.2142 Simon / Fre nch \u2713 ( Irish ) LSTM\u8bad\u7ec3\u65e5\u5fd7\u8f93\u51fa: 5000 5 % ( 0 m 25 s ) 2.8640 Fabian / Dutch \u2717 ( Polish ) 10000 10 % ( 0 m 48 s ) 2.9079 Log in / Russian \u2717 ( Irish ) 15000 15 % ( 1 m 14 s ) 2.8223 Fernandes / Greek \u2717 ( Portuguese ) 20000 20 % ( 1 m 40 s ) 2.7069 Hudecek / Polish \u2717 ( Czech ) 25000 25 % ( 2 m 4 s ) 2.6162 Acciaio / Czech \u2717 ( Italian ) 30000 30 % ( 2 m 27 s ) 2.4044 Magalhaes / Greek \u2717 ( Portuguese ) 35000 35 % ( 2 m 52 s ) 1.3030 Antoschenko / Russian \u2713 40000 40 % ( 3 m 18 s ) 0.8912 Xing / Chinese \u2713 45000 45 % ( 3 m 42 s ) 1.1788 Numata / Japanese \u2713 50000 50 % ( 4 m 7 s ) 2.2863 Baz / Vietnamese \u2717 ( Arabic ) 55000 55 % ( 4 m 32 s ) 3.2549 Close / Dutch \u2717 ( Greek ) 60000 60 % ( 4 m 54 s ) 4.5170 Pan / Vietnamese \u2717 ( Fre nch ) 65000 65 % ( 5 m 16 s ) 1.1503 San / Chinese \u2717 ( Korean ) 70000 70 % ( 5 m 39 s ) 1.2357 Pavlik / Polish \u2717 ( Czech ) 75000 75 % ( 6 m 2 s ) 2.3275 Alves / Portuguese \u2717 ( English ) 80000 80 % ( 6 m 28 s ) 2.3294 Plamondon / Scottish \u2717 ( Fre nch ) 85000 85 % ( 6 m 54 s ) 2.7794 Water / Fre nch \u2717 ( English ) 90000 90 % ( 7 m 18 s ) 0.8021 Pereira / Portuguese \u2713 95000 95 % ( 7 m 43 s ) 1.4374 Kunkel / German \u2713 100000 100 % ( 8 m 5 s ) 1.2792 Taylor / Scottish \u2713 GRU\u8bad\u7ec3\u65e5\u5fd7\u8f93\u51fa: 5000 5 % ( 0 m 22 s ) 2.8182 Bernard / Irish \u2717 ( Polish ) 10000 10 % ( 0 m 48 s ) 2.8966 Macias / Greek \u2717 ( Spanish ) 15000 15 % ( 1 m 13 s ) 3.1046 Morcos / Greek \u2717 ( Arabic ) 20000 20 % ( 1 m 37 s ) 1.5359 Davlatov / Russian \u2713 25000 25 % ( 2 m 1 s ) 1.0999 Han / Vietnamese \u2713 30000 30 % ( 2 m 26 s ) 4.1017 Chepel / German \u2717 ( Russian ) 35000 35 % ( 2 m 49 s ) 1.8765 Klein / Scottish \u2717 ( English ) 40000 40 % ( 3 m 11 s ) 1.1265 an / Chinese \u2717 ( Vietnamese ) 45000 45 % ( 3 m 34 s ) 0.3511 Slusarski / Polish \u2713 50000 50 % ( 3 m 59 s ) 0.9694 Than / Vietnamese \u2713 55000 55 % ( 4 m 25 s ) 2.3576 Bokhoven / Russian \u2717 ( Dutch ) 60000 60 % ( 4 m 51 s ) 0.1344 Filipowski / Polish \u2713 65000 65 % ( 5 m 15 s ) 1.4070 Reuter / German \u2713 70000 70 % ( 5 m 37 s ) 1.8409 Guillory / Irish \u2717 ( Fre nch ) 75000 75 % ( 6 m 0 s ) 0.6882 Song / Korean \u2713 80000 80 % ( 6 m 22 s ) 5.0092 Maly / Scottish \u2717 ( Polish ) 85000 85 % ( 6 m 43 s ) 2.4570 Sai / Chinese \u2717 ( Vietnamese ) 90000 90 % ( 7 m 5 s ) 1.2006 Heel / German \u2717 ( Dutch ) 95000 95 % ( 7 m 27 s ) 0.9144 Doan / Vietnamese \u2713 100000 100 % ( 7 m 50 s ) 1.1320 Crespo / Portuguese \u2713 \u635f\u5931\u5bf9\u6bd4\u66f2\u7ebf: \u635f\u5931\u5bf9\u6bd4\u66f2\u7ebf\u5206\u6790: \u6a21\u578b\u8bad\u7ec3\u7684\u635f\u5931\u964d\u4f4e\u5feb\u6162\u4ee3\u8868\u6a21\u578b\u6536\u655b\u7a0b\u5ea6, \u7531\u56fe\u53ef\u77e5, \u4f20\u7edfRNN\u7684\u6a21\u578b\u6536\u655b\u60c5\u51b5\u6700\u597d, \u7136\u540e\u662fGRU, \u6700\u540e\u662fLSTM, \u8fd9\u662f\u56e0\u4e3a: \u6211\u4eec\u5f53\u524d\u5904\u7406\u7684\u6587\u672c\u6570\u636e\u662f\u4eba\u540d, \u4ed6\u4eec\u7684\u957f\u5ea6\u6709\u9650, \u4e14\u957f\u8ddd\u79bb\u5b57\u6bcd\u95f4\u57fa\u672c\u65e0\u7279\u5b9a\u5173\u8054, \u56e0\u6b64\u65e0\u6cd5\u53d1\u6325\u6539\u8fdb\u6a21\u578bLSTM\u548cGRU\u7684\u957f\u8ddd\u79bb\u6355\u6349\u8bed\u4e49\u5173\u8054\u7684\u4f18\u52bf. \u6240\u4ee5\u5728\u4ee5\u540e\u7684\u6a21\u578b\u9009\u7528\u65f6, \u8981\u901a\u8fc7\u5bf9\u4efb\u52a1\u7684\u5206\u6790\u4ee5\u53ca\u5b9e\u9a8c\u5bf9\u6bd4, \u9009\u62e9\u6700\u9002\u5408\u7684\u6a21\u578b. \u8bad\u7ec3\u8017\u65f6\u5bf9\u6bd4\u56fe: \u8bad\u7ec3\u8017\u65f6\u5bf9\u6bd4\u56fe\u5206\u6790: \u6a21\u578b\u8bad\u7ec3\u7684\u8017\u65f6\u957f\u77ed\u4ee3\u8868\u6a21\u578b\u7684\u8ba1\u7b97\u590d\u6742\u5ea6, \u7531\u56fe\u53ef\u77e5, \u4e5f\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u7684\u7406\u8bba\u5206\u6790, \u4f20\u7edfRNN\u590d\u6742\u5ea6\u6700\u4f4e, \u8017\u65f6\u51e0\u4e4e\u53ea\u662f\u540e\u4e24\u8005\u7684\u4e00\u534a, \u7136\u540e\u662fGRU, \u6700\u540e\u662f\u590d\u6742\u5ea6\u6700\u9ad8\u7684LSTM. \u7ed3\u8bba: \u6a21\u578b\u9009\u7528\u4e00\u822c\u5e94\u901a\u8fc7\u5b9e\u9a8c\u5bf9\u6bd4, \u5e76\u975e\u8d8a\u590d\u6742\u6216\u8d8a\u5148\u8fdb\u7684\u6a21\u578b\u8868\u73b0\u8d8a\u597d, \u800c\u662f\u9700\u8981\u7ed3\u5408\u81ea\u5df1\u7684\u7279\u5b9a\u4efb\u52a1, \u4ece\u5bf9\u6570\u636e\u7684\u5206\u6790\u548c\u5b9e\u9a8c\u7ed3\u679c\u4e2d\u83b7\u5f97\u6700\u4f73\u7b54\u6848. \u7b2c\u4e94\u6b65: \u6784\u5efa\u8bc4\u4f30\u51fd\u6570\u5e76\u8fdb\u884c\u9884\u6d4b \u6784\u5efa\u4f20\u7edfRNN\u8bc4\u4f30\u51fd\u6570: def evaluateRNN ( line_tensor ) : \"\"\"\u8bc4\u4f30\u51fd\u6570, \u548c\u8bad\u7ec3\u51fd\u6570\u903b\u8f91\u76f8\u540c, \u53c2\u6570\u662fline_tensor\u4ee3\u8868\u540d\u5b57\u7684\u5f20\u91cf\u8868\u793a\"\"\" # \u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf hidden = rnn . initHidden () # \u5c06\u8bc4\u4f30\u6570\u636eline_tensor\u7684\u6bcf\u4e2a\u5b57\u7b26\u9010\u4e2a\u4f20\u5165rnn\u4e4b\u4e2d for i in range ( line_tensor . size () [ 0 ] ) : output , hidden = rnn ( line_tensor [ i ] , hidden ) # \u83b7\u5f97\u8f93\u51fa\u7ed3\u679c return output . squeeze ( 0 ) \u6784\u5efaLSTM\u8bc4\u4f30\u51fd\u6570: def evaluateLSTM ( line_tensor ): # \u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf\u548c\u7ec6\u80de\u72b6\u6001\u5f20\u91cf hidden , c = lstm . initHiddenAndC () # \u5c06\u8bc4\u4f30\u6570\u636eline_tensor\u7684\u6bcf\u4e2a\u5b57\u7b26\u9010\u4e2a\u4f20\u5165lstm\u4e4b\u4e2d for i in range ( line_tensor . size ()[ 0 ]): output , hidden , c = lstm ( line_tensor [ i ], hidden , c ) return output . squeeze ( 0 ) \u6784\u5efaGRU\u8bc4\u4f30\u51fd\u6570: def evaluateGRU ( line_tensor ): hidden = gru . initHidden () # \u5c06\u8bc4\u4f30\u6570\u636eline_tensor\u7684\u6bcf\u4e2a\u5b57\u7b26\u9010\u4e2a\u4f20\u5165gru\u4e4b\u4e2d for i in range ( line_tensor . size ()[ 0 ]): output , hidden = gru ( line_tensor [ i ], hidden ) return output . squeeze ( 0 ) \u8f93\u5165\u53c2\u6570: line = \"Bai\" line_tensor = lineToTensor ( line ) \u8c03\u7528: rnn_output = evaluateRNN ( line_tensor ) lstm_output = evaluateLSTM ( line_tensor ) gru_output = evaluateGRU ( line_tensor ) print ( \"rnn_output:\" , rnn_output ) print ( \"gru_output:\" , lstm_output ) print ( \"gru_output:\" , gru_output ) \u8f93\u51fa\u6548\u679c: rnn_output : tensor ([[- 2.8923 , - 2.7665 , - 2.8640 , - 2.7907 , - 2.9919 , - 2.9482 , - 2.8809 , - 2.9526 , - 2.9445 , - 2.8115 , - 2.9544 , - 2.9043 , - 2.8016 , - 2.8668 , - 3.0484 , - 2.9382 , - 2.9935 , - 2.7393 ]], grad_fn =< SqueezeBackward1 >) gru_output : tensor ([[- 2.9498 , - 2.9455 , - 2.8981 , - 2.7791 , - 2.8915 , - 2.8534 , - 2.8637 , - 2.8902 , - 2.9537 , - 2.8834 , - 2.8973 , - 2.9711 , - 2.8622 , - 2.9001 , - 2.9149 , - 2.8762 , - 2.8286 , - 2.8866 ]], grad_fn =< SqueezeBackward1 >) gru_output : tensor ([[- 2.8781 , - 2.9347 , - 2.7355 , - 2.9662 , - 2.9404 , - 2.9600 , - 2.8810 , - 2.8000 , - 2.8151 , - 2.9132 , - 2.7564 , - 2.8849 , - 2.9814 , - 3.0499 , - 2.9153 , - 2.8190 , - 2.8841 , - 2.9706 ]], grad_fn =< SqueezeBackward1 >) \u6784\u5efa\u9884\u6d4b\u51fd\u6570: def predict ( input_line , evaluate , n_predictions = 3 ): \"\"\"\u9884\u6d4b\u51fd\u6570, \u8f93\u5165\u53c2\u6570input_line\u4ee3\u8868\u8f93\u5165\u7684\u540d\u5b57, n_predictions\u4ee3\u8868\u9700\u8981\u53d6\u6700\u6709\u53ef\u80fd\u7684top\u4e2a\"\"\" # \u9996\u5148\u6253\u5370\u8f93\u5165 print ( ' \\n > %s ' % input_line ) # \u4ee5\u4e0b\u64cd\u4f5c\u7684\u76f8\u5173\u5f20\u91cf\u4e0d\u8fdb\u884c\u6c42\u68af\u5ea6 with torch . no_grad (): # \u4f7f\u8f93\u5165\u7684\u540d\u5b57\u8f6c\u6362\u4e3a\u5f20\u91cf\u8868\u793a, \u5e76\u4f7f\u7528evaluate\u51fd\u6570\u83b7\u5f97\u9884\u6d4b\u8f93\u51fa output = evaluate ( lineToTensor ( input_line )) # \u4ece\u9884\u6d4b\u7684\u8f93\u51fa\u4e2d\u53d6\u524d3\u4e2a\u6700\u5927\u7684\u503c\u53ca\u5176\u7d22\u5f15 topv , topi = output . topk ( n_predictions , 1 , True ) # \u521b\u5efa\u76db\u88c5\u7ed3\u679c\u7684\u5217\u8868 predictions = [] # \u904d\u5386n_predictions for i in range ( n_predictions ): # \u4ecetopv\u4e2d\u53d6\u51fa\u7684output\u503c value = topv [ 0 ][ i ] . item () # \u53d6\u51fa\u7d22\u5f15\u5e76\u627e\u5230\u5bf9\u5e94\u7684\u7c7b\u522b category_index = topi [ 0 ][ i ] . item () # \u6253\u5370ouput\u7684\u503c, \u548c\u5bf9\u5e94\u7684\u7c7b\u522b print ( '( %.2f ) %s ' % ( value , all_categories [ category_index ])) # \u5c06\u7ed3\u679c\u88c5\u8fdbpredictions\u4e2d predictions . append ([ value , all_categories [ category_index ]]) \u8c03\u7528: for evaluate_fn in [ evaluateRNN , evaluateLSTM , evaluateGRU ]: print ( \"-\" * 18 ) predict ( 'Dovesky' , evaluate_fn ) predict ( 'Jackson' , evaluate_fn ) predict ( 'Satoshi' , evaluate_fn ) \u8f93\u51fa\u6548\u679c ------------------ > Dovesky (-0.58) Russian (-1.40) Czech (-2.52) Scottish > Jackson (-0.27) Scottish (-1.71) English (-4.14) French > Satoshi (-0.02) Japanese (-5.10) Polish (-5.42) Arabic ------------------ > Dovesky (-1.03) Russian (-1.12) Czech (-2.22) Polish > Jackson (-0.37) Scottish (-2.17) English (-2.81) Czech > Satoshi (-0.29) Japanese (-1.90) Arabic (-3.20) Polish ------------------ > Dovesky (-0.44) Russian (-1.55) Czech (-3.06) Polish > Jackson (-0.39) Scottish (-1.91) English (-3.10) Polish > Satoshi (-0.43) Japanese (-1.22) Arabic (-3.85) Italian \u5c0f\u8282\u603b\u7ed3: \u5b66\u4e60\u4e86\u5173\u4e8e\u4eba\u540d\u5206\u7c7b\u95ee\u9898: \u4ee5\u4e00\u4e2a\u4eba\u540d\u4e3a\u8f93\u5165, \u4f7f\u7528\u6a21\u578b\u5e2e\u52a9\u6211\u4eec\u5224\u65ad\u5b83\u6700\u6709\u53ef\u80fd\u662f\u6765\u81ea\u54ea\u4e00\u4e2a\u56fd\u5bb6\u7684\u4eba\u540d, \u8fd9\u5728\u67d0\u4e9b\u56fd\u9645\u5316\u516c\u53f8\u7684\u4e1a\u52a1\u4e2d\u5177\u6709\u91cd\u8981\u610f\u4e49, \u5728\u7528\u6237\u6ce8\u518c\u8fc7\u7a0b\u4e2d, \u4f1a\u6839\u636e\u7528\u6237\u586b\u5199\u7684\u540d\u5b57\u76f4\u63a5\u7ed9\u4ed6\u5206\u914d\u53ef\u80fd\u7684\u56fd\u5bb6\u6216\u5730\u533a\u9009\u9879, \u4ee5\u53ca\u8be5\u56fd\u5bb6\u6216\u5730\u533a\u7684\u56fd\u65d7, \u9650\u5236\u624b\u673a\u53f7\u7801\u4f4d\u6570\u7b49\u7b49. \u4eba\u540d\u5206\u7c7b\u5668\u7684\u5b9e\u73b0\u53ef\u5206\u4e3a\u4ee5\u4e0b\u4e94\u4e2a\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305. \u7b2c\u4e8c\u6b65: \u5bf9data\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u6ee1\u8db3\u8bad\u7ec3\u8981\u6c42. \u7b2c\u4e09\u6b65: \u6784\u5efaRNN\u6a21\u578b(\u5305\u62ec\u4f20\u7edfRNN, LSTM\u4ee5\u53caGRU). \u7b2c\u56db\u6b65: \u6784\u5efa\u8bad\u7ec3\u51fd\u6570\u5e76\u8fdb\u884c\u8bad\u7ec3. \u7b2c\u4e94\u6b65: \u6784\u5efa\u8bc4\u4f30\u51fd\u6570\u5e76\u8fdb\u884c\u9884\u6d4b. \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 python\u7248\u672c\u4f7f\u75283.6.x, pytorch\u7248\u672c\u4f7f\u75281.3.1 \u7b2c\u4e8c\u6b65: \u5bf9data\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u6ee1\u8db3\u8bad\u7ec3\u8981\u6c42 \u5b9a\u4e49\u6570\u636e\u96c6\u8def\u5f84\u5e76\u83b7\u53d6\u5e38\u7528\u7684\u5b57\u7b26\u6570\u91cf. \u5b57\u7b26\u89c4\u8303\u5316\u4e4bunicode\u8f6cAscii\u51fd\u6570unicodeToAscii. \u6784\u5efa\u4e00\u4e2a\u4ece\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5185\u5bb9\u5230\u5185\u5b58\u7684\u51fd\u6570readLines. \u6784\u5efa\u4eba\u540d\u7c7b\u522b\uff08\u6240\u5c5e\u7684\u8bed\u8a00\uff09\u5217\u8868\u4e0e\u4eba\u540d\u5bf9\u5e94\u5173\u7cfb\u5b57\u5178 \u5c06\u4eba\u540d\u8f6c\u5316\u4e3a\u5bf9\u5e94onehot\u5f20\u91cf\u8868\u793a\u51fd\u6570lineToTensor \u7b2c\u4e09\u6b65: \u6784\u5efaRNN\u6a21\u578b \u6784\u5efa\u4f20\u7edf\u7684RNN\u6a21\u578b\u7684\u7c7bclass RNN. \u6784\u5efaLSTM\u6a21\u578b\u7684\u7c7bclass LSTM. \u6784\u5efaGRU\u6a21\u578b\u7684\u7c7bclass GRU. \u7b2c\u56db\u6b65: \u6784\u5efa\u8bad\u7ec3\u51fd\u6570\u5e76\u8fdb\u884c\u8bad\u7ec3 \u4ece\u8f93\u51fa\u7ed3\u679c\u4e2d\u83b7\u5f97\u6307\u5b9a\u7c7b\u522b\u51fd\u6570categoryFromOutput. \u968f\u673a\u751f\u6210\u8bad\u7ec3\u6570\u636e\u51fd\u6570randomTrainingExample. \u6784\u5efa\u4f20\u7edfRNN\u8bad\u7ec3\u51fd\u6570trainRNN. \u6784\u5efaLSTM\u8bad\u7ec3\u51fd\u6570trainLSTM. \u6784\u5efaGRU\u8bad\u7ec3\u51fd\u6570trainGRU. \u6784\u5efa\u65f6\u95f4\u8ba1\u7b97\u51fd\u6570timeSince. \u6784\u5efa\u8bad\u7ec3\u8fc7\u7a0b\u7684\u65e5\u5fd7\u6253\u5370\u51fd\u6570train.\u5f97\u5230\u635f\u5931\u5bf9\u6bd4\u66f2\u7ebf\u548c\u8bad\u7ec3\u8017\u65f6\u5bf9\u6bd4\u56fe. \u635f\u5931\u5bf9\u6bd4\u66f2\u7ebf\u5206\u6790: \u6a21\u578b\u8bad\u7ec3\u7684\u635f\u5931\u964d\u4f4e\u5feb\u6162\u4ee3\u8868\u6a21\u578b\u6536\u655b\u7a0b\u5ea6, \u7531\u56fe\u53ef\u77e5, \u4f20\u7edfRNN\u7684\u6a21\u578b\u6536\u655b\u60c5\u51b5\u6700\u597d, \u7136\u540e\u662fGRU, \u6700\u540e\u662fLSTM, \u8fd9\u662f\u56e0\u4e3a: \u6211\u4eec\u5f53\u524d\u5904\u7406\u7684\u6587\u672c\u6570\u636e\u662f\u4eba\u540d, \u4ed6\u4eec\u7684\u957f\u5ea6\u6709\u9650, \u4e14\u957f\u8ddd\u79bb\u5b57\u6bcd\u95f4\u57fa\u672c\u65e0\u7279\u5b9a\u5173\u8054, \u56e0\u6b64\u65e0\u6cd5\u53d1\u6325\u6539\u8fdb\u6a21\u578bLSTM\u548cGRU\u7684\u957f\u8ddd\u79bb\u6355\u6349\u8bed\u4e49\u5173\u8054\u7684\u4f18\u52bf. \u6240\u4ee5\u5728\u4ee5\u540e\u7684\u6a21\u578b\u9009\u7528\u65f6, \u8981\u901a\u8fc7\u5bf9\u4efb\u52a1\u7684\u5206\u6790\u4ee5\u53ca\u5b9e\u9a8c\u5bf9\u6bd4, \u9009\u62e9\u6700\u9002\u5408\u7684\u6a21\u578b. \u8bad\u7ec3\u8017\u65f6\u5bf9\u6bd4\u56fe\u5206\u6790: \u6a21\u578b\u8bad\u7ec3\u7684\u8017\u65f6\u957f\u77ed\u4ee3\u8868\u6a21\u578b\u7684\u8ba1\u7b97\u590d\u6742\u5ea6, \u7531\u56fe\u53ef\u77e5, \u4e5f\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u7684\u7406\u8bba\u5206\u6790, \u4f20\u7edfRNN\u590d\u6742\u5ea6\u6700\u4f4e, \u8017\u65f6\u51e0\u4e4e\u53ea\u662f\u540e\u4e24\u8005\u7684\u4e00\u534a, \u7136\u540e\u662fGRU, \u6700\u540e\u662f\u590d\u6742\u5ea6\u6700\u9ad8\u7684LSTM. \u7ed3\u8bba: \u6a21\u578b\u9009\u7528\u4e00\u822c\u5e94\u901a\u8fc7\u5b9e\u9a8c\u5bf9\u6bd4, \u5e76\u975e\u8d8a\u590d\u6742\u6216\u8d8a\u5148\u8fdb\u7684\u6a21\u578b\u8868\u73b0\u8d8a\u597d, \u800c\u662f\u9700\u8981\u7ed3\u5408\u81ea\u5df1\u7684\u7279\u5b9a\u4efb\u52a1, \u4ece\u5bf9\u6570\u636e\u7684\u5206\u6790\u548c\u5b9e\u9a8c\u7ed3\u679c\u4e2d\u83b7\u5f97\u6700\u4f73\u7b54\u6848. \u7b2c\u4e94\u6b65: \u6784\u5efa\u8bc4\u4f30\u51fd\u6570\u5e76\u8fdb\u884c\u9884\u6d4b \u6784\u5efa\u4f20\u7edfRNN\u8bc4\u4f30\u51fd\u6570evaluateRNN. \u6784\u5efaLSTM\u8bc4\u4f30\u51fd\u6570evaluateLSTM. \u6784\u5efaGRU\u8bc4\u4f30\u51fd\u6570evaluateGRU. \u6784\u5efa\u9884\u6d4b\u51fd\u6570predict.","title":"2.1 \u4f7f\u7528RNN\u6a21\u578b\u6784\u5efa\u4eba\u540d\u5206\u7c7b\u5668"},{"location":"2.html#22-seq2seq","text":"\u5b66\u4e60\u76ee\u6807: \u66f4\u6df1\u4e00\u6b65\u4e86\u89e3seq2seq\u6a21\u578b\u67b6\u6784\u548c\u7ffb\u8bd1\u6570\u636e\u96c6. \u638c\u63e1\u4f7f\u7528\u57fa\u4e8eGRU\u7684seq2seq\u6a21\u578b\u67b6\u6784\u5b9e\u73b0\u7ffb\u8bd1\u7684\u8fc7\u7a0b. \u638c\u63e1Attention\u673a\u5236\u5728\u89e3\u7801\u5668\u7aef\u7684\u5b9e\u73b0\u8fc7\u7a0b. seq2seq\u6a21\u578b\u67b6\u6784: seq2seq\u6a21\u578b\u67b6\u6784\u5206\u6790: \u4ece\u56fe\u4e2d\u53ef\u77e5, seq2seq\u6a21\u578b\u67b6\u6784, \u5305\u62ec\u4e24\u90e8\u5206\u5206\u522b\u662fencoder(\u7f16\u7801\u5668)\u548cdecoder(\u89e3\u7801\u5668), \u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u7684\u5185\u90e8\u5b9e\u73b0\u90fd\u4f7f\u7528\u4e86GRU\u6a21\u578b, \u8fd9\u91cc\u5b83\u8981\u5b8c\u6210\u7684\u662f\u4e00\u4e2a\u4e2d\u6587\u5230\u82f1\u6587\u7684\u7ffb\u8bd1: \u6b22\u8fce \u6765 \u5317\u4eac --> welcome to BeiJing. \u7f16\u7801\u5668\u9996\u5148\u5904\u7406\u4e2d\u6587\u8f93\u5165\"\u6b22\u8fce \u6765 \u5317\u4eac\", \u901a\u8fc7GRU\u6a21\u578b\u83b7\u5f97\u6bcf\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u5f20\u91cf\uff0c\u6700\u540e\u5c06\u5b83\u4eec\u62fc\u63a5\u6210\u4e00\u4e2a\u4e2d\u95f4\u8bed\u4e49\u5f20\u91cfc, \u63a5\u7740\u89e3\u7801\u5668\u5c06\u4f7f\u7528\u8fd9\u4e2a\u4e2d\u95f4\u8bed\u4e49\u5f20\u91cfc\u4ee5\u53ca\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u9690\u5c42\u5f20\u91cf, \u9010\u4e2a\u751f\u6210\u5bf9\u5e94\u7684\u7ffb\u8bd1\u8bed\u8a00. \u7ffb\u8bd1\u6570\u636e\u96c6: \u4e0b\u8f7d\u5730\u5740: https://download.pytorch.org/tutorial/data.zip \u6570\u636e\u6587\u4ef6\u9884\u89c8: - data/ - eng-fra.txt She feeds her dog a meat - free diet . Elle fait suivre \u00e0 son chien un r\u00e9gime sans viande . She feeds her dog a meat - free diet . Elle fait suivre \u00e0 son chien un r\u00e9gime non carn\u00e9 . She folded her handkerchief neatly . Elle plia soigneusement son mouchoir . She folded her handkerchief neatly . Elle a soigneusement pli\u00e9 son mouchoir . She found a need and she filled it . Elle trouva un besoin et le remplit . She gave birth to twins a week ago . Elle a donn\u00e9 naissance \u00e0 des jumeaux il y a une semaine . She gave him money as well as food . Elle lui donna de l ' argent aussi bien que de la nourriture . She gave it her personal attention . Elle y a pr\u00eat\u00e9 son attention personnelle . She gave me a smile of recognition . Elle m ' adressa un sourire indiquant qu ' elle me reconnaissait . She glanced shyly at the young man . Elle a timidement jet\u00e9 un regard au jeune homme . She goes to the movies once a week . Elle va au cin\u00e9ma une fois par semaine . She got into the car and drove off . Elle s ' introduisit dans la voiture et partit . \u57fa\u4e8eGRU\u7684seq2seq\u6a21\u578b\u67b6\u6784\u5b9e\u73b0\u7ffb\u8bd1\u7684\u8fc7\u7a0b: \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305. \u7b2c\u4e8c\u6b65: \u5bf9\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u6570\u636e\u8fdb\u884c\u5904\u7406, \u4ee5\u6ee1\u8db3\u6a21\u578b\u8bad\u7ec3\u8981\u6c42. \u7b2c\u4e09\u6b65: \u6784\u5efa\u57fa\u4e8eGRU\u7684\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668. \u7b2c\u56db\u6b65: \u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570, \u5e76\u8fdb\u884c\u8bad\u7ec3. \u7b2c\u4e94\u6b65: \u6784\u5efa\u6a21\u578b\u8bc4\u4f30\u51fd\u6570, \u5e76\u8fdb\u884c\u6d4b\u8bd5\u4ee5\u53caAttention\u6548\u679c\u5206\u6790. \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 python\u7248\u672c\u4f7f\u75283.6.x, pytorch\u7248\u672c\u4f7f\u75281.3.1 pip install torch==1.3.1 # \u4eceio\u5de5\u5177\u5305\u5bfc\u5165open\u65b9\u6cd5 from io import open # \u7528\u4e8e\u5b57\u7b26\u89c4\u8303\u5316 import unicodedata # \u7528\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f import re # \u7528\u4e8e\u968f\u673a\u751f\u6210\u6570\u636e import random # \u7528\u4e8e\u6784\u5efa\u7f51\u7edc\u7ed3\u6784\u548c\u51fd\u6570\u7684torch\u5de5\u5177\u5305 import torch import torch.nn as nn import torch.nn.functional as F # torch\u4e2d\u9884\u5b9a\u4e49\u7684\u4f18\u5316\u65b9\u6cd5\u5de5\u5177\u5305 from torch import optim # \u8bbe\u5907\u9009\u62e9, \u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5728cuda\u6216\u8005cpu\u4e0a\u8fd0\u884c\u4f60\u7684\u4ee3\u7801 device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) \u7b2c\u4e8c\u6b65: \u5bf9\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u6570\u636e\u8fdb\u884c\u5904\u7406, \u4ee5\u6ee1\u8db3\u6a21\u578b\u8bad\u7ec3\u8981\u6c42 \u5c06\u6307\u5b9a\u8bed\u8a00\u4e2d\u7684\u8bcd\u6c47\u6620\u5c04\u6210\u6570\u503c: # \u8d77\u59cb\u6807\u5fd7 SOS_token = 0 # \u7ed3\u675f\u6807\u5fd7 EOS_token = 1 class Lang : def __init__ ( self , name ) : \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u53c2\u6570name\u4ee3\u8868\u4f20\u5165\u67d0\u79cd\u8bed\u8a00\u7684\u540d\u5b57\"\"\" # \u5c06name\u4f20\u5165\u7c7b\u4e2d self . name = name # \u521d\u59cb\u5316\u8bcd\u6c47\u5bf9\u5e94\u81ea\u7136\u6570\u503c\u7684\u5b57\u5178 self . word2index = {} # \u521d\u59cb\u5316\u81ea\u7136\u6570\u503c\u5bf9\u5e94\u8bcd\u6c47\u7684\u5b57\u5178 , \u5176\u4e2d0 \uff0c 1 \u5bf9\u5e94\u7684SOS\u548cEOS\u5df2\u7ecf\u5728\u91cc\u9762\u4e86 self . index2word = { 0 : \"SOS\" , 1 : \"EOS\" } # \u521d\u59cb\u5316\u8bcd\u6c47\u5bf9\u5e94\u7684\u81ea\u7136\u6570\u7d22\u5f15 \uff0c \u8fd9\u91cc\u4ece2\u5f00\u59cb \uff0c \u56e0\u4e3a0 \uff0c 1 \u5df2\u7ecf\u88ab\u5f00\u59cb\u548c\u7ed3\u675f\u6807\u5fd7\u5360\u7528\u4e86 self . n_words = 2 def addSentence ( self , sentence ) : \"\"\"\u6dfb\u52a0\u53e5\u5b50\u51fd\u6570, \u5373\u5c06\u53e5\u5b50\u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684\u6570\u503c\u5e8f\u5217, \u8f93\u5165\u53c2\u6570sentence\u662f\u4e00\u6761\u53e5\u5b50\"\"\" # \u6839\u636e\u4e00\u822c\u56fd\u5bb6\u7684\u8bed\u8a00\u7279\u6027 ( \u6211\u4eec\u8fd9\u91cc\u7814\u7a76\u7684\u8bed\u8a00\u90fd\u662f\u4ee5\u7a7a\u683c\u5206\u4e2a\u5355\u8bcd ) # \u5bf9\u53e5\u5b50\u8fdb\u884c\u5206\u5272 \uff0c \u5f97\u5230\u5bf9\u5e94\u7684\u8bcd\u6c47\u5217\u8868 for word in sentence . split ( ' ' ) : # \u7136\u540e\u8c03\u7528addWord\u8fdb\u884c\u5904\u7406 self . addWord ( word ) def addWord ( self , word ) : \"\"\"\u6dfb\u52a0\u8bcd\u6c47\u51fd\u6570, \u5373\u5c06\u8bcd\u6c47\u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684\u6570\u503c, \u8f93\u5165\u53c2\u6570word\u662f\u4e00\u4e2a\u5355\u8bcd\"\"\" # \u9996\u5148\u5224\u65adword\u662f\u5426\u5df2\u7ecf\u5728self . word2index\u5b57\u5178\u7684key\u4e2d if word not in self . word2index : # \u5982\u679c\u4e0d\u5728 , \u5219\u5c06\u8fd9\u4e2a\u8bcd\u52a0\u5165\u5176\u4e2d , \u5e76\u4e3a\u5b83\u5bf9\u5e94\u4e00\u4e2a\u6570\u503c \uff0c \u5373self . n_words self . word2index [ word ] = self . n_words # \u540c\u65f6\u4e5f\u5c06\u5b83\u7684\u53cd\u8f6c\u5f62\u5f0f\u52a0\u5165\u5230self . index2word\u4e2d self . index2word [ self.n_words ] = word # self . n_words\u4e00\u65e6\u88ab\u5360\u7528\u4e4b\u540e \uff0c \u9010\u6b21\u52a01 , \u53d8\u6210\u65b0\u7684self . n_words self . n_words += 1 \u5b9e\u4f8b\u5316\u53c2\u6570: name = \"eng\" \u8f93\u5165\u53c2\u6570: sentence = \"hello I am Jay\" \u8c03\u7528: engl = Lang(name) engl.addSentence(sentence) print(\"word2index:\", engl.word2index) print(\"index2word:\", engl.index2word) print(\"n_words:\", engl.n_words) \u8f93\u51fa\u6548\u679c: word2index: {'hello': 2, 'I': 3, 'am': 4, 'Jay': 5} index2word: {0: 'SOS', 1: 'EOS', 2: 'hello', 3: 'I', 4: 'am', 5: 'Jay'} n_words: 6 \u5b57\u7b26\u89c4\u8303\u5316: # \u5c06 unicode \u8f6c\u4e3a Ascii , \u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u662f\u53bb\u6389\u4e00\u4e9b\u8bed\u8a00\u4e2d\u7684\u91cd\u97f3\u6807\u8bb0\uff1a\u015a lus \u00e0 rski def unicodeToAscii ( s ) : return '' . join ( c for c in unicodedata . normalize ( ' NFD ' , s ) if unicodedata . category ( c ) != ' Mn ' ) def normalizeString ( s ) : \"\"\" \u5b57\u7b26\u4e32\u89c4\u8303\u5316\u51fd\u6570, \u53c2\u6570s\u4ee3\u8868\u4f20\u5165\u7684\u5b57\u7b26\u4e32 \"\"\" # \u4f7f\u5b57\u7b26\u53d8\u4e3a\u5c0f\u5199\u5e76\u53bb\u9664\u4e24\u4fa7\u7a7a\u767d\u7b26, z \u518d\u4f7f\u7528 unicodeToAscii \u53bb\u6389\u91cd\u97f3\u6807\u8bb0 s = unicodeToAscii ( s . lower () . strip ()) # \u5728. ! ?\u524d\u52a0\u4e00\u4e2a\u7a7a\u683c s = re . sub ( r \" ([.!?]) \" , r \" \\1 \" , s ) # \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5c06\u5b57\u7b26\u4e32\u4e2d\u4e0d\u662f\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u6b63\u5e38\u6807\u70b9\u7684\u90fd\u66ff\u6362\u6210\u7a7a\u683c s = re . sub ( r \" [^a-zA-Z.!?]+ \" , r \" \" , s ) return s \u8f93\u5165\u53c2\u6570: s = \"Are you kidding me?\" \u8c03\u7528: nsr = normalizeString(s) print(nsr) \u8f93\u51fa\u6548\u679c: are you kidding me ? \u5c06\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58, \u5e76\u5b9e\u4f8b\u5316\u7c7bLang data_path = '../Downloads/data/eng-fra.txt' def readLangs ( lang1 , lang2 ): \"\"\"\u8bfb\u53d6\u8bed\u8a00\u51fd\u6570, \u53c2\u6570lang1\u662f\u6e90\u8bed\u8a00\u7684\u540d\u5b57, \u53c2\u6570lang2\u662f\u76ee\u6807\u8bed\u8a00\u7684\u540d\u5b57 \u8fd4\u56de\u5bf9\u5e94\u7684class Lang\u5bf9\u8c61, \u4ee5\u53ca\u8bed\u8a00\u5bf9\u5217\u8868\"\"\" # \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u8bed\u8a00\u5bf9\u5e76\u4ee5/n\u5212\u5206\u5b58\u5230\u5217\u8868lines\u4e2d lines = open ( data_path , encoding = 'utf-8' ) . \\ read () . strip () . split ( ' \\n ' ) # \u5bf9lines\u5217\u8868\u4e2d\u7684\u53e5\u5b50\u8fdb\u884c\u6807\u51c6\u5316\u5904\u7406\uff0c\u5e76\u4ee5\\t\u8fdb\u884c\u518d\u6b21\u5212\u5206, \u5f62\u6210\u5b50\u5217\u8868, \u4e5f\u5c31\u662f\u8bed\u8a00\u5bf9 pairs = [[ normalizeString ( s ) for s in l . split ( ' \\t ' )] for l in lines ] # \u7136\u540e\u5206\u522b\u5c06\u8bed\u8a00\u540d\u5b57\u4f20\u5165Lang\u7c7b\u4e2d, \u83b7\u5f97\u5bf9\u5e94\u7684\u8bed\u8a00\u5bf9\u8c61, \u8fd4\u56de\u7ed3\u679c input_lang = Lang ( lang1 ) output_lang = Lang ( lang2 ) return input_lang , output_lang , pairs \u8f93\u5165\u53c2\u6570: lang1 = \"eng\" lang2 = \"fra\" \u8c03\u7528: input_lang, output_lang, pairs = readLangs(lang1, lang2) print(\"input_lang:\", input_lang) print(\"output_lang:\", output_lang) print(\"pairs\u4e2d\u7684\u524d\u4e94\u4e2a:\", pairs[:5]) \u8f93\u51fa\u6548\u679c: input_lang : < __main__ . Lang object at 0x11ecf0828 > output_lang : < __main__ . Lang object at 0x12d420d68 > pairs\u4e2d\u7684\u524d\u4e94\u4e2a : [ ['go .', 'va !' ] , [ 'run !', 'cours !' ] , [ 'run !', 'courez !' ] , [ 'wow !', 'ca alors !' ] , [ 'fire !', 'au feu !' ] ] \u8fc7\u6ee4\u51fa\u7b26\u5408\u6211\u4eec\u8981\u6c42\u7684\u8bed\u8a00\u5bf9: # \u8bbe\u7f6e\u7ec4\u6210\u53e5\u5b50\u4e2d\u5355\u8bcd\u6216\u6807\u70b9\u7684\u6700\u591a\u4e2a\u6570 MAX_LENGTH = 10 # \u9009\u62e9\u5e26\u6709\u6307\u5b9a\u524d\u7f00\u7684\u8bed\u8a00\u7279\u5f81\u6570\u636e\u4f5c\u4e3a\u8bad\u7ec3\u6570\u636e eng_prefixes = ( \" i am \" , \" i m \" , \" he is \" , \" he s \" , \" she is \" , \" she s \" , \" you are \" , \" you re \" , \" we are \" , \" we re \" , \" they are \" , \" they re \" ) def filterPair ( p ) : \"\"\" \u8bed\u8a00\u5bf9\u8fc7\u6ee4\u51fd\u6570, \u53c2\u6570p\u4ee3\u8868\u8f93\u5165\u7684\u8bed\u8a00\u5bf9, \u5982['she is afraid.', 'elle malade.'] \"\"\" # p [ 0 ]\u4ee3\u8868\u82f1\u8bed\u53e5\u5b50\uff0c\u5bf9\u5b83\u8fdb\u884c\u5212\u5206\uff0c\u5b83\u7684\u957f\u5ea6\u5e94\u5c0f\u4e8e\u6700\u5927\u957f\u5ea6 MAX_LENGTH \u5e76\u4e14\u8981\u4ee5\u6307\u5b9a\u7684\u524d\u7f00\u5f00\u5934 # p [ 1 ]\u4ee3\u8868\u6cd5\u6587\u53e5\u5b50, \u5bf9\u5b83\u8fdb\u884c\u5212\u5206\uff0c\u5b83\u7684\u957f\u5ea6\u5e94\u5c0f\u4e8e\u6700\u5927\u957f\u5ea6 MAX_LENGTH return len ( p [ 0 ]. split ( ' ' )) < MAX_LENGTH and \\ p [ 0 ]. startswith ( eng_prefixes ) and \\ len ( p [ 1 ]. split ( ' ' )) < MAX_LENGTH def filterPairs ( pairs ) : \"\"\" \u5bf9\u591a\u4e2a\u8bed\u8a00\u5bf9\u5217\u8868\u8fdb\u884c\u8fc7\u6ee4, \u53c2\u6570pairs\u4ee3\u8868\u8bed\u8a00\u5bf9\u7ec4\u6210\u7684\u5217\u8868, \u7b80\u79f0\u8bed\u8a00\u5bf9\u5217\u8868 \"\"\" # \u51fd\u6570\u4e2d\u76f4\u63a5\u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u8bed\u8a00\u5bf9\u5e76\u8c03\u7528 filterPair \u5373\u53ef return [ pair for pair in pairs if filterPair ( pair ) ] \u8f93\u5165\u53c2\u6570: # \u8f93\u5165\u53c2\u6570pairs\u4f7f\u7528readLangs\u51fd\u6570\u7684\u8f93\u51fa\u7ed3\u679cpairs \u8c03\u7528: fpairs = filterPairs(pairs) print(\"\u8fc7\u6ee4\u540e\u7684pairs\u524d\u4e94\u4e2a:\", fpairs[:5]) \u8f93\u51fa\u6548\u679c: \u8fc7\u6ee4\u540e\u7684pairs\u524d\u4e94\u4e2a: [['i m .', 'j ai ans .'], ['i m ok .', 'je vais bien .'], ['i m ok .', 'ca va .'], ['i m fat .', 'je suis gras .'], ['i m fat .', 'je suis gros .']] \u5bf9\u4ee5\u4e0a\u6570\u636e\u51c6\u5907\u51fd\u6570\u8fdb\u884c\u6574\u5408, \u5e76\u4f7f\u7528\u7c7bLang\u5bf9\u8bed\u8a00\u5bf9\u8fdb\u884c\u6570\u503c\u6620\u5c04: def prepareData ( lang1 , lang2 ) : \"\"\" \u6570\u636e\u51c6\u5907\u51fd\u6570, \u5b8c\u6210\u5c06\u6240\u6709\u5b57\u7b26\u4e32\u6570\u636e\u5411\u6570\u503c\u578b\u6570\u636e\u7684\u6620\u5c04\u4ee5\u53ca\u8fc7\u6ee4\u8bed\u8a00\u5bf9 \u53c2\u6570 lang1 , lang2 \u5206\u522b\u4ee3\u8868\u6e90\u8bed\u8a00\u548c\u76ee\u6807\u8bed\u8a00\u7684\u540d\u5b57 \"\"\" # \u9996\u5148\u901a\u8fc7 readLangs \u51fd\u6570\u83b7\u5f97 input_lang , output_lang \u5bf9\u8c61\uff0c\u4ee5\u53ca\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u8bed\u8a00\u5bf9\u5217\u8868 input_lang , output_lang , pairs = readLangs ( lang1 , lang2 ) # \u5bf9\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u8bed\u8a00\u5bf9\u5217\u8868\u8fdb\u884c\u8fc7\u6ee4\u64cd\u4f5c pairs = filterPairs ( pairs ) # \u5bf9\u8fc7\u6ee4\u540e\u7684\u8bed\u8a00\u5bf9\u5217\u8868\u8fdb\u884c\u904d\u5386 for pair in pairs : # \u5e76\u4f7f\u7528 input_lang \u548c output_lang \u7684 addSentence \u65b9\u6cd5\u5bf9\u5176\u8fdb\u884c\u6570\u503c\u6620\u5c04 input_lang . addSentence ( pair [ 0 ] ) output_lang . addSentence ( pair [ 1 ] ) # \u8fd4\u56de\u6570\u503c\u6620\u5c04\u540e\u7684\u5bf9\u8c61, \u548c\u8fc7\u6ee4\u540e\u8bed\u8a00\u5bf9 return input_lang , output_lang , pairs \u8c03\u7528: input_lang , output_lang , pairs = prepareData ( ' eng ' , ' fra ' ) print ( \" input_n_words: \" , input_lang . n_words ) print ( \" output_n_words: \" , output_lang . n_words ) print ( random . choice ( pairs )) \u8f93\u51fa\u6548\u679c: input_n_words : 2803 output_n_words : 4345 pairs\u968f\u673a\u9009\u62e9\u4e00\u6761 : [ 'you re such an idiot !' , 'quelle idiote tu es !' ] \u5c06\u8bed\u8a00\u5bf9\u8f6c\u5316\u4e3a\u6a21\u578b\u8f93\u5165\u9700\u8981\u7684\u5f20\u91cf: def tensorFromSentence ( lang , sentence ) : \"\"\"\u5c06\u6587\u672c\u53e5\u5b50\u8f6c\u6362\u4e3a\u5f20\u91cf, \u53c2\u6570lang\u4ee3\u8868\u4f20\u5165\u7684Lang\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61, sentence\u662f\u9884\u8f6c\u6362\u7684\u53e5\u5b50\"\"\" # \u5bf9\u53e5\u5b50\u8fdb\u884c\u5206\u5272\u5e76\u904d\u5386\u6bcf\u4e00\u4e2a\u8bcd\u6c47 , \u7136\u540e\u4f7f\u7528lang\u7684word2index\u65b9\u6cd5\u627e\u5230\u5b83\u5bf9\u5e94\u7684\u7d22\u5f15 # \u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u8be5\u53e5\u5b50\u5bf9\u5e94\u7684\u6570\u503c\u5217\u8868 indexes = [ lang.word2index[word ] for word in sentence . split ( ' ' ) ] # \u7136\u540e\u52a0\u5165\u53e5\u5b50\u7ed3\u675f\u6807\u5fd7 indexes . append ( EOS_token ) # \u5c06\u5176\u4f7f\u7528torch . tensor\u5c01\u88c5\u6210\u5f20\u91cf , \u5e76\u6539\u53d8\u5b83\u7684\u5f62\u72b6\u4e3anx1 , \u4ee5\u65b9\u4fbf\u540e\u7eed\u8ba1\u7b97 return torch . tensor ( indexes , dtype = torch . long , device = device ). view ( - 1 , 1 ) def tensorsFromPair ( pair ) : \"\"\"\u5c06\u8bed\u8a00\u5bf9\u8f6c\u6362\u4e3a\u5f20\u91cf\u5bf9, \u53c2\u6570pair\u4e3a\u4e00\u4e2a\u8bed\u8a00\u5bf9\"\"\" # \u8c03\u7528tensorFromSentence\u5206\u522b\u5c06\u6e90\u8bed\u8a00\u548c\u76ee\u6807\u8bed\u8a00\u5206\u522b\u5904\u7406 \uff0c \u83b7\u5f97\u5bf9\u5e94\u7684\u5f20\u91cf\u8868\u793a input_tensor = tensorFromSentence ( input_lang , pair [ 0 ] ) target_tensor = tensorFromSentence ( output_lang , pair [ 1 ] ) # \u6700\u540e\u8fd4\u56de\u5b83\u4eec\u7ec4\u6210\u7684\u5143\u7ec4 return ( input_tensor , target_tensor ) \u8f93\u5165\u53c2\u6570: # \u53d6pairs\u7684\u7b2c\u4e00\u6761 pair = pairs[0] \u8c03\u7528: pair_tensor = tensorsFromPair(pair) print(pair_tensor) \u8f93\u51fa\u6548\u679c: (tensor([[2], [3], [4], [1]]), tensor([[2], [3], [4], [5], [1]])) \u7b2c\u4e09\u6b65: \u6784\u5efa\u57fa\u4e8eGRU\u7684\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668 \u6784\u5efa\u57fa\u4e8eGRU\u7684\u7f16\u7801\u5668 \u7f16\u7801\u5668\u7ed3\u6784\u56fe: class EncoderRNN ( nn . Module ): def __init__ ( self , input_size , hidden_size ): \"\"\"\u5b83\u7684\u521d\u59cb\u5316\u53c2\u6570\u6709\u4e24\u4e2a, input_size\u4ee3\u8868\u89e3\u7801\u5668\u7684\u8f93\u5165\u5c3a\u5bf8\u5373\u6e90\u8bed\u8a00\u7684 \u8bcd\u8868\u5927\u5c0f\uff0chidden_size\u4ee3\u8868GRU\u7684\u9690\u5c42\u8282\u70b9\u6570, \u4e5f\u4ee3\u8868\u8bcd\u5d4c\u5165\u7ef4\u5ea6, \u540c\u65f6\u53c8\u662fGRU\u7684\u8f93\u5165\u5c3a\u5bf8\"\"\" super ( EncoderRNN , self ). __init__ () # \u5c06\u53c2\u6570hidden_size\u4f20\u5165\u7c7b\u4e2d self . hidden_size = hidden_size # \u5b9e\u4f8b\u5316nn\u4e2d\u9884\u5b9a\u4e49\u7684Embedding\u5c42, \u5b83\u7684\u53c2\u6570\u5206\u522b\u662finput_size, hidden_size # \u8fd9\u91cc\u7684\u8bcd\u5d4c\u5165\u7ef4\u5ea6\u5373hidden_size # nn.Embedding\u7684\u6f14\u793a\u5728\u8be5\u4ee3\u7801\u4e0b\u65b9 self . embedding = nn . Embedding ( input_size , hidden_size ) # \u7136\u540e\u5b9e\u4f8b\u5316nn\u4e2d\u9884\u5b9a\u4e49\u7684GRU\u5c42, \u5b83\u7684\u53c2\u6570\u662fhidden_size # nn.GRU\u7684\u6f14\u793a\u5728\u8be5\u4ee3\u7801\u4e0b\u65b9 self . gru = nn . GRU ( hidden_size , hidden_size ) def forward ( self , input , hidden ): \"\"\"\u7f16\u7801\u5668\u524d\u5411\u903b\u8f91\u51fd\u6570\u4e2d\u53c2\u6570\u6709\u4e24\u4e2a, input\u4ee3\u8868\u6e90\u8bed\u8a00\u7684Embedding\u5c42\u8f93\u5165\u5f20\u91cf hidden\u4ee3\u8868\u7f16\u7801\u5668\u5c42gru\u7684\u521d\u59cb\u9690\u5c42\u5f20\u91cf\"\"\" # \u5c06\u8f93\u5165\u5f20\u91cf\u8fdb\u884cembedding\u64cd\u4f5c, \u5e76\u4f7f\u5176\u5f62\u72b6\u53d8\u4e3a(1,1,-1),-1\u4ee3\u8868\u81ea\u52a8\u8ba1\u7b97\u7ef4\u5ea6 # \u7406\u8bba\u4e0a\uff0c\u6211\u4eec\u7684\u7f16\u7801\u5668\u6bcf\u6b21\u53ea\u4ee5\u4e00\u4e2a\u8bcd\u4f5c\u4e3a\u8f93\u5165, \u56e0\u6b64\u8bcd\u6c47\u6620\u5c04\u540e\u7684\u5c3a\u5bf8\u5e94\u8be5\u662f[1, embedding] # \u800c\u8fd9\u91cc\u8f6c\u6362\u6210\u4e09\u7ef4\u7684\u539f\u56e0\u662f\u56e0\u4e3atorch\u4e2d\u9884\u5b9a\u4e49gru\u5fc5\u987b\u4f7f\u7528\u4e09\u7ef4\u5f20\u91cf\u4f5c\u4e3a\u8f93\u5165, \u56e0\u6b64\u6211\u4eec\u62d3\u5c55\u4e86\u4e00\u4e2a\u7ef4\u5ea6 output = self . embedding ( input ). view ( 1 , 1 , - 1 ) # \u7136\u540e\u5c06embedding\u5c42\u7684\u8f93\u51fa\u548c\u4f20\u5165\u7684\u521d\u59cbhidden\u4f5c\u4e3agru\u7684\u8f93\u5165\u4f20\u5165\u5176\u4e2d, # \u83b7\u5f97\u6700\u7ec8gru\u7684\u8f93\u51faoutput\u548c\u5bf9\u5e94\u7684\u9690\u5c42\u5f20\u91cfhidden\uff0c \u5e76\u8fd4\u56de\u7ed3\u679c output , hidden = self . gru ( output , hidden ) return output , hidden def initHidden ( self ): \"\"\"\u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf\u51fd\u6570\"\"\" # \u5c06\u9690\u5c42\u5f20\u91cf\u521d\u59cb\u5316\u6210\u4e3a1x1xself.hidden_size\u5927\u5c0f\u76840\u5f20\u91cf return torch . zeros ( 1 , 1 , self . hidden_size , device = device ) \u5b9e\u4f8b\u5316\u53c2\u6570: hidden_size = 25 input_size = 20 \u8f93\u5165\u53c2\u6570: # pair_tensor[0]\u4ee3\u8868\u6e90\u8bed\u8a00\u5373\u82f1\u6587\u7684\u53e5\u5b50\uff0cpair_tensor[0][0]\u4ee3\u8868\u53e5\u5b50\u4e2d \u7684\u7b2c\u4e00\u4e2a\u8bcd input = pair_tensor[0][0] # \u521d\u59cb\u5316\u7b2c\u4e00\u4e2a\u9690\u5c42\u5f20\u91cf\uff0c1x1xhidden_size\u76840\u5f20\u91cf hidden = torch.zeros(1, 1, hidden_size) \u8c03\u7528: encoder = EncoderRNN(input_size, hidden_size) encoder_output, hidden = encoder(input, hidden) print(encoder_output) \u8f93\u51fa\u6548\u679c: tensor([[[ 1.9149e-01, -2.0070e-01, -8.3882e-02, -3.3037e-02, -1.3491e-01, -8.8831e-02, -1.6626e-01, -1.9346e-01, -4.3996e-01, 1.8020e-02, 2.8854e-02, 2.2310e-01, 3.5153e-01, 2.9635e-01, 1.5030e-01, -8.5266e-02, -1.4909e-01, 2.4336e-04, -2.3522e-01, 1.1359e-01, 1.6439e-01, 1.4872e-01, -6.1619e-02, -1.0807e-02, 1.1216e-02]]], grad_fn=<StackBackward>) \u6784\u5efa\u57fa\u4e8eGRU\u7684\u89e3\u7801\u5668 \u89e3\u7801\u5668\u7ed3\u6784\u56fe: class DecoderRNN ( nn . Module ): def __init__ ( self , hidden_size , output_size ): \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u6709\u4e24\u4e2a\u53c2\u6570\uff0chidden_size\u4ee3\u8868\u89e3\u7801\u5668\u4e2dGRU\u7684\u8f93\u5165\u5c3a\u5bf8\uff0c\u4e5f\u662f\u5b83\u7684\u9690\u5c42\u8282\u70b9\u6570 output_size\u4ee3\u8868\u6574\u4e2a\u89e3\u7801\u5668\u7684\u8f93\u51fa\u5c3a\u5bf8, \u4e5f\u662f\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u6307\u5b9a\u5c3a\u5bf8\u5373\u76ee\u6807\u8bed\u8a00\u7684\u8bcd\u8868\u5927\u5c0f\"\"\" super ( DecoderRNN , self ). __init__ () # \u5c06hidden_size\u4f20\u5165\u5230\u7c7b\u4e2d self . hidden_size = hidden_size # \u5b9e\u4f8b\u5316\u4e00\u4e2ann\u4e2d\u7684Embedding\u5c42\u5bf9\u8c61, \u5b83\u7684\u53c2\u6570output\u8fd9\u91cc\u8868\u793a\u76ee\u6807\u8bed\u8a00\u7684\u8bcd\u8868\u5927\u5c0f # hidden_size\u8868\u793a\u76ee\u6807\u8bed\u8a00\u7684\u8bcd\u5d4c\u5165\u7ef4\u5ea6 self . embedding = nn . Embedding ( output_size , hidden_size ) # \u5b9e\u4f8b\u5316GRU\u5bf9\u8c61\uff0c\u8f93\u5165\u53c2\u6570\u90fd\u662fhidden_size\uff0c\u4ee3\u8868\u5b83\u7684\u8f93\u5165\u5c3a\u5bf8\u548c\u9690\u5c42\u8282\u70b9\u6570\u76f8\u540c self . gru = nn . GRU ( hidden_size , hidden_size ) # \u5b9e\u4f8b\u5316\u7ebf\u6027\u5c42, \u5bf9GRU\u7684\u8f93\u51fa\u505a\u7ebf\u6027\u53d8\u5316, \u83b7\u6211\u4eec\u5e0c\u671b\u7684\u8f93\u51fa\u5c3a\u5bf8output_size # \u56e0\u6b64\u5b83\u7684\u4e24\u4e2a\u53c2\u6570\u5206\u522b\u662fhidden_size, output_size self . out = nn . Linear ( hidden_size , output_size ) # \u6700\u540e\u4f7f\u7528softmax\u8fdb\u884c\u5904\u7406\uff0c\u4ee5\u4fbf\u4e8e\u5206\u7c7b self . softmax = nn . LogSoftmax ( dim = 1 ) def forward ( self , input , hidden ): \"\"\"\u89e3\u7801\u5668\u7684\u524d\u5411\u903b\u8f91\u51fd\u6570\u4e2d, \u53c2\u6570\u6709\u4e24\u4e2a, input\u4ee3\u8868\u76ee\u6807\u8bed\u8a00\u7684Embedding\u5c42\u8f93\u5165\u5f20\u91cf hidden\u4ee3\u8868\u89e3\u7801\u5668GRU\u7684\u521d\u59cb\u9690\u5c42\u5f20\u91cf\"\"\" # \u5c06\u8f93\u5165\u5f20\u91cf\u8fdb\u884cembedding\u64cd\u4f5c, \u5e76\u4f7f\u5176\u5f62\u72b6\u53d8\u4e3a(1,1,-1),-1\u4ee3\u8868\u81ea\u52a8\u8ba1\u7b97\u7ef4\u5ea6 # \u539f\u56e0\u548c\u89e3\u7801\u5668\u76f8\u540c\uff0c\u56e0\u4e3atorch\u9884\u5b9a\u4e49\u7684GRU\u5c42\u53ea\u63a5\u53d7\u4e09\u7ef4\u5f20\u91cf\u4f5c\u4e3a\u8f93\u5165 output = self . embedding ( input ). view ( 1 , 1 , - 1 ) # \u7136\u540e\u4f7f\u7528relu\u51fd\u6570\u5bf9\u8f93\u51fa\u8fdb\u884c\u5904\u7406\uff0c\u6839\u636erelu\u51fd\u6570\u7684\u7279\u6027, \u5c06\u4f7fEmbedding\u77e9\u9635\u66f4\u7a00\u758f\uff0c\u4ee5\u9632\u6b62\u8fc7\u62df\u5408 output = F . relu ( output ) # \u63a5\u4e0b\u6765, \u5c06\u628aembedding\u7684\u8f93\u51fa\u4ee5\u53ca\u521d\u59cb\u5316\u7684hidden\u5f20\u91cf\u4f20\u5165\u5230\u89e3\u7801\u5668gru\u4e2d output , hidden = self . gru ( output , hidden ) # \u56e0\u4e3aGRU\u8f93\u51fa\u7684output\u4e5f\u662f\u4e09\u7ef4\u5f20\u91cf\uff0c\u7b2c\u4e00\u7ef4\u6ca1\u6709\u610f\u4e49\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7output[0]\u6765\u964d\u7ef4 # \u518d\u4f20\u7ed9\u7ebf\u6027\u5c42\u505a\u53d8\u6362, \u6700\u540e\u7528softmax\u5904\u7406\u4ee5\u4fbf\u4e8e\u5206\u7c7b output = self . softmax ( self . out ( output [ 0 ])) return output , hidden def initHidden ( self ): \"\"\"\u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf\u51fd\u6570\"\"\" # \u5c06\u9690\u5c42\u5f20\u91cf\u521d\u59cb\u5316\u6210\u4e3a1x1xself.hidden_size\u5927\u5c0f\u76840\u5f20\u91cf return torch . zeros ( 1 , 1 , self . hidden_size , device = device ) \u5b9e\u4f8b\u5316\u53c2\u6570: hidden_size = 25 output_size = 10 \u8f93\u5165\u53c2\u6570: # pair_tensor[1]\u4ee3\u8868\u76ee\u6807\u8bed\u8a00\u5373\u6cd5\u6587\u7684\u53e5\u5b50\uff0cpair_tensor[1][0]\u4ee3\u8868\u53e5\u5b50\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8bcd input = pair_tensor[1][0] # \u521d\u59cb\u5316\u7b2c\u4e00\u4e2a\u9690\u5c42\u5f20\u91cf\uff0c1x1xhidden_size\u76840\u5f20\u91cf hidden = torch.zeros(1, 1, hidden_size) \u8c03\u7528: decoder = DecoderRNN(hidden_size, output_size) output, hidden = decoder(input, hidden) print(output) \u8f93\u51fa\u6548\u679c: tensor([[-2.3554, -2.3551, -2.4361, -2.2158, -2.2550, -2.6237, -2.2917, -2.2663, -2.2409, -2.0783]], grad_fn=<LogSoftmaxBackward>) \u6784\u5efa\u57fa\u4e8eGRU\u548cAttention\u7684\u89e3\u7801\u5668 \u89e3\u7801\u5668\u7ed3\u6784\u56fe: class AttnDecoderRNN ( nn . Module ): def __init__ ( self , hidden_size , output_size , dropout_p = 0.1 , max_length = MAX_LENGTH ): \"\"\"\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u67094\u4e2a, hidden_size\u4ee3\u8868\u89e3\u7801\u5668\u4e2dGRU\u7684\u8f93\u5165\u5c3a\u5bf8\uff0c\u4e5f\u662f\u5b83\u7684\u9690\u5c42\u8282\u70b9\u6570 output_size\u4ee3\u8868\u6574\u4e2a\u89e3\u7801\u5668\u7684\u8f93\u51fa\u5c3a\u5bf8, \u4e5f\u662f\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u6307\u5b9a\u5c3a\u5bf8\u5373\u76ee\u6807\u8bed\u8a00\u7684\u8bcd\u8868\u5927\u5c0f dropout_p\u4ee3\u8868\u6211\u4eec\u4f7f\u7528dropout\u5c42\u65f6\u7684\u7f6e\u96f6\u6bd4\u7387\uff0c\u9ed8\u8ba40.1, max_length\u4ee3\u8868\u53e5\u5b50\u7684\u6700\u5927\u957f\u5ea6\"\"\" super ( AttnDecoderRNN , self ). __init__ () # \u5c06\u4ee5\u4e0b\u53c2\u6570\u4f20\u5165\u7c7b\u4e2d self . hidden_size = hidden_size self . output_size = output_size self . dropout_p = dropout_p self . max_length = max_length # \u5b9e\u4f8b\u5316\u4e00\u4e2aEmbedding\u5c42, \u8f93\u5165\u53c2\u6570\u662fself.output_size\u548cself.hidden_size self . embedding = nn . Embedding ( self . output_size , self . hidden_size ) # \u6839\u636eattention\u7684QKV\u7406\u8bba\uff0cattention\u7684\u8f93\u5165\u53c2\u6570\u4e3a\u4e09\u4e2aQ\uff0cK\uff0cV\uff0c # \u7b2c\u4e00\u6b65\uff0c\u4f7f\u7528Q\u4e0eK\u8fdb\u884cattention\u6743\u503c\u8ba1\u7b97\u5f97\u5230\u6743\u91cd\u77e9\u9635, \u518d\u4e0eV\u505a\u77e9\u9635\u4e58\u6cd5, \u5f97\u5230V\u7684\u6ce8\u610f\u529b\u8868\u793a\u7ed3\u679c. # \u8fd9\u91cc\u5e38\u89c1\u7684\u8ba1\u7b97\u65b9\u5f0f\u6709\u4e09\u79cd: # 1\uff0c\u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5 # 2\uff0c\u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316\u540e\u518d\u4f7f\u7528tanh\u51fd\u6570\u6fc0\u6d3b, \u7136\u540e\u518d\u8fdb\u884c\u5185\u90e8\u6c42\u548c, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u518d\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5 # 3\uff0c\u5c06Q\u4e0eK\u7684\u8f6c\u7f6e\u505a\u70b9\u79ef\u8fd0\u7b97, \u7136\u540e\u9664\u4ee5\u4e00\u4e2a\u7f29\u653e\u7cfb\u6570, \u518d\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c\u6700\u540e\u4e0eV\u505a\u5f20\u91cf\u4e58\u6cd5 # \u8bf4\u660e\uff1a\u5f53\u6ce8\u610f\u529b\u6743\u91cd\u77e9\u9635\u548cV\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\u4e14\u7b2c\u4e00\u7ef4\u4ee3\u8868\u4e3abatch\u6761\u6570\u65f6, \u5219\u505abmm\u8fd0\u7b97. # \u7b2c\u4e8c\u6b65, \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, \u5982\u679c\u662f\u62fc\u63a5\u65b9\u6cd5\uff0c\u5219\u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e8c\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5, # \u5982\u679c\u662f\u8f6c\u7f6e\u70b9\u79ef, \u4e00\u822c\u662f\u81ea\u6ce8\u610f\u529b, Q\u4e0eV\u76f8\u540c, \u5219\u4e0d\u9700\u8981\u8fdb\u884c\u4e0eQ\u7684\u62fc\u63a5.\u56e0\u6b64\u7b2c\u4e8c\u6b65\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e0e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u5168\u503c\u8ba1\u7b97\u65b9\u6cd5\u6709\u5173. # \u7b2c\u4e09\u6b65\uff0c\u6700\u540e\u4e3a\u4e86\u4f7f\u6574\u4e2aattention\u7ed3\u6784\u6309\u7167\u6307\u5b9a\u5c3a\u5bf8\u8f93\u51fa, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e8c\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362. \u5f97\u5230\u6700\u7ec8\u5bf9Q\u7684\u6ce8\u610f\u529b\u8868\u793a. # \u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u7b2c\u4e00\u6b65\u4e2d\u7684\u7b2c\u4e00\u79cd\u8ba1\u7b97\u65b9\u5f0f, \u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\u7684\u77e9\u9635, \u5b9e\u4f8b\u5316nn.Linear # \u56e0\u4e3a\u5b83\u7684\u8f93\u5165\u662fQ\uff0cK\u7684\u62fc\u63a5, \u6240\u4ee5\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fself.hidden_size * 2\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662fself.max_length # \u8fd9\u91cc\u7684Q\u662f\u89e3\u7801\u5668\u7684Embedding\u5c42\u7684\u8f93\u51fa, K\u662f\u89e3\u7801\u5668GRU\u7684\u9690\u5c42\u8f93\u51fa\uff0c\u56e0\u4e3a\u9996\u6b21\u9690\u5c42\u8fd8\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\uff0c\u4f1a\u4f7f\u7528\u7f16\u7801\u5668\u7684\u9690\u5c42\u8f93\u51fa # \u800c\u8fd9\u91cc\u7684V\u662f\u7f16\u7801\u5668\u5c42\u7684\u8f93\u51fa self . attn = nn . Linear ( self . hidden_size * 2 , self . max_length ) # \u63a5\u7740\u6211\u4eec\u5b9e\u4f8b\u5316\u53e6\u5916\u4e00\u4e2a\u7ebf\u6027\u5c42, \u5b83\u662fattention\u7406\u8bba\u4e2d\u7684\u7b2c\u56db\u6b65\u7684\u7ebf\u6027\u5c42\uff0c\u7528\u4e8e\u89c4\u8303\u8f93\u51fa\u5c3a\u5bf8 # \u8fd9\u91cc\u5b83\u7684\u8f93\u5165\u6765\u81ea\u7b2c\u4e09\u6b65\u7684\u7ed3\u679c, \u56e0\u4e3a\u7b2c\u4e09\u6b65\u7684\u7ed3\u679c\u662f\u5c06Q\u4e0e\u7b2c\u4e8c\u6b65\u7684\u7ed3\u679c\u8fdb\u884c\u62fc\u63a5, \u56e0\u6b64\u8f93\u5165\u7ef4\u5ea6\u662fself.hidden_size * 2 self . attn_combine = nn . Linear ( self . hidden_size * 2 , self . hidden_size ) # \u63a5\u7740\u5b9e\u4f8b\u5316\u4e00\u4e2ann.Dropout\u5c42\uff0c\u5e76\u4f20\u5165self.dropout_p self . dropout = nn . Dropout ( self . dropout_p ) # \u4e4b\u540e\u5b9e\u4f8b\u5316nn.GRU, \u5b83\u7684\u8f93\u5165\u548c\u9690\u5c42\u5c3a\u5bf8\u90fd\u662fself.hidden_size self . gru = nn . GRU ( self . hidden_size , self . hidden_size ) # \u6700\u540e\u5b9e\u4f8b\u5316gru\u540e\u9762\u7684\u7ebf\u6027\u5c42\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u89e3\u7801\u5668\u8f93\u51fa\u5c42. self . out = nn . Linear ( self . hidden_size , self . output_size ) def forward ( self , input , hidden , encoder_outputs ): \"\"\"forward\u51fd\u6570\u7684\u8f93\u5165\u53c2\u6570\u6709\u4e09\u4e2a, \u5206\u522b\u662f\u6e90\u6570\u636e\u8f93\u5165\u5f20\u91cf, \u521d\u59cb\u7684\u9690\u5c42\u5f20\u91cf, \u4ee5\u53ca\u89e3\u7801\u5668\u7684\u8f93\u51fa\u5f20\u91cf\"\"\" # \u6839\u636e\u7ed3\u6784\u8ba1\u7b97\u56fe, \u8f93\u5165\u5f20\u91cf\u8fdb\u884cEmbedding\u5c42\u5e76\u6269\u5c55\u7ef4\u5ea6 embedded = self . embedding ( input ). view ( 1 , 1 , - 1 ) # \u4f7f\u7528dropout\u8fdb\u884c\u968f\u673a\u4e22\u5f03\uff0c\u9632\u6b62\u8fc7\u62df\u5408 embedded = self . dropout ( embedded ) # \u8fdb\u884cattention\u7684\u6743\u91cd\u8ba1\u7b97, \u54e6\u6211\u4eec\u5462\u4f7f\u7528\u7b2c\u4e00\u79cd\u8ba1\u7b97\u65b9\u5f0f\uff1a # \u5c06Q\uff0cK\u8fdb\u884c\u7eb5\u8f74\u62fc\u63a5, \u505a\u4e00\u6b21\u7ebf\u6027\u53d8\u5316, \u6700\u540e\u4f7f\u7528softmax\u5904\u7406\u83b7\u5f97\u7ed3\u679c attn_weights = F . softmax ( self . attn ( torch . cat (( embedded [ 0 ], hidden [ 0 ]), 1 )), dim = 1 ) # \u7136\u540e\u8fdb\u884c\u7b2c\u4e00\u6b65\u7684\u540e\u534a\u90e8\u5206, \u5c06\u5f97\u5230\u7684\u6743\u91cd\u77e9\u9635\u4e0eV\u505a\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97, \u5f53\u4e8c\u8005\u90fd\u662f\u4e09\u7ef4\u5f20\u91cf\u4e14\u7b2c\u4e00\u7ef4\u4ee3\u8868\u4e3abatch\u6761\u6570\u65f6, \u5219\u505abmm\u8fd0\u7b97 attn_applied = torch . bmm ( attn_weights . unsqueeze ( 0 ), encoder_outputs . unsqueeze ( 0 )) # \u4e4b\u540e\u8fdb\u884c\u7b2c\u4e8c\u6b65, \u901a\u8fc7\u53d6[0]\u662f\u7528\u6765\u964d\u7ef4, \u6839\u636e\u7b2c\u4e00\u6b65\u91c7\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5, \u9700\u8981\u5c06Q\u4e0e\u7b2c\u4e00\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u518d\u8fdb\u884c\u62fc\u63a5 output = torch . cat (( embedded [ 0 ], attn_applied [ 0 ]), 1 ) # \u6700\u540e\u662f\u7b2c\u4e09\u6b65, \u4f7f\u7528\u7ebf\u6027\u5c42\u4f5c\u7528\u5728\u7b2c\u4e09\u6b65\u7684\u7ed3\u679c\u4e0a\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\u5e76\u6269\u5c55\u7ef4\u5ea6\uff0c\u5f97\u5230\u8f93\u51fa output = self . attn_combine ( output ). unsqueeze ( 0 ) # attention\u7ed3\u6784\u7684\u7ed3\u679c\u4f7f\u7528relu\u6fc0\u6d3b output = F . relu ( output ) # \u5c06\u6fc0\u6d3b\u540e\u7684\u7ed3\u679c\u4f5c\u4e3agru\u7684\u8f93\u5165\u548chidden\u4e00\u8d77\u4f20\u5165\u5176\u4e2d output , hidden = self . gru ( output , hidden ) # \u6700\u540e\u5c06\u7ed3\u679c\u964d\u7ef4\u5e76\u4f7f\u7528softmax\u5904\u7406\u5f97\u5230\u6700\u7ec8\u7684\u7ed3\u679c output = F . log_softmax ( self . out ( output [ 0 ]), dim = 1 ) # \u8fd4\u56de\u89e3\u7801\u5668\u7ed3\u679c\uff0c\u6700\u540e\u7684\u9690\u5c42\u5f20\u91cf\u4ee5\u53ca\u6ce8\u610f\u529b\u6743\u91cd\u5f20\u91cf return output , hidden , attn_weights def initHidden ( self ): \"\"\"\u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf\u51fd\u6570\"\"\" # \u5c06\u9690\u5c42\u5f20\u91cf\u521d\u59cb\u5316\u6210\u4e3a1x1xself.hidden_size\u5927\u5c0f\u76840\u5f20\u91cf return torch . zeros ( 1 , 1 , self . hidden_size , device = device ) \u5b9e\u4f8b\u5316\u53c2\u6570: hidden_size = 25 output_size = 10 \u8f93\u5165\u53c2\u6570: input = pair_tensor[1][0] hidden = torch.zeros(1, 1, hidden_size) # encoder_outputs\u9700\u8981\u662fencoder\u4e2d\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u5806\u53e0\u800c\u6210 # \u5b83\u7684\u5f62\u72b6\u5e94\u8be5\u662f10x25, \u6211\u4eec\u8fd9\u91cc\u76f4\u63a5\u968f\u673a\u521d\u59cb\u5316\u4e00\u4e2a\u5f20\u91cf encoder_outputs = torch.randn(10, 25) \u8c03\u7528: decoder = AttnDecoderRNN(hidden_size, output_size) output, hidden, attn_weights= decoder(input, hidden, encoder_outputs) print(output) \u8f93\u51fa\u6548\u679c: tensor([[-2.3556, -2.1418, -2.2012, -2.5109, -2.4025, -2.2182, -2.2123, -2.4608, -2.2124, -2.3827]], grad_fn=<LogSoftmaxBackward>) \u7b2c\u56db\u6b65: \u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570, \u5e76\u8fdb\u884c\u8bad\u7ec3 \u4ec0\u4e48\u662fteacher_forcing? \u5b83\u662f\u4e00\u79cd\u7528\u4e8e\u5e8f\u5217\u751f\u6210\u4efb\u52a1\u7684\u8bad\u7ec3\u6280\u5de7, \u5728seq2seq\u67b6\u6784\u4e2d, \u6839\u636e\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\u7406\u8bba\uff0c\u89e3\u7801\u5668\u6bcf\u6b21\u5e94\u8be5\u4f7f\u7528\u4e0a\u4e00\u6b65\u7684\u7ed3\u679c\u4f5c\u4e3a\u8f93\u5165\u7684\u4e00\u90e8\u5206, \u4f46\u662f\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u65e6\u4e0a\u4e00\u6b65\u7684\u7ed3\u679c\u662f\u9519\u8bef\u7684\uff0c\u5c31\u4f1a\u5bfc\u81f4\u8fd9\u79cd\u9519\u8bef\u88ab\u7d2f\u79ef\uff0c\u65e0\u6cd5\u8fbe\u5230\u8bad\u7ec3\u6548\u679c, \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u673a\u5236\u6539\u53d8\u4e0a\u4e00\u6b65\u51fa\u9519\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u8bad\u7ec3\u65f6\u6211\u4eec\u662f\u5df2\u77e5\u6b63\u786e\u7684\u8f93\u51fa\u5e94\u8be5\u662f\u4ec0\u4e48\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f3a\u5236\u5c06\u4e0a\u4e00\u6b65\u7ed3\u679c\u8bbe\u7f6e\u6210\u6b63\u786e\u7684\u8f93\u51fa, \u8fd9\u79cd\u65b9\u5f0f\u5c31\u53eb\u505ateacher_forcing. teacher_forcing\u7684\u4f5c\u7528: \u80fd\u591f\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u77eb\u6b63\u6a21\u578b\u7684\u9884\u6d4b\uff0c\u907f\u514d\u5728\u5e8f\u5217\u751f\u6210\u7684\u8fc7\u7a0b\u4e2d\u8bef\u5dee\u8fdb\u4e00\u6b65\u653e\u5927. teacher_forcing\u80fd\u591f\u6781\u5927\u7684\u52a0\u5feb\u6a21\u578b\u7684\u6536\u655b\u901f\u5ea6\uff0c\u4ee4\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u66f4\u5feb\u66f4\u5e73\u7a33. \u6784\u5efa\u8bad\u7ec3\u51fd\u6570: # \u8bbe\u7f6eteacher_forcing\u6bd4\u7387\u4e3a0 .5 teacher_forcing_ratio = 0.5 def train ( input_tensor , target_tensor , encoder , decoder , encoder_optimizer , decoder_optimizer , criterion , max_length = MAX_LENGTH ) : \"\"\"\u8bad\u7ec3\u51fd\u6570, \u8f93\u5165\u53c2\u6570\u67098\u4e2a, \u5206\u522b\u4ee3\u8868input_tensor\uff1a\u6e90\u8bed\u8a00\u8f93\u5165\u5f20\u91cf\uff0ctarget_tensor\uff1a\u76ee\u6807\u8bed\u8a00\u8f93\u5165\u5f20\u91cf\uff0cencoder, decoder\uff1a\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5b9e\u4f8b\u5316\u5bf9\u8c61 encoder_optimizer, decoder_optimizer\uff1a\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u4f18\u5316\u65b9\u6cd5\uff0ccriterion\uff1a\u635f\u5931\u51fd\u6570\u8ba1\u7b97\u65b9\u6cd5\uff0cmax_length\uff1a\u53e5\u5b50\u7684\u6700\u5927\u957f\u5ea6\"\"\" # \u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf encoder_hidden = encoder . initHidden () # \u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u4f18\u5316\u5668\u68af\u5ea6\u5f520 encoder_optimizer . zero_grad () decoder_optimizer . zero_grad () # \u6839\u636e\u6e90\u6587\u672c\u548c\u76ee\u6807\u6587\u672c\u5f20\u91cf\u83b7\u5f97\u5bf9\u5e94\u7684\u957f\u5ea6 input_length = input_tensor . size ( 0 ) target_length = target_tensor . size ( 0 ) # \u521d\u59cb\u5316\u7f16\u7801\u5668\u8f93\u51fa\u5f20\u91cf \uff0c \u5f62\u72b6\u662fmax_lengthxencoder . hidden_size\u76840\u5f20\u91cf encoder_outputs = torch . zeros ( max_length , encoder . hidden_size , device = device ) # \u521d\u59cb\u8bbe\u7f6e\u635f\u5931\u4e3a0 loss = 0 # \u5faa\u73af\u904d\u5386\u8f93\u5165\u5f20\u91cf\u7d22\u5f15 for ei in range ( input_length ) : # \u6839\u636e\u7d22\u5f15\u4eceinput_tensor\u53d6\u51fa\u5bf9\u5e94\u7684\u5355\u8bcd\u7684\u5f20\u91cf\u8868\u793a \uff0c \u548c\u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf\u4e00\u540c\u4f20\u5165encoder\u5bf9\u8c61\u4e2d encoder_output , encoder_hidden = encoder ( input_tensor [ ei ] , encoder_hidden ) # \u5c06\u6bcf\u6b21\u83b7\u5f97\u7684\u8f93\u51faencoder_output ( \u4e09\u7ef4\u5f20\u91cf ), \u4f7f\u7528 [ 0, 0 ] \u964d\u4e24\u7ef4\u53d8\u6210\u5411\u91cf\u4f9d\u6b21\u5b58\u5165\u5230encoder_outputs # \u8fd9\u6837encoder_outputs\u6bcf\u4e00\u884c\u5b58\u7684\u90fd\u662f\u5bf9\u5e94\u7684\u53e5\u5b50\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u901a\u8fc7\u7f16\u7801\u5668\u7684\u8f93\u51fa\u7ed3\u679c encoder_outputs [ ei ] = encoder_output [ 0, 0 ] # \u521d\u59cb\u5316\u89e3\u7801\u5668\u7684\u7b2c\u4e00\u4e2a\u8f93\u5165 \uff0c \u5373\u8d77\u59cb\u7b26 decoder_input = torch . tensor ( [ [SOS_token ] ] , device = device ) # \u521d\u59cb\u5316\u89e3\u7801\u5668\u7684\u9690\u5c42\u5f20\u91cf\u5373\u7f16\u7801\u5668\u7684\u9690\u5c42\u8f93\u51fa decoder_hidden = encoder_hidden # \u6839\u636e\u968f\u673a\u6570\u4e0eteacher_forcing_ratio\u5bf9\u6bd4\u5224\u65ad\u662f\u5426\u4f7f\u7528teacher_forcing use_teacher_forcing = True if random . random () < teacher_forcing_ratio else False # \u5982\u679c\u4f7f\u7528teacher_forcing if use_teacher_forcing : # \u5faa\u73af\u904d\u5386\u76ee\u6807\u5f20\u91cf\u7d22\u5f15 for di in range ( target_length ) : # \u5c06decoder_input , decoder_hidden , encoder_outputs\u5373attention\u4e2d\u7684QKV , # \u4f20\u5165\u89e3\u7801\u5668\u5bf9\u8c61 , \u83b7\u5f97decoder_output , decoder_hidden , decoder_attention decoder_output , decoder_hidden , decoder_attention = decoder ( decoder_input , decoder_hidden , encoder_outputs ) # \u56e0\u4e3a\u4f7f\u7528\u4e86teacher_forcing , \u65e0\u8bba\u89e3\u7801\u5668\u8f93\u51fa\u7684decoder_output\u662f\u4ec0\u4e48 , \u6211\u4eec\u90fd\u53ea # \u4f7f\u7528 \u2018 \u6b63\u786e\u7684\u7b54\u6848 \u2019\uff0c \u5373target_tensor [ di ] \u6765\u8ba1\u7b97\u635f\u5931 loss += criterion ( decoder_output , target_tensor [ di ] ) # \u5e76\u5f3a\u5236\u5c06\u4e0b\u4e00\u6b21\u7684\u89e3\u7801\u5668\u8f93\u5165\u8bbe\u7f6e\u4e3a \u2018 \u6b63\u786e\u7684\u7b54\u6848 \u2019 decoder_input = target_tensor [ di ] else : # \u5982\u679c\u4e0d\u4f7f\u7528teacher_forcing # \u4ecd\u7136\u904d\u5386\u76ee\u6807\u5f20\u91cf\u7d22\u5f15 for di in range ( target_length ) : # \u5c06decoder_input , decoder_hidden , encoder_outputs\u4f20\u5165\u89e3\u7801\u5668\u5bf9\u8c61 # \u83b7\u5f97decoder_output , decoder_hidden , decoder_attention decoder_output , decoder_hidden , decoder_attention = decoder ( decoder_input , decoder_hidden , encoder_outputs ) # \u53ea\u4e0d\u8fc7\u8fd9\u91cc\u6211\u4eec\u5c06\u4ecedecoder_output\u53d6\u51fa\u7b54\u6848 topv , topi = decoder_output . topk ( 1 ) # \u635f\u5931\u8ba1\u7b97\u4ecd\u7136\u4f7f\u7528decoder_output\u548ctarget_tensor [ di ] loss += criterion ( decoder_output , target_tensor [ di ] ) # \u6700\u540e\u5982\u679c\u8f93\u51fa\u503c\u662f\u7ec8\u6b62\u7b26 \uff0c \u5219\u5faa\u73af\u505c\u6b62 if topi . squeeze (). item () == EOS_token : break # \u5426\u5219 \uff0c \u5e76\u5bf9topi\u964d\u7ef4\u5e76\u5206\u79bb\u8d4b\u503c\u7ed9decoder_input\u4ee5\u4fbf\u8fdb\u884c\u4e0b\u6b21\u8fd0\u7b97 # \u8fd9\u91cc\u7684detach\u7684\u5206\u79bb\u4f5c\u7528\u4f7f\u5f97\u8fd9\u4e2adecoder_input\u4e0e\u6a21\u578b\u6784\u5efa\u7684\u5f20\u91cf\u56fe\u65e0\u5173 \uff0c \u76f8\u5f53\u4e8e\u5168\u65b0\u7684\u5916\u754c\u8f93\u5165 decoder_input = topi . squeeze (). detach () # \u8bef\u5dee\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u8fdb\u884c\u4f18\u5316\u5373\u53c2\u6570\u66f4\u65b0 encoder_optimizer . step () decoder_optimizer . step () # \u6700\u540e\u8fd4\u56de\u5e73\u5747\u635f\u5931 return loss . item () / target_length \u6784\u5efa\u65f6\u95f4\u8ba1\u7b97\u51fd\u6570: # \u5bfc\u5165\u65f6\u95f4\u548c\u6570\u5b66\u5de5\u5177\u5305 import time import math def timeSince ( since ): \"\u83b7\u5f97\u6bcf\u6b21\u6253\u5370\u7684\u8bad\u7ec3\u8017\u65f6, since\u662f\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\" # \u83b7\u5f97\u5f53\u524d\u65f6\u95f4 now = time . time () # \u83b7\u5f97\u65f6\u95f4\u5dee\uff0c\u5c31\u662f\u8bad\u7ec3\u8017\u65f6 s = now - since # \u5c06\u79d2\u8f6c\u5316\u4e3a\u5206\u949f, \u5e76\u53d6\u6574 m = math . floor ( s / 60 ) # \u8ba1\u7b97\u5269\u4e0b\u4e0d\u591f\u51d1\u62101\u5206\u949f\u7684\u79d2\u6570 s -= m * 60 # \u8fd4\u56de\u6307\u5b9a\u683c\u5f0f\u7684\u8017\u65f6 return ' %d m %d s' % ( m , s ) \u8f93\u5165\u53c2\u6570: # \u5047\u5b9a\u6a21\u578b\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\u662f10min\u4e4b\u524d since = time.time() - 10*60 \u8c03\u7528: period = timeSince(since) print(period) \u8f93\u51fa\u6548\u679c: 10 m 0 s \u8c03\u7528\u8bad\u7ec3\u51fd\u6570\u5e76\u6253\u5370\u65e5\u5fd7\u548c\u5236\u56fe: # \u5bfc\u5165plt\u4ee5\u4fbf\u7ed8\u5236\u635f\u5931\u66f2\u7ebf import matplotlib.pyplot as plt def trainIters ( encoder , decoder , n_iters , print_every = 1000 , plot_every = 100 , learning_rate = 0.01 ): \"\"\"\u8bad\u7ec3\u8fed\u4ee3\u51fd\u6570, \u8f93\u5165\u53c2\u6570\u67096\u4e2a\uff0c\u5206\u522b\u662fencoder, decoder: \u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5bf9\u8c61\uff0c n_iters: \u603b\u8fed\u4ee3\u6b65\u6570, print_every:\u6253\u5370\u65e5\u5fd7\u95f4\u9694, plot_every:\u7ed8\u5236\u635f\u5931\u66f2\u7ebf\u95f4\u9694, learning_rate\u5b66\u4e60\u7387\"\"\" # \u83b7\u5f97\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\u6233 start = time . time () # \u6bcf\u4e2a\u635f\u5931\u95f4\u9694\u7684\u5e73\u5747\u635f\u5931\u4fdd\u5b58\u5217\u8868\uff0c\u7528\u4e8e\u7ed8\u5236\u635f\u5931\u66f2\u7ebf plot_losses = [] # \u6bcf\u4e2a\u6253\u5370\u65e5\u5fd7\u95f4\u9694\u7684\u603b\u635f\u5931\uff0c\u521d\u59cb\u4e3a0 print_loss_total = 0 # \u6bcf\u4e2a\u7ed8\u5236\u635f\u5931\u95f4\u9694\u7684\u603b\u635f\u5931\uff0c\u521d\u59cb\u4e3a0 plot_loss_total = 0 # \u4f7f\u7528\u9884\u5b9a\u4e49\u7684SGD\u4f5c\u4e3a\u4f18\u5316\u5668\uff0c\u5c06\u53c2\u6570\u548c\u5b66\u4e60\u7387\u4f20\u5165\u5176\u4e2d encoder_optimizer = optim . SGD ( encoder . parameters (), lr = learning_rate ) decoder_optimizer = optim . SGD ( decoder . parameters (), lr = learning_rate ) # \u9009\u62e9\u635f\u5931\u51fd\u6570 criterion = nn . NLLLoss () # \u6839\u636e\u8bbe\u7f6e\u8fed\u4ee3\u6b65\u8fdb\u884c\u5faa\u73af for iter in range ( 1 , n_iters + 1 ): # \u6bcf\u6b21\u4ece\u8bed\u8a00\u5bf9\u5217\u8868\u4e2d\u968f\u673a\u53d6\u51fa\u4e00\u6761\u4f5c\u4e3a\u8bad\u7ec3\u8bed\u53e5 training_pair = tensorsFromPair ( random . choice ( pairs )) # \u5206\u522b\u4ecetraining_pair\u4e2d\u53d6\u51fa\u8f93\u5165\u5f20\u91cf\u548c\u76ee\u6807\u5f20\u91cf input_tensor = training_pair [ 0 ] target_tensor = training_pair [ 1 ] # \u901a\u8fc7train\u51fd\u6570\u83b7\u5f97\u6a21\u578b\u8fd0\u884c\u7684\u635f\u5931 loss = train ( input_tensor , target_tensor , encoder , decoder , encoder_optimizer , decoder_optimizer , criterion ) # \u5c06\u635f\u5931\u8fdb\u884c\u7d2f\u548c print_loss_total += loss plot_loss_total += loss # \u5f53\u8fed\u4ee3\u6b65\u8fbe\u5230\u65e5\u5fd7\u6253\u5370\u95f4\u9694\u65f6 if iter % print_every == 0 : # \u901a\u8fc7\u603b\u635f\u5931\u9664\u4ee5\u95f4\u9694\u5f97\u5230\u5e73\u5747\u635f\u5931 print_loss_avg = print_loss_total / print_every # \u5c06\u603b\u635f\u5931\u5f520 print_loss_total = 0 # \u6253\u5370\u65e5\u5fd7\uff0c\u65e5\u5fd7\u5185\u5bb9\u5206\u522b\u662f\uff1a\u8bad\u7ec3\u8017\u65f6\uff0c\u5f53\u524d\u8fed\u4ee3\u6b65\uff0c\u5f53\u524d\u8fdb\u5ea6\u767e\u5206\u6bd4\uff0c\u5f53\u524d\u5e73\u5747\u635f\u5931 print ( ' %s ( %d %d%% ) %.4f ' % ( timeSince ( start ), iter , iter / n_iters * 100 , print_loss_avg )) # \u5f53\u8fed\u4ee3\u6b65\u8fbe\u5230\u635f\u5931\u7ed8\u5236\u95f4\u9694\u65f6 if iter % plot_every == 0 : # \u901a\u8fc7\u603b\u635f\u5931\u9664\u4ee5\u95f4\u9694\u5f97\u5230\u5e73\u5747\u635f\u5931 plot_loss_avg = plot_loss_total / plot_every # \u5c06\u5e73\u5747\u635f\u5931\u88c5\u8fdbplot_losses\u5217\u8868 plot_losses . append ( plot_loss_avg ) # \u603b\u635f\u5931\u5f520 plot_loss_total = 0 # \u7ed8\u5236\u635f\u5931\u66f2\u7ebf plt . figure () plt . plot ( plot_losses ) # \u4fdd\u5b58\u5230\u6307\u5b9a\u8def\u5f84 plt . savefig ( \"./s2s_loss.png\" ) \u8f93\u5165\u53c2\u6570: # \u8bbe\u7f6e\u9690\u5c42\u5927\u5c0f\u4e3a256 \uff0c\u4e5f\u662f\u8bcd\u5d4c\u5165\u7ef4\u5ea6 hidden_size = 256 # \u901a\u8fc7input_lang.n_words\u83b7\u53d6\u8f93\u5165\u8bcd\u6c47\u603b\u6570\uff0c\u4e0ehidden_size\u4e00\u540c\u4f20\u5165EncoderRNN\u7c7b\u4e2d # \u5f97\u5230\u7f16\u7801\u5668\u5bf9\u8c61encoder1 encoder1 = EncoderRNN(input_lang.n_words, hidden_size).to(device) # \u901a\u8fc7output_lang.n_words\u83b7\u53d6\u76ee\u6807\u8bcd\u6c47\u603b\u6570\uff0c\u4e0ehidden_size\u548cdropout_p\u4e00\u540c\u4f20\u5165AttnDecoderRNN\u7c7b\u4e2d # \u5f97\u5230\u89e3\u7801\u5668\u5bf9\u8c61attn_decoder1 attn_decoder1 = AttnDecoderRNN(hidden_size, output_lang.n_words, dropout_p=0.1).to(device) # \u8bbe\u7f6e\u8fed\u4ee3\u6b65\u6570 n_iters = 75000 # \u8bbe\u7f6e\u65e5\u5fd7\u6253\u5370\u95f4\u9694 print_every = 5000 \u8c03\u7528: # \u8c03\u7528trainIters\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\uff0c\u5c06\u7f16\u7801\u5668\u5bf9\u8c61encoder1\uff0c\u7801\u5668\u5bf9\u8c61attn_decoder1\uff0c\u8fed\u4ee3\u6b65\u6570\uff0c\u65e5\u5fd7\u6253\u5370\u95f4\u9694\u4f20\u5165\u5176\u4e2d trainIters(encoder1, attn_decoder1, n_iters, print_every=print_every) \u8f93\u51fa\u6548\u679c: 3 m 35 s ( 5000 6 % ) 3.4159 7 m 12 s ( 10000 13 % ) 2.7805 10 m 46 s ( 15000 20 % ) 2.4663 14 m 23 s ( 20000 26 % ) 2.1693 18 m 6 s ( 25000 33 % ) 1.9303 21 m 44 s ( 30000 40 % ) 1.7601 25 m 23 s ( 35000 46 % ) 1.6207 29 m 8 s ( 40000 53 % ) 1.4973 32 m 44 s ( 45000 60 % ) 1.3832 36 m 22 s ( 50000 66 % ) 1.2694 40 m 6 s ( 55000 73 % ) 1.1813 43 m 51 s ( 60000 80 % ) 1.0907 47 m 29 s ( 65000 86 % ) 1.0425 51 m 10 s ( 70000 93 % ) 0.9955 54 m 48 s ( 75000 100 % ) 0.9158 \u635f\u5931\u4e0b\u964d\u66f2\u7ebf: \u635f\u5931\u66f2\u7ebf\u5206\u6790: \u4e00\u76f4\u4e0b\u964d\u7684\u635f\u5931\u66f2\u7ebf, \u8bf4\u660e\u6a21\u578b\u6b63\u5728\u6536\u655b, \u80fd\u591f\u4ece\u6570\u636e\u4e2d\u627e\u5230\u4e00\u4e9b\u89c4\u5f8b\u5e94\u7528\u4e8e\u6570\u636e. \u7b2c\u4e94\u6b65: \u6784\u5efa\u6a21\u578b\u8bc4\u4f30\u51fd\u6570, \u5e76\u8fdb\u884c\u6d4b\u8bd5\u4ee5\u53caAttention\u6548\u679c\u5206\u6790. \u6784\u5efa\u6a21\u578b\u8bc4\u4f30\u51fd\u6570: def evaluate ( encoder , decoder , sentence , max_length = MAX_LENGTH ) : \"\"\"\u8bc4\u4f30\u51fd\u6570\uff0c\u8f93\u5165\u53c2\u6570\u67094\u4e2a\uff0c\u5206\u522b\u662fencoder, decoder: \u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5bf9\u8c61\uff0c sentence:\u9700\u8981\u8bc4\u4f30\u7684\u53e5\u5b50\uff0cmax_length:\u53e5\u5b50\u7684\u6700\u5927\u957f\u5ea6\"\"\" # \u8bc4\u4f30\u9636\u6bb5\u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad () : # \u5bf9\u8f93\u5165\u7684\u53e5\u5b50\u8fdb\u884c\u5f20\u91cf\u8868\u793a input_tensor = tensorFromSentence ( input_lang , sentence ) # \u83b7\u5f97\u8f93\u5165\u7684\u53e5\u5b50\u957f\u5ea6 input_length = input_tensor . size () [ 0 ] # \u521d\u59cb\u5316\u7f16\u7801\u5668\u9690\u5c42\u5f20\u91cf encoder_hidden = encoder . initHidden () # \u521d\u59cb\u5316\u7f16\u7801\u5668\u8f93\u51fa\u5f20\u91cf \uff0c \u662fmax_lengthxencoder . hidden_size\u76840\u5f20\u91cf encoder_outputs = torch . zeros ( max_length , encoder . hidden_size , device = device ) # \u5faa\u73af\u904d\u5386\u8f93\u5165\u5f20\u91cf\u7d22\u5f15 for ei in range ( input_length ) : # \u6839\u636e\u7d22\u5f15\u4eceinput_tensor\u53d6\u51fa\u5bf9\u5e94\u7684\u5355\u8bcd\u7684\u5f20\u91cf\u8868\u793a \uff0c \u548c\u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf\u4e00\u540c\u4f20\u5165encoder\u5bf9\u8c61\u4e2d encoder_output , encoder_hidden = encoder ( input_tensor [ ei ] , encoder_hidden ) #\u5c06\u6bcf\u6b21\u83b7\u5f97\u7684\u8f93\u51faencoder_output ( \u4e09\u7ef4\u5f20\u91cf ), \u4f7f\u7528 [ 0, 0 ] \u964d\u4e24\u7ef4\u53d8\u6210\u5411\u91cf\u4f9d\u6b21\u5b58\u5165\u5230encoder_outputs # \u8fd9\u6837encoder_outputs\u6bcf\u4e00\u884c\u5b58\u7684\u90fd\u662f\u5bf9\u5e94\u7684\u53e5\u5b50\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u901a\u8fc7\u7f16\u7801\u5668\u7684\u8f93\u51fa\u7ed3\u679c encoder_outputs [ ei ] += encoder_output [ 0, 0 ] # \u521d\u59cb\u5316\u89e3\u7801\u5668\u7684\u7b2c\u4e00\u4e2a\u8f93\u5165 \uff0c \u5373\u8d77\u59cb\u7b26 decoder_input = torch . tensor ( [ [SOS_token ] ] , device = device ) # \u521d\u59cb\u5316\u89e3\u7801\u5668\u7684\u9690\u5c42\u5f20\u91cf\u5373\u7f16\u7801\u5668\u7684\u9690\u5c42\u8f93\u51fa decoder_hidden = encoder_hidden # \u521d\u59cb\u5316\u9884\u6d4b\u7684\u8bcd\u6c47\u5217\u8868 decoded_words = [] # \u521d\u59cb\u5316attention\u5f20\u91cf decoder_attentions = torch . zeros ( max_length , max_length ) # \u5f00\u59cb\u5faa\u73af\u89e3\u7801 for di in range ( max_length ) : # \u5c06decoder_input , decoder_hidden , encoder_outputs\u4f20\u5165\u89e3\u7801\u5668\u5bf9\u8c61 # \u83b7\u5f97decoder_output , decoder_hidden , decoder_attention decoder_output , decoder_hidden , decoder_attention = decoder ( decoder_input , decoder_hidden , encoder_outputs ) # \u53d6\u6240\u6709\u7684attention\u7ed3\u679c\u5b58\u5165\u521d\u59cb\u5316\u7684attention\u5f20\u91cf\u4e2d decoder_attentions [ di ] = decoder_attention . data # \u4ece\u89e3\u7801\u5668\u8f93\u51fa\u4e2d\u83b7\u5f97\u6982\u7387\u6700\u9ad8\u7684\u503c\u53ca\u5176\u7d22\u5f15\u5bf9\u8c61 topv , topi = decoder_output . data . topk ( 1 ) # \u4ece\u7d22\u5f15\u5bf9\u8c61\u4e2d\u53d6\u51fa\u5b83\u7684\u503c\u4e0e\u7ed3\u675f\u6807\u5fd7\u503c\u4f5c\u5bf9\u6bd4 if topi . item () == EOS_token : # \u5982\u679c\u662f\u7ed3\u675f\u6807\u5fd7\u503c \uff0c \u5219\u5c06\u7ed3\u675f\u6807\u5fd7\u88c5\u8fdbdecoded_words\u5217\u8868 \uff0c \u4ee3\u8868\u7ffb\u8bd1\u7ed3\u675f decoded_words . append ( '<EOS>' ) # \u5faa\u73af\u9000\u51fa break else : # \u5426\u5219 \uff0c \u6839\u636e\u7d22\u5f15\u627e\u5230\u5b83\u5728\u8f93\u51fa\u8bed\u8a00\u7684index2word\u5b57\u5178\u4e2d\u5bf9\u5e94\u7684\u5355\u8bcd\u88c5\u8fdbdecoded_words decoded_words . append ( output_lang . index2word [ topi.item() ] ) # \u6700\u540e\u5c06\u672c\u6b21\u9884\u6d4b\u7684\u7d22\u5f15\u964d\u7ef4\u5e76\u5206\u79bb\u8d4b\u503c\u7ed9decoder_input \uff0c \u4ee5\u4fbf\u4e0b\u6b21\u8fdb\u884c\u9884\u6d4b decoder_input = topi . squeeze (). detach () # \u8fd4\u56de\u7ed3\u679cdecoded_words \uff0c \u4ee5\u53ca\u5b8c\u6574\u6ce8\u610f\u529b\u5f20\u91cf , \u628a\u6ca1\u6709\u7528\u5230\u7684\u90e8\u5206\u5207\u6389 return decoded_words , decoder_attentions [ :di + 1 ] \u968f\u673a\u9009\u62e9\u6307\u5b9a\u6570\u91cf\u7684\u6570\u636e\u8fdb\u884c\u8bc4\u4f30: def evaluateRandomly ( encoder , decoder , n = 6 ) : \"\"\" \u968f\u673a\u6d4b\u8bd5\u51fd\u6570, \u8f93\u5165\u53c2\u6570encoder, decoder\u4ee3\u8868\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5bf9\u8c61\uff0cn\u4ee3\u8868\u6d4b\u8bd5\u6570 \"\"\" # \u5bf9\u6d4b\u8bd5\u6570\u8fdb\u884c\u5faa\u73af for i in range ( n ) : # \u4ece pairs \u968f\u673a\u9009\u62e9\u8bed\u8a00\u5bf9 pair = random . choice ( pairs ) # > \u4ee3\u8868\u8f93\u5165 print ( ' > ' , pair [ 0 ] ) # = \u4ee3\u8868\u6b63\u786e\u7684\u8f93\u51fa print ( ' = ' , pair [ 1 ] ) # \u8c03\u7528 evaluate \u8fdb\u884c\u9884\u6d4b output_words , attentions = evaluate ( encoder , decoder , pair [ 0 ] ) # \u5c06\u7ed3\u679c\u8fde\u6210\u53e5\u5b50 output_sentence = ' ' . join ( output_words ) # < \u4ee3\u8868\u6a21\u578b\u7684\u8f93\u51fa print ( ' < ' , output_sentence ) print ( '' ) \u8c03\u7528: # \u8c03\u7528evaluateRandomly\u8fdb\u884c\u6a21\u578b\u6d4b\u8bd5\uff0c\u5c06\u7f16\u7801\u5668\u5bf9\u8c61encoder1\uff0c\u7801\u5668\u5bf9\u8c61attn_decoder1\u4f20\u5165\u5176\u4e2d evaluateRandomly(encoder1, attn_decoder1) \u8f93\u51fa\u6548\u679c: > i m impressed with your french . = je suis impressionne par votre francais . < je suis impressionnee par votre francais . <EOS> > i m more than a friend . = je suis plus qu une amie . < je suis plus qu une amie . <EOS> > she is beautiful like her mother . = elle est belle comme sa mere . < elle est sa sa mere . <EOS> > you re winning aren t you ? = vous gagnez n est ce pas ? < tu restez n est ce pas ? <EOS> > he is angry with you . = il est en colere apres toi . < il est en colere apres toi . <EOS> > you re very timid . = vous etes tres craintifs . < tu es tres craintive . <EOS> Attention\u5f20\u91cf\u5236\u56fe: sentence = \"we re both teachers .\" # \u8c03\u7528\u8bc4\u4f30\u51fd\u6570 output_words, attentions = evaluate( encoder1, attn_decoder1, sentence) print(output_words) # \u5c06attention\u5f20\u91cf\u8f6c\u5316\u6210numpy, \u4f7f\u7528matshow\u7ed8\u5236 plt.matshow(attentions.numpy()) # \u4fdd\u5b58\u56fe\u50cf plt.savefig(\"./s2s_attn.png\") \u8f93\u51fa\u6548\u679c: ['nous', 'sommes', 'toutes', 'deux', 'enseignantes', '.', '<EOS>'] Attention\u53ef\u89c6\u5316: \u5206\u6790: Attention\u56fe\u50cf\u7684\u7eb5\u5750\u6807\u4ee3\u8868\u8f93\u5165\u7684\u6e90\u8bed\u8a00\u5404\u4e2a\u8bcd\u6c47\u5bf9\u5e94\u7684\u7d22\u5f15, 0-6\u5206\u522b\u5bf9\u5e94[\"we\", \"re\", \"both\", \"teachers\", \".\", \" \"], \u7eb5\u5750\u6807\u4ee3\u8868\u751f\u6210\u7684\u76ee\u6807\u8bed\u8a00\u5404\u4e2a\u8bcd\u6c47\u5bf9\u5e94\u7684\u7d22\u5f15, 0-7\u4ee3\u8868['nous', 'sommes', 'toutes', 'deux', 'enseignantes', '.', ' '], \u56fe\u4e2d\u6d45\u8272\u5c0f\u65b9\u5757(\u989c\u8272\u8d8a\u6d45\u8bf4\u660e\u5f71\u54cd\u8d8a\u5927)\u4ee3\u8868\u8bcd\u6c47\u4e4b\u95f4\u7684\u5f71\u54cd\u5173\u7cfb, \u6bd4\u5982\u6e90\u8bed\u8a00\u7684\u7b2c1\u4e2a\u8bcd\u6c47\u5bf9\u751f\u6210\u76ee\u6807\u8bed\u8a00\u7684\u7b2c1\u4e2a\u8bcd\u6c47\u5f71\u54cd\u6700\u5927, \u6e90\u8bed\u8a00\u7684\u7b2c4\uff0c5\u4e2a\u8bcd\u5bf9\u751f\u6210\u76ee\u6807\u8bed\u8a00\u7684\u7b2c5\u4e2a\u8bcd\u4f1a\u5f71\u54cd\u6700\u5927, \u901a\u8fc7\u8fd9\u6837\u7684\u53ef\u89c6\u5316\u56fe\u50cf, \u6211\u4eec\u53ef\u4ee5\u77e5\u9053Attention\u7684\u6548\u679c\u597d\u574f, \u4e0e\u6211\u4eec\u4eba\u4e3a\u53bb\u5224\u5b9a\u5230\u5e95\u8fd8\u6709\u591a\u5927\u7684\u5dee\u8ddd. \u8fdb\u800c\u8861\u91cf\u6211\u4eec\u8bad\u7ec3\u6a21\u578b\u7684\u53ef\u7528\u6027. \u5c0f\u8282\u603b\u7ed3: seq2seq\u6a21\u578b\u67b6\u6784\u5206\u6790: \u4ece\u56fe\u4e2d\u53ef\u77e5, seq2seq\u6a21\u578b\u67b6\u6784, \u5305\u62ec\u4e24\u90e8\u5206\u5206\u522b\u662fencoder(\u7f16\u7801\u5668)\u548cdecoder(\u89e3\u7801\u5668), \u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u7684\u5185\u90e8\u5b9e\u73b0\u90fd\u4f7f\u7528\u4e86GRU\u6a21\u578b, \u8fd9\u91cc\u5b83\u8981\u5b8c\u6210\u7684\u662f\u4e00\u4e2a\u4e2d\u6587\u5230\u82f1\u6587\u7684\u7ffb\u8bd1: \u6b22\u8fce \u6765 \u5317\u4eac --> welcome to BeiJing. \u7f16\u7801\u5668\u9996\u5148\u5904\u7406\u4e2d\u6587\u8f93\u5165\"\u6b22\u8fce \u6765 \u5317\u4eac\", \u901a\u8fc7GRU\u6a21\u578b\u83b7\u5f97\u6bcf\u4e2a\u65f6\u95f4\u6b65\u7684\u8f93\u51fa\u5f20\u91cf\uff0c\u6700\u540e\u5c06\u5b83\u4eec\u62fc\u63a5\u6210\u4e00\u4e2a\u4e2d\u95f4\u8bed\u4e49\u5f20\u91cfc, \u63a5\u7740\u89e3\u7801\u5668\u5c06\u4f7f\u7528\u8fd9\u4e2a\u4e2d\u95f4\u8bed\u4e49\u5f20\u91cfc\u4ee5\u53ca\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u9690\u5c42\u5f20\u91cf, \u9010\u4e2a\u751f\u6210\u5bf9\u5e94\u7684\u7ffb\u8bd1\u8bed\u8a00. \u57fa\u4e8eGRU\u7684seq2seq\u6a21\u578b\u67b6\u6784\u5b9e\u73b0\u7ffb\u8bd1\u7684\u8fc7\u7a0b: \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305. \u7b2c\u4e8c\u6b65: \u5bf9\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u6570\u636e\u8fdb\u884c\u5904\u7406, \u4ee5\u6ee1\u8db3\u6a21\u578b\u8bad\u7ec3\u8981\u6c42. \u7b2c\u4e09\u6b65: \u6784\u5efa\u57fa\u4e8eGRU\u7684\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668. \u7b2c\u56db\u6b65: \u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570, \u5e76\u8fdb\u884c\u8bad\u7ec3. \u7b2c\u4e94\u6b65: \u6784\u5efa\u6a21\u578b\u8bc4\u4f30\u51fd\u6570, \u5e76\u8fdb\u884c\u6d4b\u8bd5\u4ee5\u53caAttention\u6548\u679c\u5206\u6790. \u7b2c\u4e00\u6b65: \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 python\u7248\u672c\u4f7f\u75283.6.x, pytorch\u7248\u672c\u4f7f\u75281.3.1 \u7b2c\u4e8c\u6b65: \u5bf9\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u6570\u636e\u8fdb\u884c\u5904\u7406, \u4ee5\u6ee1\u8db3\u6a21\u578b\u8bad\u7ec3\u8981\u6c42 \u5c06\u6307\u5b9a\u8bed\u8a00\u4e2d\u7684\u8bcd\u6c47\u6620\u5c04\u6210\u6570\u503c \u5b57\u7b26\u89c4\u8303\u5316 \u5c06\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58, \u5e76\u5b9e\u4f8b\u5316\u7c7bLang \u8fc7\u6ee4\u51fa\u7b26\u5408\u6211\u4eec\u8981\u6c42\u7684\u8bed\u8a00\u5bf9 \u5bf9\u4ee5\u4e0a\u6570\u636e\u51c6\u5907\u51fd\u6570\u8fdb\u884c\u6574\u5408, \u5e76\u4f7f\u7528\u7c7bLang\u5bf9\u8bed\u8a00\u5bf9\u8fdb\u884c\u6570\u503c\u6620\u5c04 \u5c06\u8bed\u8a00\u5bf9\u8f6c\u5316\u4e3a\u6a21\u578b\u8f93\u5165\u9700\u8981\u7684\u5f20\u91cf \u7b2c\u4e09\u6b65: \u6784\u5efa\u57fa\u4e8eGRU\u7684\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668 \u6784\u5efa\u57fa\u4e8eGRU\u7684\u7f16\u7801\u5668 \u6784\u5efa\u57fa\u4e8eGRU\u7684\u89e3\u7801\u5668 \u6784\u5efa\u57fa\u4e8eGRU\u548cAttention\u7684\u89e3\u7801\u5668 \u7b2c\u56db\u6b65: \u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570, \u5e76\u8fdb\u884c\u8bad\u7ec3 \u4ec0\u4e48\u662fteacher_forcing: \u5b83\u662f\u4e00\u79cd\u7528\u4e8e\u5e8f\u5217\u751f\u6210\u4efb\u52a1\u7684\u8bad\u7ec3\u6280\u5de7, \u5728seq2seq\u67b6\u6784\u4e2d, \u6839\u636e\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\u7406\u8bba\uff0c\u89e3\u7801\u5668\u6bcf\u6b21\u5e94\u8be5\u4f7f\u7528\u4e0a\u4e00\u6b65\u7684\u7ed3\u679c\u4f5c\u4e3a\u8f93\u5165\u7684\u4e00\u90e8\u5206, \u4f46\u662f\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u65e6\u4e0a\u4e00\u6b65\u7684\u7ed3\u679c\u662f\u9519\u8bef\u7684\uff0c\u5c31\u4f1a\u5bfc\u81f4\u8fd9\u79cd\u9519\u8bef\u88ab\u7d2f\u79ef\uff0c\u65e0\u6cd5\u8fbe\u5230\u8bad\u7ec3\u6548\u679c, \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u673a\u5236\u6539\u53d8\u4e0a\u4e00\u6b65\u51fa\u9519\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u8bad\u7ec3\u65f6\u6211\u4eec\u662f\u5df2\u77e5\u6b63\u786e\u7684\u8f93\u51fa\u5e94\u8be5\u662f\u4ec0\u4e48\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f3a\u5236\u5c06\u4e0a\u4e00\u6b65\u7ed3\u679c\u8bbe\u7f6e\u6210\u6b63\u786e\u7684\u8f93\u51fa, \u8fd9\u79cd\u65b9\u5f0f\u5c31\u53eb\u505ateacher_forcing. teacher_forcing\u7684\u4f5c\u7528: \u80fd\u591f\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u77eb\u6b63\u6a21\u578b\u7684\u9884\u6d4b\uff0c\u907f\u514d\u5728\u5e8f\u5217\u751f\u6210\u7684\u8fc7\u7a0b\u4e2d\u8bef\u5dee\u8fdb\u4e00\u6b65\u653e\u5927. \u53e6\u5916, teacher_forcing\u80fd\u591f\u6781\u5927\u7684\u52a0\u5feb\u6a21\u578b\u7684\u6536\u655b\u901f\u5ea6\uff0c\u4ee4\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u66f4\u5feb\u66f4\u5e73\u7a33. \u6784\u5efa\u8bad\u7ec3\u51fd\u6570train \u6784\u5efa\u65f6\u95f4\u8ba1\u7b97\u51fd\u6570timeSince \u8c03\u7528\u8bad\u7ec3\u51fd\u6570\u5e76\u6253\u5370\u65e5\u5fd7\u548c\u5236\u56fe \u635f\u5931\u66f2\u7ebf\u5206\u6790: \u4e00\u76f4\u4e0b\u964d\u7684\u635f\u5931\u66f2\u7ebf, \u8bf4\u660e\u6a21\u578b\u6b63\u5728\u6536\u655b, \u80fd\u591f\u4ece\u6570\u636e\u4e2d\u627e\u5230\u4e00\u4e9b\u89c4\u5f8b\u5e94\u7528\u4e8e\u6570\u636e \u7b2c\u4e94\u6b65: \u6784\u5efa\u6a21\u578b\u8bc4\u4f30\u51fd\u6570, \u5e76\u8fdb\u884c\u6d4b\u8bd5\u4ee5\u53caAttention\u6548\u679c\u5206\u6790 \u6784\u5efa\u6a21\u578b\u8bc4\u4f30\u51fd\u6570evaluate \u968f\u673a\u9009\u62e9\u6307\u5b9a\u6570\u91cf\u7684\u6570\u636e\u8fdb\u884c\u8bc4\u4f30 \u8fdb\u884c\u4e86Attention\u53ef\u89c6\u5316\u5206\u6790","title":"2.2 \u4f7f\u7528seq2seq\u6a21\u578b\u67b6\u6784\u5b9e\u73b0\u82f1\u8bd1\u6cd5\u4efb\u52a1"},{"location":"README111.html","text":"\u8be6\u89c1\uff1ahttp://52.83.69.131:8002/1/","title":"README111"},{"location":"README111.html#http52836913180021","text":"","title":"\u8be6\u89c1\uff1ahttp://52.83.69.131:8002/1/"}]}